/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * PortainerEE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.
Examples are available at https://documentation.portainer.io/api/api-examples/
You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).

# Authentication

Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.
Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request
with the **Bearer** authentication mechanism.

Example:

```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE
```

# Security

Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).

Different access policies are available:

- Public access
- Authenticated access
- Restricted access
- Administrator access

### Public access

No authentication is required to access the environments(endpoints) with this access policy.

### Authenticated access

Authentication is required to access the environments(endpoints) with this access policy.

### Restricted access

Authentication is required to access the environments(endpoints) with this access policy.
Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.

### Administrator access

Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.

# Execute Docker requests

Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).

Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.

To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).

# Private Registry

Using private registry, you will need to pass a based64 encoded JSON string ‚Äò{"registryId":\<registryID value\>}‚Äô inside the Request Header. The parameter name is "X-Registry-Auth".
\<registryID value\> - The registry ID where the repository was created.

Example:

```
eyJyZWdpc3RyeUlkIjoxfQ==
```

**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).

 * OpenAPI spec version: 2.19.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  BackupBackupPayload,
  BackupS3BackupPayload,
  BackupRestoreS3Settings,
  PortainereeS3BackupSettings,
  BackupBackupStatus,
  BackupRestorePayload,
} from '../portainerEEAPI.schemas';

/**
 * Creates an archive with a system data snapshot that could be used to restore the system.
 **Access policy**: admin
 * @summary Creates an archive with a system data snapshot that could be used to restore the system.
 */
export const backup = (
  backupBackupPayload: BackupBackupPayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(`/backup`, backupBackupPayload, options);

export const getBackupMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof backup>>,
    TError,
    { data: BackupBackupPayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof backup>>,
  TError,
  { data: BackupBackupPayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof backup>>,
    { data: BackupBackupPayload }
  > = (props) => {
    const { data } = props ?? {};

    return backup(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type BackupMutationResult = NonNullable<
  Awaited<ReturnType<typeof backup>>
>;
export type BackupMutationBody = BackupBackupPayload;
export type BackupMutationError = AxiosError<unknown>;

export const useBackup = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof backup>>,
    TError,
    { data: BackupBackupPayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getBackupMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Creates an archive with a system data snapshot and upload it to the target S3 bucket
 **Access policy**: administrator
 * @summary Execute backup to AWS S3 Bucket
 */
export const backupToS3 = (
  backupS3BackupPayload: BackupS3BackupPayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(`/backup/s3/execute`, backupS3BackupPayload, options);

export const getBackupToS3MutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof backupToS3>>,
    TError,
    { data: BackupS3BackupPayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof backupToS3>>,
  TError,
  { data: BackupS3BackupPayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof backupToS3>>,
    { data: BackupS3BackupPayload }
  > = (props) => {
    const { data } = props ?? {};

    return backupToS3(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type BackupToS3MutationResult = NonNullable<
  Awaited<ReturnType<typeof backupToS3>>
>;
export type BackupToS3MutationBody = BackupS3BackupPayload;
export type BackupToS3MutationError = AxiosError<unknown>;

export const useBackupToS3 = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof backupToS3>>,
    TError,
    { data: BackupS3BackupPayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getBackupToS3MutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Triggers a system restore using details of s3 backup
 **Access policy**: public
 * @summary Triggers a system restore using details of s3 backup
 */
export const restoreFromS3 = (
  backupRestoreS3Settings: BackupRestoreS3Settings,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(`/backup/s3/restore`, backupRestoreS3Settings, options);

export const getRestoreFromS3MutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof restoreFromS3>>,
    TError,
    { data: BackupRestoreS3Settings },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof restoreFromS3>>,
  TError,
  { data: BackupRestoreS3Settings },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof restoreFromS3>>,
    { data: BackupRestoreS3Settings }
  > = (props) => {
    const { data } = props ?? {};

    return restoreFromS3(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RestoreFromS3MutationResult = NonNullable<
  Awaited<ReturnType<typeof restoreFromS3>>
>;
export type RestoreFromS3MutationBody = BackupRestoreS3Settings;
export type RestoreFromS3MutationError = AxiosError<unknown>;

export const useRestoreFromS3 = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof restoreFromS3>>,
    TError,
    { data: BackupRestoreS3Settings },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getRestoreFromS3MutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Fetch s3 backup settings/configurations
 */
export const backupSettingsFetch = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeS3BackupSettings>> =>
  axios.get(`/backup/s3/settings`, options);

export const getBackupSettingsFetchQueryKey = () =>
  [`/backup/s3/settings`] as const;

export const getBackupSettingsFetchQueryOptions = <
  TData = Awaited<ReturnType<typeof backupSettingsFetch>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof backupSettingsFetch>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof backupSettingsFetch>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getBackupSettingsFetchQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof backupSettingsFetch>>
  > = ({ signal }) => backupSettingsFetch({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type BackupSettingsFetchQueryResult = NonNullable<
  Awaited<ReturnType<typeof backupSettingsFetch>>
>;
export type BackupSettingsFetchQueryError = AxiosError<void>;

export const useBackupSettingsFetch = <
  TData = Awaited<ReturnType<typeof backupSettingsFetch>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof backupSettingsFetch>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getBackupSettingsFetchQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Updates stored s3 backup settings and updates running cron jobs as needed
 **Access policy**: administrator
 * @summary Updates stored s3 backup settings and updates running cron jobs as needed
 */
export const updateS3Settings = (
  portainereeS3BackupSettings: PortainereeS3BackupSettings,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(`/backup/s3/settings`, portainereeS3BackupSettings, options);

export const getUpdateS3SettingsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateS3Settings>>,
    TError,
    { data: PortainereeS3BackupSettings },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateS3Settings>>,
  TError,
  { data: PortainereeS3BackupSettings },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateS3Settings>>,
    { data: PortainereeS3BackupSettings }
  > = (props) => {
    const { data } = props ?? {};

    return updateS3Settings(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateS3SettingsMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateS3Settings>>
>;
export type UpdateS3SettingsMutationBody = PortainereeS3BackupSettings;
export type UpdateS3SettingsMutationError = AxiosError<unknown>;

export const useUpdateS3Settings = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateS3Settings>>,
    TError,
    { data: PortainereeS3BackupSettings },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getUpdateS3SettingsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: public
 * @summary Fetch the status of the last scheduled backup run
 */
export const backupStatusFetch = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BackupBackupStatus>> =>
  axios.get(`/backup/s3/status`, options);

export const getBackupStatusFetchQueryKey = () =>
  [`/backup/s3/status`] as const;

export const getBackupStatusFetchQueryOptions = <
  TData = Awaited<ReturnType<typeof backupStatusFetch>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof backupStatusFetch>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof backupStatusFetch>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getBackupStatusFetchQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof backupStatusFetch>>
  > = ({ signal }) => backupStatusFetch({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type BackupStatusFetchQueryResult = NonNullable<
  Awaited<ReturnType<typeof backupStatusFetch>>
>;
export type BackupStatusFetchQueryError = AxiosError<void>;

export const useBackupStatusFetch = <
  TData = Awaited<ReturnType<typeof backupStatusFetch>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof backupStatusFetch>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getBackupStatusFetchQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Triggers a system restore using provided backup file
 **Access policy**: public
 * @summary Triggers a system restore using provided backup file
 */
export const restore = (
  backupRestorePayload: BackupRestorePayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(`/restore`, backupRestorePayload, options);

export const getRestoreMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof restore>>,
    TError,
    { data: BackupRestorePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof restore>>,
  TError,
  { data: BackupRestorePayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof restore>>,
    { data: BackupRestorePayload }
  > = (props) => {
    const { data } = props ?? {};

    return restore(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RestoreMutationResult = NonNullable<
  Awaited<ReturnType<typeof restore>>
>;
export type RestoreMutationBody = BackupRestorePayload;
export type RestoreMutationError = AxiosError<unknown>;

export const useRestore = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof restore>>,
    TError,
    { data: BackupRestorePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getRestoreMutationOptions(options);

  return useMutation(mutationOptions);
};
