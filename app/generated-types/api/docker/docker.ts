/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * PortainerEE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.
Examples are available at https://documentation.portainer.io/api/api-examples/
You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).

# Authentication

Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.
Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request
with the **Bearer** authentication mechanism.

Example:

```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE
```

# Security

Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).

Different access policies are available:

- Public access
- Authenticated access
- Restricted access
- Administrator access

### Public access

No authentication is required to access the environments(endpoints) with this access policy.

### Authenticated access

Authentication is required to access the environments(endpoints) with this access policy.

### Restricted access

Authentication is required to access the environments(endpoints) with this access policy.
Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.

### Administrator access

Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.

# Execute Docker requests

Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).

Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.

To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).

# Private Registry

Using private registry, you will need to pass a based64 encoded JSON string ‚Äò{"registryId":\<registryID value\>}‚Äô inside the Request Header. The parameter name is "X-Registry-Auth".
\<registryID value\> - The registry ID where the repository was created.

Example:

```
eyJyZWdpc3RyeUlkIjoxfQ==
```

**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).

 * OpenAPI spec version: 2.19.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery } from 'react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  ContainersContainerGpusResponse,
  PortainerDockerSnapshotRaw,
  PortainerDockerContainerSnapshot,
  SnapshotContainersListParams,
} from '../portainerEEAPI.schemas';

/**
 * **Access policy**:
 * @summary Fetch container gpus data
 */
export const dockerContainerGpusInspect = (
  environmentId: number,
  containerId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ContainersContainerGpusResponse>> =>
  axios.get(`/docker/${environmentId}/containers/${containerId}/gpus`, options);

export const getDockerContainerGpusInspectQueryKey = (
  environmentId: number,
  containerId: number
) => [`/docker/${environmentId}/containers/${containerId}/gpus`] as const;

export const getDockerContainerGpusInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof dockerContainerGpusInspect>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  containerId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof dockerContainerGpusInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof dockerContainerGpusInspect>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getDockerContainerGpusInspectQueryKey(environmentId, containerId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof dockerContainerGpusInspect>>
  > = ({ signal }) =>
    dockerContainerGpusInspect(environmentId, containerId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(environmentId && containerId),
    ...queryOptions,
  };
};

export type DockerContainerGpusInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof dockerContainerGpusInspect>>
>;
export type DockerContainerGpusInspectQueryError = AxiosError<void>;

export const useDockerContainerGpusInspect = <
  TData = Awaited<ReturnType<typeof dockerContainerGpusInspect>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  containerId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof dockerContainerGpusInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDockerContainerGpusInspectQueryOptions(
    environmentId,
    containerId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**:
 * @summary Fetch image status for container
 */
export const containerImageStatus = (
  environmentId: number,
  containerId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.get(
    `/docker/${environmentId}/containers/${containerId}/image_status`,
    options
  );

export const getContainerImageStatusQueryKey = (
  environmentId: number,
  containerId: number
) =>
  [`/docker/${environmentId}/containers/${containerId}/image_status`] as const;

export const getContainerImageStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof containerImageStatus>>,
  TError = AxiosError<unknown>
>(
  environmentId: number,
  containerId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof containerImageStatus>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof containerImageStatus>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getContainerImageStatusQueryKey(environmentId, containerId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof containerImageStatus>>
  > = ({ signal }) =>
    containerImageStatus(environmentId, containerId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(environmentId && containerId),
    ...queryOptions,
  };
};

export type ContainerImageStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof containerImageStatus>>
>;
export type ContainerImageStatusQueryError = AxiosError<unknown>;

export const useContainerImageStatus = <
  TData = Awaited<ReturnType<typeof containerImageStatus>>,
  TError = AxiosError<unknown>
>(
  environmentId: number,
  containerId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof containerImageStatus>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getContainerImageStatusQueryOptions(
    environmentId,
    containerId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**:
 * @summary Fetch image status for service
 */
export const serviceImageStatus = (
  environmentId: number,
  serviceId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.get(
    `/docker/${environmentId}/services/${serviceId}/image_status`,
    options
  );

export const getServiceImageStatusQueryKey = (
  environmentId: number,
  serviceId: number
) => [`/docker/${environmentId}/services/${serviceId}/image_status`] as const;

export const getServiceImageStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof serviceImageStatus>>,
  TError = AxiosError<unknown>
>(
  environmentId: number,
  serviceId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof serviceImageStatus>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof serviceImageStatus>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getServiceImageStatusQueryKey(environmentId, serviceId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof serviceImageStatus>>
  > = ({ signal }) =>
    serviceImageStatus(environmentId, serviceId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(environmentId && serviceId),
    ...queryOptions,
  };
};

export type ServiceImageStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof serviceImageStatus>>
>;
export type ServiceImageStatusQueryError = AxiosError<unknown>;

export const useServiceImageStatus = <
  TData = Awaited<ReturnType<typeof serviceImageStatus>>,
  TError = AxiosError<unknown>
>(
  environmentId: number,
  serviceId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof serviceImageStatus>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getServiceImageStatusQueryOptions(
    environmentId,
    serviceId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**:
 * @summary Fetch latest snapshot of environment
 */
export const snapshotInspect = (
  environmentId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainerDockerSnapshotRaw>> =>
  axios.get(`/docker/${environmentId}/snapshot`, options);

export const getSnapshotInspectQueryKey = (environmentId: number) =>
  [`/docker/${environmentId}/snapshot`] as const;

export const getSnapshotInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof snapshotInspect>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof snapshotInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof snapshotInspect>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSnapshotInspectQueryKey(environmentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof snapshotInspect>>> = ({
    signal,
  }) => snapshotInspect(environmentId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!environmentId, ...queryOptions };
};

export type SnapshotInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof snapshotInspect>>
>;
export type SnapshotInspectQueryError = AxiosError<void>;

export const useSnapshotInspect = <
  TData = Awaited<ReturnType<typeof snapshotInspect>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof snapshotInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSnapshotInspectQueryOptions(environmentId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**:
 * @summary Fetch container from a snapshot
 */
export const snapshotContainerInspect = (
  environmentId: number,
  containerId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainerDockerContainerSnapshot>> =>
  axios.get(
    `/docker/${environmentId}/snapshot/container/${containerId}`,
    options
  );

export const getSnapshotContainerInspectQueryKey = (
  environmentId: number,
  containerId: number
) => [`/docker/${environmentId}/snapshot/container/${containerId}`] as const;

export const getSnapshotContainerInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof snapshotContainerInspect>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  containerId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof snapshotContainerInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof snapshotContainerInspect>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSnapshotContainerInspectQueryKey(environmentId, containerId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof snapshotContainerInspect>>
  > = ({ signal }) =>
    snapshotContainerInspect(environmentId, containerId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(environmentId && containerId),
    ...queryOptions,
  };
};

export type SnapshotContainerInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof snapshotContainerInspect>>
>;
export type SnapshotContainerInspectQueryError = AxiosError<void>;

export const useSnapshotContainerInspect = <
  TData = Awaited<ReturnType<typeof snapshotContainerInspect>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  containerId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof snapshotContainerInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSnapshotContainerInspectQueryOptions(
    environmentId,
    containerId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**:
 * @summary Fetch containers list from a snapshot
 */
export const snapshotContainersList = (
  environmentId: number,
  params?: SnapshotContainersListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainerDockerContainerSnapshot>> =>
  axios.get(`/docker/${environmentId}/snapshot/containers`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getSnapshotContainersListQueryKey = (
  environmentId: number,
  params?: SnapshotContainersListParams
) =>
  [
    `/docker/${environmentId}/snapshot/containers`,
    ...(params ? [params] : []),
  ] as const;

export const getSnapshotContainersListQueryOptions = <
  TData = Awaited<ReturnType<typeof snapshotContainersList>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  params?: SnapshotContainersListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof snapshotContainersList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof snapshotContainersList>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getSnapshotContainersListQueryKey(environmentId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof snapshotContainersList>>
  > = ({ signal }) =>
    snapshotContainersList(environmentId, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!environmentId, ...queryOptions };
};

export type SnapshotContainersListQueryResult = NonNullable<
  Awaited<ReturnType<typeof snapshotContainersList>>
>;
export type SnapshotContainersListQueryError = AxiosError<void>;

export const useSnapshotContainersList = <
  TData = Awaited<ReturnType<typeof snapshotContainersList>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  params?: SnapshotContainersListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof snapshotContainersList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSnapshotContainersListQueryOptions(
    environmentId,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**:
 * @summary Fetch image status for stack
 */
export const stackImagesStatus = (
  environmentId: number,
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.get(`/docker/${environmentId}/stacks/${id}/images_status`, options);

export const getStackImagesStatusQueryKey = (
  environmentId: number,
  id: number
) => [`/docker/${environmentId}/stacks/${id}/images_status`] as const;

export const getStackImagesStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof stackImagesStatus>>,
  TError = AxiosError<unknown>
>(
  environmentId: number,
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof stackImagesStatus>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof stackImagesStatus>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getStackImagesStatusQueryKey(environmentId, id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof stackImagesStatus>>
  > = ({ signal }) =>
    stackImagesStatus(environmentId, id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(environmentId && id),
    ...queryOptions,
  };
};

export type StackImagesStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof stackImagesStatus>>
>;
export type StackImagesStatusQueryError = AxiosError<unknown>;

export const useStackImagesStatus = <
  TData = Awaited<ReturnType<typeof stackImagesStatus>>,
  TError = AxiosError<unknown>
>(
  environmentId: number,
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof stackImagesStatus>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getStackImagesStatusQueryOptions(
    environmentId,
    id,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
