/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * PortainerEE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.
Examples are available at https://documentation.portainer.io/api/api-examples/
You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).

# Authentication

Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.
Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request
with the **Bearer** authentication mechanism.

Example:

```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE
```

# Security

Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).

Different access policies are available:

- Public access
- Authenticated access
- Restricted access
- Administrator access

### Public access

No authentication is required to access the environments(endpoints) with this access policy.

### Authenticated access

Authentication is required to access the environments(endpoints) with this access policy.

### Restricted access

Authentication is required to access the environments(endpoints) with this access policy.
Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.

### Administrator access

Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.

# Execute Docker requests

Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).

Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.

To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).

# Private Registry

Using private registry, you will need to pass a based64 encoded JSON string ‚Äò{"registryId":\<registryID value\>}‚Äô inside the Request Header. The parameter name is "X-Registry-Auth".
\<registryID value\> - The registry ID where the repository was created.

Example:

```
eyJyZWdpc3RyeUlkIjoxfQ==
```

**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).

 * OpenAPI spec version: 2.19.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  EdgegroupsDecoratedEdgeGroup,
  PortainereeEdgeGroup,
  EdgegroupsEdgeGroupCreatePayload,
  EdgegroupsEdgeGroupUpdatePayload,
} from '../portainerEEAPI.schemas';

/**
 * **Access policy**: administrator
 * @summary list EdgeGroups
 */
export const edgeGroupList = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EdgegroupsDecoratedEdgeGroup[]>> =>
  axios.get(`/edge_groups`, options);

export const getEdgeGroupListQueryKey = () => [`/edge_groups`] as const;

export const getEdgeGroupListQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeGroupList>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof edgeGroupList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof edgeGroupList>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEdgeGroupListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof edgeGroupList>>> = ({
    signal,
  }) => edgeGroupList({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type EdgeGroupListQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeGroupList>>
>;
export type EdgeGroupListQueryError = AxiosError<void>;

export const useEdgeGroupList = <
  TData = Awaited<ReturnType<typeof edgeGroupList>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof edgeGroupList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeGroupListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Create an EdgeGroup
 */
export const edgeGroupCreate = (
  edgegroupsEdgeGroupCreatePayload: EdgegroupsEdgeGroupCreatePayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeGroup>> =>
  axios.post(`/edge_groups`, edgegroupsEdgeGroupCreatePayload, options);

export const getEdgeGroupCreateMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeGroupCreate>>,
    TError,
    { data: EdgegroupsEdgeGroupCreatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeGroupCreate>>,
  TError,
  { data: EdgegroupsEdgeGroupCreatePayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeGroupCreate>>,
    { data: EdgegroupsEdgeGroupCreatePayload }
  > = (props) => {
    const { data } = props ?? {};

    return edgeGroupCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeGroupCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeGroupCreate>>
>;
export type EdgeGroupCreateMutationBody = EdgegroupsEdgeGroupCreatePayload;
export type EdgeGroupCreateMutationError = AxiosError<void>;

export const useEdgeGroupCreate = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeGroupCreate>>,
    TError,
    { data: EdgegroupsEdgeGroupCreatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeGroupCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Deletes an EdgeGroup
 */
export const edgeGroupDelete = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => axios.delete(`/edge_groups/${id}`, options);

export const getEdgeGroupDeleteMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeGroupDelete>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeGroupDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeGroupDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return edgeGroupDelete(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeGroupDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeGroupDelete>>
>;

export type EdgeGroupDeleteMutationError = AxiosError<unknown>;

export const useEdgeGroupDelete = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeGroupDelete>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeGroupDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Inspects an EdgeGroup
 */
export const edgeGroupInspect = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeGroup>> =>
  axios.get(`/edge_groups/${id}`, options);

export const getEdgeGroupInspectQueryKey = (id: number) =>
  [`/edge_groups/${id}`] as const;

export const getEdgeGroupInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeGroupInspect>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeGroupInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof edgeGroupInspect>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEdgeGroupInspectQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof edgeGroupInspect>>
  > = ({ signal }) => edgeGroupInspect(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type EdgeGroupInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeGroupInspect>>
>;
export type EdgeGroupInspectQueryError = AxiosError<void>;

export const useEdgeGroupInspect = <
  TData = Awaited<ReturnType<typeof edgeGroupInspect>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeGroupInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeGroupInspectQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Updates an EdgeGroup
 */
export const egeGroupUpdate = (
  id: number,
  edgegroupsEdgeGroupUpdatePayload: EdgegroupsEdgeGroupUpdatePayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeGroup>> =>
  axios.put(`/edge_groups/${id}`, edgegroupsEdgeGroupUpdatePayload, options);

export const getEgeGroupUpdateMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof egeGroupUpdate>>,
    TError,
    { id: number; data: EdgegroupsEdgeGroupUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof egeGroupUpdate>>,
  TError,
  { id: number; data: EdgegroupsEdgeGroupUpdatePayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof egeGroupUpdate>>,
    { id: number; data: EdgegroupsEdgeGroupUpdatePayload }
  > = (props) => {
    const { id, data } = props ?? {};

    return egeGroupUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EgeGroupUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof egeGroupUpdate>>
>;
export type EgeGroupUpdateMutationBody = EdgegroupsEdgeGroupUpdatePayload;
export type EgeGroupUpdateMutationError = AxiosError<void>;

export const useEgeGroupUpdate = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof egeGroupUpdate>>,
    TError,
    { id: number; data: EdgegroupsEdgeGroupUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEgeGroupUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
