/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * PortainerEE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.
Examples are available at https://documentation.portainer.io/api/api-examples/
You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).

# Authentication

Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.
Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request
with the **Bearer** authentication mechanism.

Example:

```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE
```

# Security

Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).

Different access policies are available:

- Public access
- Authenticated access
- Restricted access
- Administrator access

### Public access

No authentication is required to access the environments(endpoints) with this access policy.

### Authenticated access

Authentication is required to access the environments(endpoints) with this access policy.

### Restricted access

Authentication is required to access the environments(endpoints) with this access policy.
Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.

### Administrator access

Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.

# Execute Docker requests

Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).

Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.

To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).

# Private Registry

Using private registry, you will need to pass a based64 encoded JSON string ‚Äò{"registryId":\<registryID value\>}‚Äô inside the Request Header. The parameter name is "X-Registry-Auth".
\<registryID value\> - The registry ID where the repository was created.

Example:

```
eyJyZWdpc3RyeUlkIjoxfQ==
```

**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).

 * OpenAPI spec version: 2.19.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  PortainereeEdgeJob,
  EdgejobsEdgeJobUpdatePayload,
  EdgejobsEdgeJobFileResponse,
  EdgejobsTaskContainer,
  EdgejobsFileResponse,
  PortainereeEdgeGroup,
  EdgeJobCreateFileBody,
  EdgejobsEdgeJobCreateFromFileContentPayload,
} from '../portainerEEAPI.schemas';

/**
 * **Access policy**: administrator
 * @summary Fetch EdgeJobs list
 */
export const edgeJobList = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeJob[]>> =>
  axios.get(`/edge_jobs`, options);

export const getEdgeJobListQueryKey = () => [`/edge_jobs`] as const;

export const getEdgeJobListQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeJobList>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof edgeJobList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<Awaited<ReturnType<typeof edgeJobList>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEdgeJobListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof edgeJobList>>> = ({
    signal,
  }) => edgeJobList({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type EdgeJobListQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeJobList>>
>;
export type EdgeJobListQueryError = AxiosError<void>;

export const useEdgeJobList = <
  TData = Awaited<ReturnType<typeof edgeJobList>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof edgeJobList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeJobListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Delete an EdgeJob
 */
export const edgeJobDelete = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => axios.delete(`/edge_jobs/${id}`, options);

export const getEdgeJobDeleteMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeJobDelete>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeJobDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeJobDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return edgeJobDelete(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeJobDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeJobDelete>>
>;

export type EdgeJobDeleteMutationError = AxiosError<unknown>;

export const useEdgeJobDelete = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeJobDelete>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeJobDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Inspect an EdgeJob
 */
export const edgeJobInspect = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeJob>> =>
  axios.get(`/edge_jobs/${id}`, options);

export const getEdgeJobInspectQueryKey = (id: number) =>
  [`/edge_jobs/${id}`] as const;

export const getEdgeJobInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeJobInspect>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeJobInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof edgeJobInspect>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEdgeJobInspectQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof edgeJobInspect>>> = ({
    signal,
  }) => edgeJobInspect(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type EdgeJobInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeJobInspect>>
>;
export type EdgeJobInspectQueryError = AxiosError<void>;

export const useEdgeJobInspect = <
  TData = Awaited<ReturnType<typeof edgeJobInspect>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeJobInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeJobInspectQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Update an EdgeJob
 */
export const edgeJobUpdate = (
  id: number,
  edgejobsEdgeJobUpdatePayload: EdgejobsEdgeJobUpdatePayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeJob>> =>
  axios.post(`/edge_jobs/${id}`, edgejobsEdgeJobUpdatePayload, options);

export const getEdgeJobUpdateMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeJobUpdate>>,
    TError,
    { id: number; data: EdgejobsEdgeJobUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeJobUpdate>>,
  TError,
  { id: number; data: EdgejobsEdgeJobUpdatePayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeJobUpdate>>,
    { id: number; data: EdgejobsEdgeJobUpdatePayload }
  > = (props) => {
    const { id, data } = props ?? {};

    return edgeJobUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeJobUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeJobUpdate>>
>;
export type EdgeJobUpdateMutationBody = EdgejobsEdgeJobUpdatePayload;
export type EdgeJobUpdateMutationError = AxiosError<void>;

export const useEdgeJobUpdate = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeJobUpdate>>,
    TError,
    { id: number; data: EdgejobsEdgeJobUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeJobUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Fetch a file of an EdgeJob
 */
export const edgeJobFile = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EdgejobsEdgeJobFileResponse>> =>
  axios.get(`/edge_jobs/${id}/file`, options);

export const getEdgeJobFileQueryKey = (id: number) =>
  [`/edge_jobs/${id}/file`] as const;

export const getEdgeJobFileQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeJobFile>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeJobFile>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof edgeJobFile>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEdgeJobFileQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof edgeJobFile>>> = ({
    signal,
  }) => edgeJobFile(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type EdgeJobFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeJobFile>>
>;
export type EdgeJobFileQueryError = AxiosError<void>;

export const useEdgeJobFile = <
  TData = Awaited<ReturnType<typeof edgeJobFile>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeJobFile>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeJobFileQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Fetch the list of tasks on an EdgeJob
 */
export const edgeJobTasksList = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EdgejobsTaskContainer[]>> =>
  axios.get(`/edge_jobs/${id}/tasks`, options);

export const getEdgeJobTasksListQueryKey = (id: number) =>
  [`/edge_jobs/${id}/tasks`] as const;

export const getEdgeJobTasksListQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeJobTasksList>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeJobTasksList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof edgeJobTasksList>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEdgeJobTasksListQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof edgeJobTasksList>>
  > = ({ signal }) => edgeJobTasksList(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type EdgeJobTasksListQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeJobTasksList>>
>;
export type EdgeJobTasksListQueryError = AxiosError<void>;

export const useEdgeJobTasksList = <
  TData = Awaited<ReturnType<typeof edgeJobTasksList>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeJobTasksList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeJobTasksListQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Clear the log for a specifc task on an EdgeJob
 */
export const edgeJobTasksClear = (
  id: number,
  taskID: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.delete(`/edge_jobs/${id}/tasks/${taskID}/logs`, options);

export const getEdgeJobTasksClearMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeJobTasksClear>>,
    TError,
    { id: number; taskID: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeJobTasksClear>>,
  TError,
  { id: number; taskID: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeJobTasksClear>>,
    { id: number; taskID: number }
  > = (props) => {
    const { id, taskID } = props ?? {};

    return edgeJobTasksClear(id, taskID, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeJobTasksClearMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeJobTasksClear>>
>;

export type EdgeJobTasksClearMutationError = AxiosError<unknown>;

export const useEdgeJobTasksClear = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeJobTasksClear>>,
    TError,
    { id: number; taskID: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeJobTasksClearMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Fetch the log for a specifc task on an EdgeJob
 */
export const edgeJobTaskLogsInspect = (
  id: number,
  taskID: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EdgejobsFileResponse>> =>
  axios.get(`/edge_jobs/${id}/tasks/${taskID}/logs`, options);

export const getEdgeJobTaskLogsInspectQueryKey = (id: number, taskID: number) =>
  [`/edge_jobs/${id}/tasks/${taskID}/logs`] as const;

export const getEdgeJobTaskLogsInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeJobTaskLogsInspect>>,
  TError = AxiosError<void>
>(
  id: number,
  taskID: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeJobTaskLogsInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof edgeJobTaskLogsInspect>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEdgeJobTaskLogsInspectQueryKey(id, taskID);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof edgeJobTaskLogsInspect>>
  > = ({ signal }) =>
    edgeJobTaskLogsInspect(id, taskID, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!(id && taskID), ...queryOptions };
};

export type EdgeJobTaskLogsInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeJobTaskLogsInspect>>
>;
export type EdgeJobTaskLogsInspectQueryError = AxiosError<void>;

export const useEdgeJobTaskLogsInspect = <
  TData = Awaited<ReturnType<typeof edgeJobTaskLogsInspect>>,
  TError = AxiosError<void>
>(
  id: number,
  taskID: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeJobTaskLogsInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeJobTaskLogsInspectQueryOptions(
    id,
    taskID,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Collect the log for a specifc task on an EdgeJob
 */
export const edgeJobTasksCollect = (
  id: number,
  taskID: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(`/edge_jobs/${id}/tasks/${taskID}/logs`, undefined, options);

export const getEdgeJobTasksCollectMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeJobTasksCollect>>,
    TError,
    { id: number; taskID: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeJobTasksCollect>>,
  TError,
  { id: number; taskID: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeJobTasksCollect>>,
    { id: number; taskID: number }
  > = (props) => {
    const { id, taskID } = props ?? {};

    return edgeJobTasksCollect(id, taskID, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeJobTasksCollectMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeJobTasksCollect>>
>;

export type EdgeJobTasksCollectMutationError = AxiosError<unknown>;

export const useEdgeJobTasksCollect = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeJobTasksCollect>>,
    TError,
    { id: number; taskID: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeJobTasksCollectMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Create an EdgeJob from a file
 */
export const edgeJobCreateFile = (
  edgeJobCreateFileBody: EdgeJobCreateFileBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeGroup>> => {
  const formData = new FormData();
  formData.append('file', edgeJobCreateFileBody.file);
  formData.append('Name', edgeJobCreateFileBody.Name);
  formData.append('CronExpression', edgeJobCreateFileBody.CronExpression);
  formData.append('EdgeGroups', edgeJobCreateFileBody.EdgeGroups);
  formData.append('Endpoints', edgeJobCreateFileBody.Endpoints);
  if (edgeJobCreateFileBody.Recurring !== undefined) {
    formData.append('Recurring', edgeJobCreateFileBody.Recurring.toString());
  }

  return axios.post(`/edge_jobs/create/file`, formData, options);
};

export const getEdgeJobCreateFileMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeJobCreateFile>>,
    TError,
    { data: EdgeJobCreateFileBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeJobCreateFile>>,
  TError,
  { data: EdgeJobCreateFileBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeJobCreateFile>>,
    { data: EdgeJobCreateFileBody }
  > = (props) => {
    const { data } = props ?? {};

    return edgeJobCreateFile(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeJobCreateFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeJobCreateFile>>
>;
export type EdgeJobCreateFileMutationBody = EdgeJobCreateFileBody;
export type EdgeJobCreateFileMutationError = AxiosError<void>;

export const useEdgeJobCreateFile = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeJobCreateFile>>,
    TError,
    { data: EdgeJobCreateFileBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeJobCreateFileMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Create an EdgeJob from a text
 */
export const edgeJobCreateString = (
  edgejobsEdgeJobCreateFromFileContentPayload: EdgejobsEdgeJobCreateFromFileContentPayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeGroup>> =>
  axios.post(
    `/edge_jobs/create/string`,
    edgejobsEdgeJobCreateFromFileContentPayload,
    options
  );

export const getEdgeJobCreateStringMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeJobCreateString>>,
    TError,
    { data: EdgejobsEdgeJobCreateFromFileContentPayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeJobCreateString>>,
  TError,
  { data: EdgejobsEdgeJobCreateFromFileContentPayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeJobCreateString>>,
    { data: EdgejobsEdgeJobCreateFromFileContentPayload }
  > = (props) => {
    const { data } = props ?? {};

    return edgeJobCreateString(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeJobCreateStringMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeJobCreateString>>
>;
export type EdgeJobCreateStringMutationBody =
  EdgejobsEdgeJobCreateFromFileContentPayload;
export type EdgeJobCreateStringMutationError = AxiosError<void>;

export const useEdgeJobCreateString = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeJobCreateString>>,
    TError,
    { data: EdgejobsEdgeJobCreateFromFileContentPayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeJobCreateStringMutationOptions(options);

  return useMutation(mutationOptions);
};
