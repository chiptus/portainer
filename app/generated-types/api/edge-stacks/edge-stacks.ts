/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * PortainerEE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.
Examples are available at https://documentation.portainer.io/api/api-examples/
You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).

# Authentication

Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.
Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request
with the **Bearer** authentication mechanism.

Example:

```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE
```

# Security

Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).

Different access policies are available:

- Public access
- Authenticated access
- Restricted access
- Administrator access

### Public access

No authentication is required to access the environments(endpoints) with this access policy.

### Authenticated access

Authentication is required to access the environments(endpoints) with this access policy.

### Restricted access

Authentication is required to access the environments(endpoints) with this access policy.
Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.

### Administrator access

Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.

# Execute Docker requests

Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).

Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.

To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).

# Private Registry

Using private registry, you will need to pass a based64 encoded JSON string ‚Äò{"registryId":\<registryID value\>}‚Äô inside the Request Header. The parameter name is "X-Registry-Auth".
\<registryID value\> - The registry ID where the repository was created.

Example:

```
eyJyZWdpc3RyeUlkIjoxfQ==
```

**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).

 * OpenAPI spec version: 2.19.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  PortainereeEdgeStack,
  EdgestacksUpdateEdgeStackPayload,
  EdgestacksStackFileResponse,
  EdgeStackLogsCollectParams,
  PortainerEdgeStack,
  EdgeStackCreateFileBody,
  EdgeStackCreateFileParams,
  EdgestacksSwarmStackFromGitRepositoryPayload,
  EdgeStackCreateRepositoryParams,
  EdgestacksSwarmStackFromFileContentPayload,
  EdgeStackCreateStringParams,
  EndpointedgeConfigResponse,
} from '../portainerEEAPI.schemas';

/**
 * **Access policy**: administrator
 * @summary Fetches the list of EdgeStacks
 */
export const edgeStackList = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeStack[]>> =>
  axios.get(`/edge_stacks`, options);

export const getEdgeStackListQueryKey = () => [`/edge_stacks`] as const;

export const getEdgeStackListQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeStackList>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof edgeStackList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof edgeStackList>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEdgeStackListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof edgeStackList>>> = ({
    signal,
  }) => edgeStackList({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type EdgeStackListQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeStackList>>
>;
export type EdgeStackListQueryError = AxiosError<void>;

export const useEdgeStackList = <
  TData = Awaited<ReturnType<typeof edgeStackList>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof edgeStackList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeStackListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Delete an EdgeStack
 */
export const edgeStackDelete = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => axios.delete(`/edge_stacks/${id}`, options);

export const getEdgeStackDeleteMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackDelete>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeStackDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeStackDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return edgeStackDelete(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeStackDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeStackDelete>>
>;

export type EdgeStackDeleteMutationError = AxiosError<unknown>;

export const useEdgeStackDelete = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackDelete>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeStackDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Inspect an EdgeStack
 */
export const edgeStackInspect = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeStack>> =>
  axios.get(`/edge_stacks/${id}`, options);

export const getEdgeStackInspectQueryKey = (id: number) =>
  [`/edge_stacks/${id}`] as const;

export const getEdgeStackInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeStackInspect>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeStackInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof edgeStackInspect>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEdgeStackInspectQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof edgeStackInspect>>
  > = ({ signal }) => edgeStackInspect(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type EdgeStackInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeStackInspect>>
>;
export type EdgeStackInspectQueryError = AxiosError<void>;

export const useEdgeStackInspect = <
  TData = Awaited<ReturnType<typeof edgeStackInspect>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeStackInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeStackInspectQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Update an EdgeStack
 */
export const edgeStackUpdate = (
  id: number,
  edgestacksUpdateEdgeStackPayload: EdgestacksUpdateEdgeStackPayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeStack>> =>
  axios.put(`/edge_stacks/${id}`, edgestacksUpdateEdgeStackPayload, options);

export const getEdgeStackUpdateMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackUpdate>>,
    TError,
    { id: number; data: EdgestacksUpdateEdgeStackPayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeStackUpdate>>,
  TError,
  { id: number; data: EdgestacksUpdateEdgeStackPayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeStackUpdate>>,
    { id: number; data: EdgestacksUpdateEdgeStackPayload }
  > = (props) => {
    const { id, data } = props ?? {};

    return edgeStackUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeStackUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeStackUpdate>>
>;
export type EdgeStackUpdateMutationBody = EdgestacksUpdateEdgeStackPayload;
export type EdgeStackUpdateMutationError = AxiosError<void>;

export const useEdgeStackUpdate = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackUpdate>>,
    TError,
    { id: number; data: EdgestacksUpdateEdgeStackPayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeStackUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Fetches the stack file for an EdgeStack
 */
export const edgeStackFile = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EdgestacksStackFileResponse>> =>
  axios.get(`/edge_stacks/${id}/file`, options);

export const getEdgeStackFileQueryKey = (id: number) =>
  [`/edge_stacks/${id}/file`] as const;

export const getEdgeStackFileQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeStackFile>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeStackFile>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof edgeStackFile>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getEdgeStackFileQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof edgeStackFile>>> = ({
    signal,
  }) => edgeStackFile(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type EdgeStackFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeStackFile>>
>;
export type EdgeStackFileQueryError = AxiosError<void>;

export const useEdgeStackFile = <
  TData = Awaited<ReturnType<typeof edgeStackFile>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeStackFile>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeStackFileQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Deletes the available logs for a given edge stack and endpoint
 */
export const edgeStackLogsDelete = (
  id: number,
  endpointId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.delete(`/edge_stacks/${id}/logs/${endpointId}`, options);

export const getEdgeStackLogsDeleteMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackLogsDelete>>,
    TError,
    { id: number; endpointId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeStackLogsDelete>>,
  TError,
  { id: number; endpointId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeStackLogsDelete>>,
    { id: number; endpointId: number }
  > = (props) => {
    const { id, endpointId } = props ?? {};

    return edgeStackLogsDelete(id, endpointId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeStackLogsDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeStackLogsDelete>>
>;

export type EdgeStackLogsDeleteMutationError = AxiosError<unknown>;

export const useEdgeStackLogsDelete = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackLogsDelete>>,
    TError,
    { id: number; endpointId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeStackLogsDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Gets the status of the log collection for a given edgestack and environment
 */
export const edgeStackLogsStatusGet = (
  id: number,
  endpointId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.get(`/edge_stacks/${id}/logs/${endpointId}`, options);

export const getEdgeStackLogsStatusGetQueryKey = (
  id: number,
  endpointId: number
) => [`/edge_stacks/${id}/logs/${endpointId}`] as const;

export const getEdgeStackLogsStatusGetQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeStackLogsStatusGet>>,
  TError = AxiosError<unknown>
>(
  id: number,
  endpointId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeStackLogsStatusGet>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof edgeStackLogsStatusGet>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEdgeStackLogsStatusGetQueryKey(id, endpointId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof edgeStackLogsStatusGet>>
  > = ({ signal }) =>
    edgeStackLogsStatusGet(id, endpointId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!(id && endpointId), ...queryOptions };
};

export type EdgeStackLogsStatusGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeStackLogsStatusGet>>
>;
export type EdgeStackLogsStatusGetQueryError = AxiosError<unknown>;

export const useEdgeStackLogsStatusGet = <
  TData = Awaited<ReturnType<typeof edgeStackLogsStatusGet>>,
  TError = AxiosError<unknown>
>(
  id: number,
  endpointId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeStackLogsStatusGet>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeStackLogsStatusGetQueryOptions(
    id,
    endpointId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Schedule the collection of logs for a given endpoint and edge stack
 */
export const edgeStackLogsCollect = (
  id: number,
  endpointId: number,
  params?: EdgeStackLogsCollectParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.put(`/edge_stacks/${id}/logs/${endpointId}`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getEdgeStackLogsCollectMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackLogsCollect>>,
    TError,
    { id: number; endpointId: number; params?: EdgeStackLogsCollectParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeStackLogsCollect>>,
  TError,
  { id: number; endpointId: number; params?: EdgeStackLogsCollectParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeStackLogsCollect>>,
    { id: number; endpointId: number; params?: EdgeStackLogsCollectParams }
  > = (props) => {
    const { id, endpointId, params } = props ?? {};

    return edgeStackLogsCollect(id, endpointId, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeStackLogsCollectMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeStackLogsCollect>>
>;

export type EdgeStackLogsCollectMutationError = AxiosError<unknown>;

export const useEdgeStackLogsCollect = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackLogsCollect>>,
    TError,
    { id: number; endpointId: number; params?: EdgeStackLogsCollectParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeStackLogsCollectMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Authorized only if the request is done by an Edge Environment(Endpoint)
 * @summary Update an EdgeStack status
 */
export const edgeStackStatusUpdate = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeStack>> =>
  axios.put(`/edge_stacks/${id}/status`, undefined, options);

export const getEdgeStackStatusUpdateMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackStatusUpdate>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeStackStatusUpdate>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeStackStatusUpdate>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return edgeStackStatusUpdate(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeStackStatusUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeStackStatusUpdate>>
>;

export type EdgeStackStatusUpdateMutationError = AxiosError<void>;

export const useEdgeStackStatusUpdate = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackStatusUpdate>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeStackStatusUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Authorized only if the request is done by an Edge Environment(Endpoint)
 * @summary Delete an EdgeStack status
 */
export const edgeStackStatusDelete = (
  id: number,
  environmentId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainerEdgeStack>> =>
  axios.delete(`/edge_stacks/${id}/status/${environmentId}`, options);

export const getEdgeStackStatusDeleteMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackStatusDelete>>,
    TError,
    { id: number; environmentId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeStackStatusDelete>>,
  TError,
  { id: number; environmentId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeStackStatusDelete>>,
    { id: number; environmentId: number }
  > = (props) => {
    const { id, environmentId } = props ?? {};

    return edgeStackStatusDelete(id, environmentId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeStackStatusDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeStackStatusDelete>>
>;

export type EdgeStackStatusDeleteMutationError = AxiosError<void>;

export const useEdgeStackStatusDelete = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackStatusDelete>>,
    TError,
    { id: number; environmentId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeStackStatusDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Create an EdgeStack from file
 */
export const edgeStackCreateFile = (
  edgeStackCreateFileBody: EdgeStackCreateFileBody,
  params?: EdgeStackCreateFileParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeStack>> => {
  const formData = new FormData();
  formData.append('Name', edgeStackCreateFileBody.Name);
  formData.append('file', edgeStackCreateFileBody.file);
  formData.append('EdgeGroups', edgeStackCreateFileBody.EdgeGroups);
  formData.append(
    'DeploymentType',
    edgeStackCreateFileBody.DeploymentType.toString()
  );
  if (edgeStackCreateFileBody.Registries !== undefined) {
    formData.append('Registries', edgeStackCreateFileBody.Registries);
  }
  if (edgeStackCreateFileBody.UseManifestNamespaces !== undefined) {
    formData.append(
      'UseManifestNamespaces',
      edgeStackCreateFileBody.UseManifestNamespaces.toString()
    );
  }
  if (edgeStackCreateFileBody.PrePullImage !== undefined) {
    formData.append(
      'PrePullImage',
      edgeStackCreateFileBody.PrePullImage.toString()
    );
  }
  if (edgeStackCreateFileBody.RetryDeploy !== undefined) {
    formData.append(
      'RetryDeploy',
      edgeStackCreateFileBody.RetryDeploy.toString()
    );
  }

  return axios.post(`/edge_stacks/create/file`, formData, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getEdgeStackCreateFileMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackCreateFile>>,
    TError,
    { data: EdgeStackCreateFileBody; params?: EdgeStackCreateFileParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeStackCreateFile>>,
  TError,
  { data: EdgeStackCreateFileBody; params?: EdgeStackCreateFileParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeStackCreateFile>>,
    { data: EdgeStackCreateFileBody; params?: EdgeStackCreateFileParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return edgeStackCreateFile(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeStackCreateFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeStackCreateFile>>
>;
export type EdgeStackCreateFileMutationBody = EdgeStackCreateFileBody;
export type EdgeStackCreateFileMutationError = AxiosError<void>;

export const useEdgeStackCreateFile = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackCreateFile>>,
    TError,
    { data: EdgeStackCreateFileBody; params?: EdgeStackCreateFileParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeStackCreateFileMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Create an EdgeStack from a git repository
 */
export const edgeStackCreateRepository = (
  edgestacksSwarmStackFromGitRepositoryPayload: EdgestacksSwarmStackFromGitRepositoryPayload,
  params: EdgeStackCreateRepositoryParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeStack>> =>
  axios.post(
    `/edge_stacks/create/repository`,
    edgestacksSwarmStackFromGitRepositoryPayload,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );

export const getEdgeStackCreateRepositoryMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackCreateRepository>>,
    TError,
    {
      data: EdgestacksSwarmStackFromGitRepositoryPayload;
      params: EdgeStackCreateRepositoryParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeStackCreateRepository>>,
  TError,
  {
    data: EdgestacksSwarmStackFromGitRepositoryPayload;
    params: EdgeStackCreateRepositoryParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeStackCreateRepository>>,
    {
      data: EdgestacksSwarmStackFromGitRepositoryPayload;
      params: EdgeStackCreateRepositoryParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return edgeStackCreateRepository(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeStackCreateRepositoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeStackCreateRepository>>
>;
export type EdgeStackCreateRepositoryMutationBody =
  EdgestacksSwarmStackFromGitRepositoryPayload;
export type EdgeStackCreateRepositoryMutationError = AxiosError<void>;

export const useEdgeStackCreateRepository = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackCreateRepository>>,
    TError,
    {
      data: EdgestacksSwarmStackFromGitRepositoryPayload;
      params: EdgeStackCreateRepositoryParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeStackCreateRepositoryMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Create an EdgeStack from a text
 */
export const edgeStackCreateString = (
  edgestacksSwarmStackFromFileContentPayload: EdgestacksSwarmStackFromFileContentPayload,
  params?: EdgeStackCreateStringParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeEdgeStack>> =>
  axios.post(
    `/edge_stacks/create/string`,
    edgestacksSwarmStackFromFileContentPayload,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );

export const getEdgeStackCreateStringMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackCreateString>>,
    TError,
    {
      data: EdgestacksSwarmStackFromFileContentPayload;
      params?: EdgeStackCreateStringParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeStackCreateString>>,
  TError,
  {
    data: EdgestacksSwarmStackFromFileContentPayload;
    params?: EdgeStackCreateStringParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeStackCreateString>>,
    {
      data: EdgestacksSwarmStackFromFileContentPayload;
      params?: EdgeStackCreateStringParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return edgeStackCreateString(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeStackCreateStringMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeStackCreateString>>
>;
export type EdgeStackCreateStringMutationBody =
  EdgestacksSwarmStackFromFileContentPayload;
export type EdgeStackCreateStringMutationError = AxiosError<void>;

export const useEdgeStackCreateString = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeStackCreateString>>,
    TError,
    {
      data: EdgestacksSwarmStackFromFileContentPayload;
      params?: EdgeStackCreateStringParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeStackCreateStringMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: public
 * @summary Inspect an Edge Stack for an Environment(Endpoint)
 */
export const getEndpointsIdEdgeStacksStackId = (
  id: number,
  stackId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EndpointedgeConfigResponse>> =>
  axios.get(`/endpoints/${id}/edge/stacks/${stackId}`, options);

export const getGetEndpointsIdEdgeStacksStackIdQueryKey = (
  id: number,
  stackId: number
) => [`/endpoints/${id}/edge/stacks/${stackId}`] as const;

export const getGetEndpointsIdEdgeStacksStackIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getEndpointsIdEdgeStacksStackId>>,
  TError = AxiosError<void>
>(
  id: number,
  stackId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndpointsIdEdgeStacksStackId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getEndpointsIdEdgeStacksStackId>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetEndpointsIdEdgeStacksStackIdQueryKey(id, stackId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEndpointsIdEdgeStacksStackId>>
  > = ({ signal }) =>
    getEndpointsIdEdgeStacksStackId(id, stackId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!(id && stackId), ...queryOptions };
};

export type GetEndpointsIdEdgeStacksStackIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEndpointsIdEdgeStacksStackId>>
>;
export type GetEndpointsIdEdgeStacksStackIdQueryError = AxiosError<void>;

export const useGetEndpointsIdEdgeStacksStackId = <
  TData = Awaited<ReturnType<typeof getEndpointsIdEdgeStacksStackId>>,
  TError = AxiosError<void>
>(
  id: number,
  stackId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getEndpointsIdEdgeStacksStackId>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetEndpointsIdEdgeStacksStackIdQueryOptions(
    id,
    stackId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
