/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * PortainerEE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.
Examples are available at https://documentation.portainer.io/api/api-examples/
You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).

# Authentication

Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.
Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request
with the **Bearer** authentication mechanism.

Example:

```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE
```

# Security

Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).

Different access policies are available:

- Public access
- Authenticated access
- Restricted access
- Administrator access

### Public access

No authentication is required to access the environments(endpoints) with this access policy.

### Authenticated access

Authentication is required to access the environments(endpoints) with this access policy.

### Restricted access

Authentication is required to access the environments(endpoints) with this access policy.
Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.

### Administrator access

Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.

# Execute Docker requests

Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).

Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.

To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).

# Private Registry

Using private registry, you will need to pass a based64 encoded JSON string ‚Äò{"registryId":\<registryID value\>}‚Äô inside the Request Header. The parameter name is "X-Registry-Auth".
\<registryID value\> - The registry ID where the repository was created.

Example:

```
eyJyZWdpc3RyeUlkIjoxfQ==
```

**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).

 * OpenAPI spec version: 2.19.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  EdgeupdateschedulesDecoratedUpdateSchedule,
  EdgeupdateschedulesUpdatePayload,
  TypesEndpointUpdateScheduleRelation,
  EdgeupdateschedulesActiveSchedulePayload,
} from '../portainerEEAPI.schemas';

/**
 * **Access policy**: administrator
 * @summary Fetches the list of Edge Update Schedules
 */
export const edgeUpdateScheduleList = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EdgeupdateschedulesDecoratedUpdateSchedule[]>> =>
  axios.get(`/edge_update_schedules`, options);

export const getEdgeUpdateScheduleListQueryKey = () =>
  [`/edge_update_schedules`] as const;

export const getEdgeUpdateScheduleListQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeUpdateScheduleList>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof edgeUpdateScheduleList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof edgeUpdateScheduleList>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEdgeUpdateScheduleListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof edgeUpdateScheduleList>>
  > = ({ signal }) => edgeUpdateScheduleList({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type EdgeUpdateScheduleListQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeUpdateScheduleList>>
>;
export type EdgeUpdateScheduleListQueryError = AxiosError<void>;

export const useEdgeUpdateScheduleList = <
  TData = Awaited<ReturnType<typeof edgeUpdateScheduleList>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof edgeUpdateScheduleList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeUpdateScheduleListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Updates an Edge Update Schedule
 */
export const edgeUpdateScheduleUpdate = (
  edgeupdateschedulesUpdatePayload: EdgeupdateschedulesUpdatePayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(
    `/edge_update_schedules`,
    edgeupdateschedulesUpdatePayload,
    options
  );

export const getEdgeUpdateScheduleUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeUpdateScheduleUpdate>>,
    TError,
    { data: EdgeupdateschedulesUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeUpdateScheduleUpdate>>,
  TError,
  { data: EdgeupdateschedulesUpdatePayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeUpdateScheduleUpdate>>,
    { data: EdgeupdateschedulesUpdatePayload }
  > = (props) => {
    const { data } = props ?? {};

    return edgeUpdateScheduleUpdate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeUpdateScheduleUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeUpdateScheduleUpdate>>
>;
export type EdgeUpdateScheduleUpdateMutationBody =
  EdgeupdateschedulesUpdatePayload;
export type EdgeUpdateScheduleUpdateMutationError = AxiosError<unknown>;

export const useEdgeUpdateScheduleUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeUpdateScheduleUpdate>>,
    TError,
    { data: EdgeupdateschedulesUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeUpdateScheduleUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Deletes an Edge Update Schedule
 */
export const edgeUpdateScheduleDelete = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.delete(`/edge_update_schedules/${id}`, options);

export const getEdgeUpdateScheduleDeleteMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeUpdateScheduleDelete>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof edgeUpdateScheduleDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof edgeUpdateScheduleDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return edgeUpdateScheduleDelete(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EdgeUpdateScheduleDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof edgeUpdateScheduleDelete>>
>;

export type EdgeUpdateScheduleDeleteMutationError = AxiosError<unknown>;

export const useEdgeUpdateScheduleDelete = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof edgeUpdateScheduleDelete>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEdgeUpdateScheduleDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: administrator
 * @summary Returns the Edge Update Schedule with the given ID
 */
export const edgeUpdateScheduleInspect = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EdgeupdateschedulesDecoratedUpdateSchedule>> =>
  axios.get(`/edge_update_schedules/${id}`, options);

export const getEdgeUpdateScheduleInspectQueryKey = (id: number) =>
  [`/edge_update_schedules/${id}`] as const;

export const getEdgeUpdateScheduleInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeUpdateScheduleInspect>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeUpdateScheduleInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof edgeUpdateScheduleInspect>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEdgeUpdateScheduleInspectQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof edgeUpdateScheduleInspect>>
  > = ({ signal }) =>
    edgeUpdateScheduleInspect(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type EdgeUpdateScheduleInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeUpdateScheduleInspect>>
>;
export type EdgeUpdateScheduleInspectQueryError = AxiosError<void>;

export const useEdgeUpdateScheduleInspect = <
  TData = Awaited<ReturnType<typeof edgeUpdateScheduleInspect>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeUpdateScheduleInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeUpdateScheduleInspectQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Fetches the list of Active Edge Update Schedules
 */
export const edgeUpdateScheduleActiveSchedulesList = (
  edgeupdateschedulesActiveSchedulePayload: EdgeupdateschedulesActiveSchedulePayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TypesEndpointUpdateScheduleRelation[]>> =>
  axios.get(`/edge_update_schedules/active`, options);

export const getEdgeUpdateScheduleActiveSchedulesListQueryKey = (
  edgeupdateschedulesActiveSchedulePayload: EdgeupdateschedulesActiveSchedulePayload
) =>
  [
    `/edge_update_schedules/active`,
    edgeupdateschedulesActiveSchedulePayload,
  ] as const;

export const getEdgeUpdateScheduleActiveSchedulesListQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeUpdateScheduleActiveSchedulesList>>,
  TError = AxiosError<void>
>(
  edgeupdateschedulesActiveSchedulePayload: EdgeupdateschedulesActiveSchedulePayload,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeUpdateScheduleActiveSchedulesList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof edgeUpdateScheduleActiveSchedulesList>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getEdgeUpdateScheduleActiveSchedulesListQueryKey(
      edgeupdateschedulesActiveSchedulePayload
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof edgeUpdateScheduleActiveSchedulesList>>
  > = ({ signal }) =>
    edgeUpdateScheduleActiveSchedulesList(
      edgeupdateschedulesActiveSchedulePayload,
      { signal, ...axiosOptions }
    );

  return { queryKey, queryFn, ...queryOptions };
};

export type EdgeUpdateScheduleActiveSchedulesListQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeUpdateScheduleActiveSchedulesList>>
>;
export type EdgeUpdateScheduleActiveSchedulesListQueryError = AxiosError<void>;

export const useEdgeUpdateScheduleActiveSchedulesList = <
  TData = Awaited<ReturnType<typeof edgeUpdateScheduleActiveSchedulesList>>,
  TError = AxiosError<void>
>(
  edgeupdateschedulesActiveSchedulePayload: EdgeupdateschedulesActiveSchedulePayload,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof edgeUpdateScheduleActiveSchedulesList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeUpdateScheduleActiveSchedulesListQueryOptions(
    edgeupdateschedulesActiveSchedulePayload,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: authenticated
 * @summary Fetches the supported versions of the agent to update/rollback
 */
export const agentVersions = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string[]>> =>
  axios.get(`/edge_update_schedules/agent_versions`, options);

export const getAgentVersionsQueryKey = () =>
  [`/edge_update_schedules/agent_versions`] as const;

export const getAgentVersionsQueryOptions = <
  TData = Awaited<ReturnType<typeof agentVersions>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof agentVersions>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof agentVersions>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAgentVersionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof agentVersions>>> = ({
    signal,
  }) => agentVersions({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type AgentVersionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof agentVersions>>
>;
export type AgentVersionsQueryError = AxiosError<void>;

export const useAgentVersions = <
  TData = Awaited<ReturnType<typeof agentVersions>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof agentVersions>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAgentVersionsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: administrator
 * @summary Fetches the previous versions of updated agents
 */
export const edgeUpdatePreviousVersions = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string[]>> =>
  axios.get(`/edge_update_schedules/previous_versions`, options);

export const getEdgeUpdatePreviousVersionsQueryKey = () =>
  [`/edge_update_schedules/previous_versions`] as const;

export const getEdgeUpdatePreviousVersionsQueryOptions = <
  TData = Awaited<ReturnType<typeof edgeUpdatePreviousVersions>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof edgeUpdatePreviousVersions>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof edgeUpdatePreviousVersions>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getEdgeUpdatePreviousVersionsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof edgeUpdatePreviousVersions>>
  > = ({ signal }) => edgeUpdatePreviousVersions({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type EdgeUpdatePreviousVersionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof edgeUpdatePreviousVersions>>
>;
export type EdgeUpdatePreviousVersionsQueryError = AxiosError<void>;

export const useEdgeUpdatePreviousVersions = <
  TData = Awaited<ReturnType<typeof edgeUpdatePreviousVersions>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof edgeUpdatePreviousVersions>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getEdgeUpdatePreviousVersionsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
