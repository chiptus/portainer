/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * PortainerEE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.
Examples are available at https://documentation.portainer.io/api/api-examples/
You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).

# Authentication

Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.
Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request
with the **Bearer** authentication mechanism.

Example:

```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE
```

# Security

Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).

Different access policies are available:

- Public access
- Authenticated access
- Restricted access
- Administrator access

### Public access

No authentication is required to access the environments(endpoints) with this access policy.

### Authenticated access

Authentication is required to access the environments(endpoints) with this access policy.

### Restricted access

Authentication is required to access the environments(endpoints) with this access policy.
Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.

### Administrator access

Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.

# Execute Docker requests

Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).

Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.

To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).

# Private Registry

Using private registry, you will need to pass a based64 encoded JSON string ‚Äò{"registryId":\<registryID value\>}‚Äô inside the Request Header. The parameter name is "X-Registry-Auth".
\<registryID value\> - The registry ID where the repository was created.

Example:

```
eyJyZWdpc3RyeUlkIjoxfQ==
```

**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).

 * OpenAPI spec version: 2.19.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  PodsecurityPodSecurityRule,
  ModelsK8sApplication,
  GetKubernetesApplicationParams,
  KubernetesNamespacesToggleSystemPayload,
  PortainereeK8sNodesLimits,
  GetKubernetesConfigParams,
} from '../portainerEEAPI.schemas';

/**
 * Get Pod Security Rule within k8s cluster
 **Access policy**: authenticated
 * @summary Get Pod Security Rule within k8s cluster, if not found, the frontend will create a default
 */
export const getKubernetesPodSecurityRule = (
  environmentId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PodsecurityPodSecurityRule>> =>
  axios.get(`/kubernetes/${environmentId}/opa`, options);

export const getGetKubernetesPodSecurityRuleQueryKey = (
  environmentId: number
) => [`/kubernetes/${environmentId}/opa`] as const;

export const getGetKubernetesPodSecurityRuleQueryOptions = <
  TData = Awaited<ReturnType<typeof getKubernetesPodSecurityRule>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getKubernetesPodSecurityRule>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getKubernetesPodSecurityRule>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetKubernetesPodSecurityRuleQueryKey(environmentId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getKubernetesPodSecurityRule>>
  > = ({ signal }) =>
    getKubernetesPodSecurityRule(environmentId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!environmentId, ...queryOptions };
};

export type GetKubernetesPodSecurityRuleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKubernetesPodSecurityRule>>
>;
export type GetKubernetesPodSecurityRuleQueryError = AxiosError<void>;

export const useGetKubernetesPodSecurityRule = <
  TData = Awaited<ReturnType<typeof getKubernetesPodSecurityRule>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getKubernetesPodSecurityRule>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetKubernetesPodSecurityRuleQueryOptions(
    environmentId,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update Pod Security Rule within k8s cluster
 **Access policy**: authenticated
 * @summary Update Pod Security Rule within k8s cluster
 */
export const updateK8sPodSecurityRule = (
  environmentId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.put(`/kubernetes/${environmentId}/opa`, undefined, options);

export const getUpdateK8sPodSecurityRuleMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateK8sPodSecurityRule>>,
    TError,
    { environmentId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateK8sPodSecurityRule>>,
  TError,
  { environmentId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateK8sPodSecurityRule>>,
    { environmentId: number }
  > = (props) => {
    const { environmentId } = props ?? {};

    return updateK8sPodSecurityRule(environmentId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateK8sPodSecurityRuleMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateK8sPodSecurityRule>>
>;

export type UpdateK8sPodSecurityRuleMutationError = AxiosError<unknown>;

export const useUpdateK8sPodSecurityRule = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateK8sPodSecurityRule>>,
    TError,
    { environmentId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getUpdateK8sPodSecurityRuleMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Gets a list of Kubernetes deployments, statefulsets and daemonsets
 **Access policy**: authenticated
 * @summary gets a list of Kubernetes applications
 */
export const getKubernetesApplications = (
  id: number,
  namespace: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ModelsK8sApplication[]>> =>
  axios.get(`/kubernetes/${id}/namespaces/${namespace}/applications`, options);

export const getGetKubernetesApplicationsQueryKey = (
  id: number,
  namespace: string
) => [`/kubernetes/${id}/namespaces/${namespace}/applications`] as const;

export const getGetKubernetesApplicationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getKubernetesApplications>>,
  TError = AxiosError<void>
>(
  id: number,
  namespace: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getKubernetesApplications>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getKubernetesApplications>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetKubernetesApplicationsQueryKey(id, namespace);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getKubernetesApplications>>
  > = ({ signal }) =>
    getKubernetesApplications(id, namespace, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!(id && namespace), ...queryOptions };
};

export type GetKubernetesApplicationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKubernetesApplications>>
>;
export type GetKubernetesApplicationsQueryError = AxiosError<void>;

export const useGetKubernetesApplications = <
  TData = Awaited<ReturnType<typeof getKubernetesApplications>>,
  TError = AxiosError<void>
>(
  id: number,
  namespace: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getKubernetesApplications>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetKubernetesApplicationsQueryOptions(
    id,
    namespace,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Gets a Kubernetes deployment, statefulset and daemonset application details
 **Access policy**: authenticated
 * @summary gets a Kubernetes application
 */
export const getKubernetesApplication = (
  id: number,
  namespace: string,
  kind: string,
  name: string,
  params: GetKubernetesApplicationParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ModelsK8sApplication>> =>
  axios.get(
    `/kubernetes/${id}/namespaces/${namespace}/applications/${kind}/${name}`,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );

export const getGetKubernetesApplicationQueryKey = (
  id: number,
  namespace: string,
  kind: string,
  name: string,
  params: GetKubernetesApplicationParams
) =>
  [
    `/kubernetes/${id}/namespaces/${namespace}/applications/${kind}/${name}`,
    ...(params ? [params] : []),
  ] as const;

export const getGetKubernetesApplicationQueryOptions = <
  TData = Awaited<ReturnType<typeof getKubernetesApplication>>,
  TError = AxiosError<void>
>(
  id: number,
  namespace: string,
  kind: string,
  name: string,
  params: GetKubernetesApplicationParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getKubernetesApplication>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getKubernetesApplication>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetKubernetesApplicationQueryKey(id, namespace, kind, name, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getKubernetesApplication>>
  > = ({ signal }) =>
    getKubernetesApplication(id, namespace, kind, name, params, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(id && namespace && kind && name),
    ...queryOptions,
  };
};

export type GetKubernetesApplicationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKubernetesApplication>>
>;
export type GetKubernetesApplicationQueryError = AxiosError<void>;

export const useGetKubernetesApplication = <
  TData = Awaited<ReturnType<typeof getKubernetesApplication>>,
  TError = AxiosError<void>
>(
  id: number,
  namespace: string,
  kind: string,
  name: string,
  params: GetKubernetesApplicationParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getKubernetesApplication>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetKubernetesApplicationQueryOptions(
    id,
    namespace,
    kind,
    name,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Toggle the system state for a namespace
 **Access policy**: administrator or environment(endpoint) admin
 * @summary Toggle the system state for a namespace
 */
export const kubernetesNamespacesToggleSystem = (
  id: number,
  namespace: string,
  kubernetesNamespacesToggleSystemPayload: KubernetesNamespacesToggleSystemPayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.put(
    `/kubernetes/${id}/namespaces/${namespace}/system`,
    kubernetesNamespacesToggleSystemPayload,
    options
  );

export const getKubernetesNamespacesToggleSystemMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof kubernetesNamespacesToggleSystem>>,
    TError,
    {
      id: number;
      namespace: string;
      data: KubernetesNamespacesToggleSystemPayload;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof kubernetesNamespacesToggleSystem>>,
  TError,
  {
    id: number;
    namespace: string;
    data: KubernetesNamespacesToggleSystemPayload;
  },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof kubernetesNamespacesToggleSystem>>,
    {
      id: number;
      namespace: string;
      data: KubernetesNamespacesToggleSystemPayload;
    }
  > = (props) => {
    const { id, namespace, data } = props ?? {};

    return kubernetesNamespacesToggleSystem(id, namespace, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type KubernetesNamespacesToggleSystemMutationResult = NonNullable<
  Awaited<ReturnType<typeof kubernetesNamespacesToggleSystem>>
>;
export type KubernetesNamespacesToggleSystemMutationBody =
  KubernetesNamespacesToggleSystemPayload;
export type KubernetesNamespacesToggleSystemMutationError = AxiosError<unknown>;

export const useKubernetesNamespacesToggleSystem = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof kubernetesNamespacesToggleSystem>>,
    TError,
    {
      id: number;
      namespace: string;
      data: KubernetesNamespacesToggleSystemPayload;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions =
    getKubernetesNamespacesToggleSystemMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get CPU and memory limits of all nodes within k8s cluster
 **Access policy**: authenticated
 * @summary Get CPU and memory limits of all nodes within k8s cluster
 */
export const getKubernetesNodesLimits = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeK8sNodesLimits>> =>
  axios.get(`/kubernetes/${id}/nodes_limits`, options);

export const getGetKubernetesNodesLimitsQueryKey = (id: number) =>
  [`/kubernetes/${id}/nodes_limits`] as const;

export const getGetKubernetesNodesLimitsQueryOptions = <
  TData = Awaited<ReturnType<typeof getKubernetesNodesLimits>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getKubernetesNodesLimits>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getKubernetesNodesLimits>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetKubernetesNodesLimitsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getKubernetesNodesLimits>>
  > = ({ signal }) => getKubernetesNodesLimits(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type GetKubernetesNodesLimitsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKubernetesNodesLimits>>
>;
export type GetKubernetesNodesLimitsQueryError = AxiosError<void>;

export const useGetKubernetesNodesLimits = <
  TData = Awaited<ReturnType<typeof getKubernetesNodesLimits>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getKubernetesNodesLimits>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetKubernetesNodesLimitsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Generates kubeconfig file enabling client communication with k8s api server
 **Access policy**: authenticated
 * @summary Generates kubeconfig file enabling client communication with k8s api server
 */
export const getKubernetesConfig = (
  params?: GetKubernetesConfigParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.get(`/kubernetes/config`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getGetKubernetesConfigQueryKey = (
  params?: GetKubernetesConfigParams
) => [`/kubernetes/config`, ...(params ? [params] : [])] as const;

export const getGetKubernetesConfigQueryOptions = <
  TData = Awaited<ReturnType<typeof getKubernetesConfig>>,
  TError = AxiosError<unknown>
>(
  params?: GetKubernetesConfigParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getKubernetesConfig>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getKubernetesConfig>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetKubernetesConfigQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getKubernetesConfig>>
  > = ({ signal }) => getKubernetesConfig(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type GetKubernetesConfigQueryResult = NonNullable<
  Awaited<ReturnType<typeof getKubernetesConfig>>
>;
export type GetKubernetesConfigQueryError = AxiosError<unknown>;

export const useGetKubernetesConfig = <
  TData = Awaited<ReturnType<typeof getKubernetesConfig>>,
  TError = AxiosError<unknown>
>(
  params?: GetKubernetesConfigParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getKubernetesConfig>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetKubernetesConfigQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
