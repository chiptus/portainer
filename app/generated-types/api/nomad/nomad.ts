/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * PortainerEE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.
Examples are available at https://documentation.portainer.io/api/api-examples/
You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).

# Authentication

Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.
Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request
with the **Bearer** authentication mechanism.

Example:

```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE
```

# Security

Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).

Different access policies are available:

- Public access
- Authenticated access
- Restricted access
- Administrator access

### Public access

No authentication is required to access the environments(endpoints) with this access policy.

### Authenticated access

Authentication is required to access the environments(endpoints) with this access policy.

### Restricted access

Authentication is required to access the environments(endpoints) with this access policy.
Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.

### Administrator access

Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.

# Execute Docker requests

Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).

Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.

To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).

# Private Registry

Using private registry, you will need to pass a based64 encoded JSON string ‚Äò{"registryId":\<registryID value\>}‚Äô inside the Request Header. The parameter name is "X-Registry-Auth".
\<registryID value\> - The registry ID where the repository was created.

Example:

```
eyJyZWdpc3RyeUlkIjoxfQ==
```

**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).

 * OpenAPI spec version: 2.19.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type { NomadSlimNomadTaskEvent } from '../portainerEEAPI.schemas';

/**
 * Allocation ID, namespace and task name params are required
 **Access policy**: administrator
 * @summary Retrieve events for a nomad task
 */
export const getTaskEvents = (
  environmentId: number,
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NomadSlimNomadTaskEvent[]>> =>
  axios.get(
    `/nomad/endpoints/${environmentId}/allocation/${id}/events`,
    options
  );

export const getGetTaskEventsQueryKey = (environmentId: number, id: number) =>
  [`/nomad/endpoints/${environmentId}/allocation/${id}/events`] as const;

export const getGetTaskEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTaskEvents>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getTaskEvents>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getTaskEvents>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTaskEventsQueryKey(environmentId, id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskEvents>>> = ({
    signal,
  }) => getTaskEvents(environmentId, id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(environmentId && id),
    ...queryOptions,
  };
};

export type GetTaskEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTaskEvents>>
>;
export type GetTaskEventsQueryError = AxiosError<void>;

export const useGetTaskEvents = <
  TData = Awaited<ReturnType<typeof getTaskEvents>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getTaskEvents>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTaskEventsQueryOptions(environmentId, id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Allocation ID, namespace, task name and refresh params are required
 **Access policy**: administrator
 * @summary Retrieve logs for a nomad task
 */
export const getTaskLogs = (
  environmentId: number,
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NomadSlimNomadTaskEvent[]>> =>
  axios.get(`/nomad/endpoints/${environmentId}/allocation/${id}/logs`, options);

export const getGetTaskLogsQueryKey = (environmentId: number, id: number) =>
  [`/nomad/endpoints/${environmentId}/allocation/${id}/logs`] as const;

export const getGetTaskLogsQueryOptions = <
  TData = Awaited<ReturnType<typeof getTaskLogs>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getTaskLogs>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getTaskLogs>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTaskLogsQueryKey(environmentId, id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskLogs>>> = ({
    signal,
  }) => getTaskLogs(environmentId, id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(environmentId && id),
    ...queryOptions,
  };
};

export type GetTaskLogsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTaskLogs>>
>;
export type GetTaskLogsQueryError = AxiosError<void>;

export const useGetTaskLogs = <
  TData = Awaited<ReturnType<typeof getTaskLogs>>,
  TError = AxiosError<void>
>(
  environmentId: number,
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getTaskLogs>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTaskLogsQueryOptions(environmentId, id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * **Access policy**: authenticated users
 * @summary get basic Nomad information for dashboard
 */
export const getDashboard = (
  environmentId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.get(`/nomad/endpoints/${environmentId}/dashboard`, options);

export const getGetDashboardQueryKey = (environmentId: number) =>
  [`/nomad/endpoints/${environmentId}/dashboard`] as const;

export const getGetDashboardQueryOptions = <
  TData = Awaited<ReturnType<typeof getDashboard>>,
  TError = AxiosError<unknown>
>(
  environmentId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDashboard>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getDashboard>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDashboardQueryKey(environmentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDashboard>>> = ({
    signal,
  }) => getDashboard(environmentId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!environmentId, ...queryOptions };
};

export type GetDashboardQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDashboard>>
>;
export type GetDashboardQueryError = AxiosError<unknown>;

export const useGetDashboard = <
  TData = Awaited<ReturnType<typeof getDashboard>>,
  TError = AxiosError<unknown>
>(
  environmentId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getDashboard>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDashboardQueryOptions(environmentId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * namespace param is required
 **Access policy**: authenticated users
 * @summary List jobs
 */
export const listJobs = (
  environmentId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.get(`/nomad/endpoints/${environmentId}/jobs`, options);

export const getListJobsQueryKey = (environmentId: number) =>
  [`/nomad/endpoints/${environmentId}/jobs`] as const;

export const getListJobsQueryOptions = <
  TData = Awaited<ReturnType<typeof listJobs>>,
  TError = AxiosError<unknown>
>(
  environmentId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listJobs>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof listJobs>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListJobsQueryKey(environmentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listJobs>>> = ({
    signal,
  }) => listJobs(environmentId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!environmentId, ...queryOptions };
};

export type ListJobsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listJobs>>
>;
export type ListJobsQueryError = AxiosError<unknown>;

export const useListJobs = <
  TData = Awaited<ReturnType<typeof listJobs>>,
  TError = AxiosError<unknown>
>(
  environmentId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listJobs>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListJobsQueryOptions(environmentId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Job ID and namespace params are required
 **Access policy**: administrator
 * @summary Delete a job
 */
export const deleteJob = (
  environmentId: number,
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.delete(`/nomad/endpoints/${environmentId}/jobs/${id}`, options);

export const getDeleteJobMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteJob>>,
    TError,
    { environmentId: number; id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteJob>>,
  TError,
  { environmentId: number; id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteJob>>,
    { environmentId: number; id: number }
  > = (props) => {
    const { environmentId, id } = props ?? {};

    return deleteJob(environmentId, id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteJobMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteJob>>
>;

export type DeleteJobMutationError = AxiosError<unknown>;

export const useDeleteJob = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteJob>>,
    TError,
    { environmentId: number; id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getDeleteJobMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * **Access policy**: authenticated users
 * @summary returns the address of the current leader in the region
 */
export const getLeader = (
  environmentId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.get(`/nomad/endpoints/${environmentId}/leader`, options);

export const getGetLeaderQueryKey = (environmentId: number) =>
  [`/nomad/endpoints/${environmentId}/leader`] as const;

export const getGetLeaderQueryOptions = <
  TData = Awaited<ReturnType<typeof getLeader>>,
  TError = AxiosError<unknown>
>(
  environmentId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLeader>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getLeader>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetLeaderQueryKey(environmentId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLeader>>> = ({
    signal,
  }) => getLeader(environmentId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!environmentId, ...queryOptions };
};

export type GetLeaderQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLeader>>
>;
export type GetLeaderQueryError = AxiosError<unknown>;

export const useGetLeader = <
  TData = Awaited<ReturnType<typeof getLeader>>,
  TError = AxiosError<unknown>
>(
  environmentId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getLeader>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLeaderQueryOptions(environmentId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
