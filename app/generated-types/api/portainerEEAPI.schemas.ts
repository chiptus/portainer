/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * PortainerEE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.
Examples are available at https://documentation.portainer.io/api/api-examples/
You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).

# Authentication

Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.
Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request
with the **Bearer** authentication mechanism.

Example:

```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE
```

# Security

Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).

Different access policies are available:

- Public access
- Authenticated access
- Restricted access
- Administrator access

### Public access

No authentication is required to access the environments(endpoints) with this access policy.

### Authenticated access

Authentication is required to access the environments(endpoints) with this access policy.

### Restricted access

Authentication is required to access the environments(endpoints) with this access policy.
Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.

### Administrator access

Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.

# Execute Docker requests

Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).

Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.

To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).

# Private Registry

Using private registry, you will need to pass a based64 encoded JSON string ‚Äò{"registryId":\<registryID value\>}‚Äô inside the Request Header. The parameter name is "X-Registry-Auth".
\<registryID value\> - The registry ID where the repository was created.

Example:

```
eyJyZWdpc3RyeUlkIjoxfQ==
```

**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).

 * OpenAPI spec version: 2.19.0
 */
export type GetWebsocketPodParams = {
  /**
   * environment(endpoint) ID of the environment(endpoint) where the resource is located
   */
  endpointId: number;
  /**
   * namespace where the container is located
   */
  namespace: string;
  /**
   * name of the pod containing the container
   */
  podName: string;
  /**
   * name of the container
   */
  containerName: string;
  /**
   * command to execute in the container
   */
  command: string;
  /**
   * JWT token used for authentication against this environment(endpoint)
   */
  token: string;
};

export type GetWebsocketKubernetesShellParams = {
  /**
   * environment(endpoint) ID of the environment(endpoint) where the resource is located
   */
  endpointId: number;
  /**
   * JWT token used for authentication against this environment(endpoint)
   */
  token: string;
};

export type GetWebsocketExecParams = {
  /**
   * environment(endpoint) ID of the environment(endpoint) where the resource is located
   */
  endpointId: number;
  /**
   * node name
   */
  nodeName?: string;
  /**
   * JWT token used for authentication against this environment(endpoint)
   */
  token: string;
};

export type GetWebsocketAttachParams = {
  /**
   * environment(endpoint) ID of the environment(endpoint) where the resource is located
   */
  endpointId: number;
  /**
   * node name
   */
  nodeName?: string;
  /**
   * JWT token used for authentication against this environment(endpoint)
   */
  token: string;
};

export type GetWebhooksParams = {
  EndpointID?: number;
  ResourceID?: string;
};

export type UserListParams = {
  /**
   * Identifier of the environment(endpoint) that will be used to filter the authorized users
   */
  environmentId?: number;
};

export type LogsCSVParams = {
  /**
   * Results before timestamp (unix)
   */
  before?: number;
  /**
   * Results after timestamp (unix)
   */
  after?: number;
  /**
   * Sort by this column
   */
  sortBy?: string;
  /**
   * Sort order, if true will return results by descending order
   */
  sortDesc?: boolean;
  /**
   * Limit results
   */
  limit?: number;
  /**
   * Query logs by this keyword
   */
  keyword?: string;
};

export type LogsListParams = {
  /**
   * Pagination offset
   */
  offset?: number;
  /**
   * Limit results
   */
  limit?: number;
  /**
   * Results before timestamp (unix)
   */
  before?: number;
  /**
   * Results after timestamp (unix)
   */
  after?: number;
  /**
   * Sort by this column
   */
  sortBy?: string;
  /**
   * Sort order, if true will return results by descending order
   */
  sortDesc?: boolean;
  /**
   * Query logs by this keyword
   */
  keyword?: string;
};

export type AuthLogsCSVParams = {
  /**
   * Results before timestamp (unix)
   */
  before?: number;
  /**
   * Results after timestamp (unix)
   */
  after?: number;
  /**
   * Sort by this column
   */
  sortBy?: string;
  /**
   * Sort order, if true will return results by descending order
   */
  sortDesc?: boolean;
  /**
   * Limit results
   */
  limit?: number;
  /**
   * Query logs by this keyword
   */
  keyword?: string;
};

export type AuthLogsListParams = {
  /**
   * Pagination offset
   */
  offset?: number;
  /**
   * Limit results
   */
  limit?: number;
  /**
   * Results before timestamp (unix)
   */
  before?: number;
  /**
   * Results after timestamp (unix)
   */
  after?: number;
  /**
   * Sort by this column
   */
  sortBy?: string;
  /**
   * Sort order, if true will return results by descending order
   */
  sortDesc?: boolean;
  /**
   * Query logs by this keyword
   */
  keyword?: string;
};

export type UploadTLSBody = {
  /** Folder where the TLS file will be stored. Will be created if not existing */
  folder: string;
  /** The file to upload */
  file: Blob;
};

export type HelmShowParams = {
  /**
   * Helm repository URL
   */
  repo: string;
  /**
   * Chart name
   */
  chart: string;
};

export type HelmRepoSearchParams = {
  /**
   * Helm repository URL
   */
  repo: string;
};

export type TeamListParams = {
  /**
   * Only list teams that the user is leader of
   */
  onlyLedTeams?: boolean;
  /**
   * Identifier of the environment(endpoint) that will be used to filter the authorized teams
   */
  environmentId?: number;
};

export type StackCreateDockerSwarmStringParams = {
  /**
   * Identifier of the environment that will be used to deploy the stack
   */
  endpointId: number;
};

export type StackCreateDockerSwarmRepositoryParams = {
  /**
   * Identifier of the environment that will be used to deploy the stack
   */
  endpointId: number;
};

export type StackCreateDockerSwarmFileBody = {
  /** Name of the stack */
  Name?: string;
  /** Swarm cluster identifier. */
  SwarmID?: string;
  /** Environment variables passed during deployment, represented as a JSON array [{'name': 'name', 'value': 'value'}]. Optional */
  Env?: string;
  /** Stack file */
  file?: Blob;
};

export type StackCreateDockerSwarmFileParams = {
  /**
   * Identifier of the environment that will be used to deploy the stack
   */
  endpointId: number;
};

export type StackCreateDockerStandaloneStringParams = {
  /**
   * Identifier of the environment that will be used to deploy the stack
   */
  endpointId: number;
};

export type StackCreateDockerStandaloneRepositoryParams = {
  /**
   * Identifier of the environment that will be used to deploy the stack
   */
  endpointId: number;
};

export type StackCreateDockerStandaloneFileBody = {
  /** Name of the stack */
  Name: string;
  /** Environment variables passed during deployment, represented as a JSON array [{'name': 'name', 'value': 'value'}]. */
  Env?: string;
  /** Stack file */
  file?: Blob;
};

export type StackCreateDockerStandaloneFileParams = {
  /**
   * Identifier of the environment that will be used to deploy the stack
   */
  endpointId: number;
};

export type StackCreateKubernetesUrlParams = {
  /**
   * Identifier of the environment that will be used to deploy the stack
   */
  endpointId: number;
};

export type StackCreateKubernetesFileParams = {
  /**
   * Identifier of the environment that will be used to deploy the stack
   */
  endpointId: number;
};

export type StackCreateKubernetesGitParams = {
  /**
   * Identifier of the environment that will be used to deploy the stack
   */
  endpointId: number;
};

export type StackMigrateParams = {
  /**
   * Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
   */
  endpointId?: number;
};

export type StackGitRedeployParams = {
  /**
   * Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
   */
  endpointId?: number;
};

export type StackUpdateGitParams = {
  /**
   * Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
   */
  endpointId?: number;
};

export type StackAssociateParams = {
  /**
   * Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
   */
  endpointId: number;
  /**
   * Swarm identifier
   */
  swarmId: number;
  /**
   * Indicates whether the stack is orphaned
   */
  orphanedRunning: boolean;
};

export type StackUpdateParams = {
  /**
   * Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
   */
  endpointId?: number;
};

export type StackDeleteParams = {
  /**
   * Set to true to delete an external stack. Only external Swarm stacks are supported
   */
  external?: boolean;
  /**
   * Environment(Endpoint) identifier used to remove an external stack (required when external is set to true)
   */
  endpointId?: number;
};

export type StackListParams = {
  /**
   * Filters to process on the stack list. Encoded as JSON (a map[string]string). For example, {'SwarmID': 'jpofkc0i9uo9wtx1zesuk649w'} will only return stacks that are part of the specified Swarm cluster. Available filters: EndpointID, SwarmID.
   */
  filters?: string;
};

export type GetKubernetesConfigParams = {
  /**
   * will include only these environments(endpoints)
   */
  ids?: number[];
  /**
   * will exclude these environments(endpoints)
   */
  excludeIds?: number[];
};

export type GetKubernetesApplicationParams = {
  /**
   * specify true to perform a rolling restart of the application
   */
  'rollout-restart': string;
};

export type GitOperationRepoRefsParams = {
  /**
   * list the results without using cache
   */
  force?: boolean;
};

export type GitOperationRepoFilesSearchParams = {
  /**
   * list the results without using cache
   */
  force?: boolean;
};

export type EndpointRegistriesListParams = {
  /**
   * required if kubernetes environment, will show registries by namespace
   */
  namespace?: string;
};

export type HelmDeleteParams = {
  /**
   * An optional namespace
   */
  namespace?: string;
};

export type HelmListParams = {
  /**
   * specify an optional namespace
   */
  namespace?: string;
  /**
   * specify an optional filter
   */
  filter?: string;
  /**
   * specify an optional selector
   */
  selector?: string;
};

export type PostEndpointsIdDockerV2BrowsePutBody = {
  /** The destination path to upload the file to */
  Path: string;
  /** The file to upload */
  file: Blob;
};

export type PostEndpointsIdDockerV2BrowsePutParams = {
  /**
   * Optional volume identifier to upload the file
   */
  volumeID?: string;
};

export type EndpointCreateBody = {
  /** Name that will be used to identify this environment(endpoint) (example: my-environment) */
  Name: string;
  /** Environment(Endpoint) type. Value must be one of: 1 (Local Docker environment), 2 (Agent environment), 3 (Azure environment), 4 (Edge agent environment) or 5 (Local Kubernetes Environment) */
  EndpointCreationType: number;
  /** URL or IP address of a Docker host (example: docker.mydomain.tld:2375). Defaults to local if not specified (Linux: /var/run/docker.sock, Windows: //./pipe/docker_engine). Cannot be empty if EndpointCreationType is set to 4 (Edge agent environment) */
  URL?: string;
  /** URL or IP address where exposed containers will be reachable. Defaults to URL if not specified (example: docker.mydomain.tld:2375) */
  PublicURL?: string;
  /** Environment(Endpoint) group identifier. If not specified will default to 1 (unassigned). */
  GroupID?: number;
  /** Require TLS to connect against this environment(endpoint). Must be true if EndpointCreationType is set to 2 (Agent environment) */
  TLS?: boolean;
  /** Skip server verification when using TLS. Must be true if EndpointCreationType is set to 2 (Agent environment) */
  TLSSkipVerify?: boolean;
  /** Skip client verification when using TLS. Must be true if EndpointCreationType is set to 2 (Agent environment) */
  TLSSkipClientVerify?: boolean;
  /** TLS CA certificate file */
  TLSCACertFile?: Blob;
  /** TLS client certificate file */
  TLSCertFile?: Blob;
  /** TLS client key file */
  TLSKeyFile?: Blob;
  /** Azure application ID. Required if environment(endpoint) type is set to 3 */
  AzureApplicationID?: string;
  /** Azure tenant ID. Required if environment(endpoint) type is set to 3 */
  AzureTenantID?: string;
  /** Azure authentication key. Required if environment(endpoint) type is set to 3 */
  AzureAuthenticationKey?: string;
  /** List of tag identifiers to which this environment(endpoint) is associated */
  TagIds?: number[];
  /** The check in interval for edge agent (in seconds) */
  EdgeCheckinInterval?: number;
  /** URL or IP address that will be used to establish a reverse tunnel */
  EdgeTunnelServerAddress: string;
  /** Enable async mode for edge agent */
  EdgeAsyncMode?: boolean;
  /** List of GPUs - json stringified array of {name, value} structs */
  Gpus?: string;
};

export type EndpointListParams = {
  /**
   * Start searching from
   */
  start?: number;
  /**
   * Limit results to this value
   */
  limit?: number;
  /**
   * Sort results by this value
   */
  sort?: number;
  /**
   * Order sorted results by desc/asc
   */
  order?: number;
  /**
   * Search query
   */
  search?: string;
  /**
   * List environments(endpoints) of these groups
   */
  groupIds?: number[];
  /**
   * List environments(endpoints) by this status
   */
  status?: number[];
  /**
   * List environments(endpoints) of this type
   */
  types?: number[];
  /**
   * search environments(endpoints) with these tags (depends on tagsPartialMatch)
   */
  tagIds?: number[];
  /**
   * If true, will return environment(endpoint) which has one of tagIds, if false (or missing) will return only environments(endpoints) that has all the tags
   */
  tagsPartialMatch?: boolean;
  /**
   * will return only these environments(endpoints)
   */
  endpointIds?: number[];
  /**
   * If true, will return environment(endpoint) that were provisioned
   */
  provisioned?: boolean;
  /**
   * will return only environments with on of these agent versions
   */
  agentVersions?: string[];
  /**
   * if exists true show only edge async agents, false show only standard edge agents. if missing, will show both types (relevant only for edge agents)
   */
  edgeAsync?: boolean;
  /**
   * if true, show only untrusted edge agents, if false show only trusted edge agents (relevant only for edge agents)
   */
  edgeDeviceUntrusted?: boolean;
  /**
   * if bigger then zero, show only edge agents that checked-in in the last provided seconds (relevant only for edge agents)
   */
  edgeCheckInPassedSeconds?: number;
  /**
   * will return only environments(endpoints) with this name
   */
  name?: string;
};

export type EdgeStackCreateStringParams = {
  /**
   * if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object
   */
  dryrun?: string;
};

export type EdgeStackCreateRepositoryMethod =
  typeof EdgeStackCreateRepositoryMethod[keyof typeof EdgeStackCreateRepositoryMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EdgeStackCreateRepositoryMethod = {
  file: 'file',
  string: 'string',
  repository: 'repository',
} as const;

export type EdgeStackCreateRepositoryParams = {
  /**
   * Creation Method
   */
  method: EdgeStackCreateRepositoryMethod;
  /**
   * if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object
   */
  dryrun?: string;
};

export type EdgeStackCreateFileBody = {
  /** Name of the stack */
  Name: string;
  /** Content of the Stack file */
  file: Blob;
  /** JSON stringified array of Edge Groups ids */
  EdgeGroups: string;
  /** deploy type 0 - 'compose', 1 - 'kubernetes', 2 - 'nomad' */
  DeploymentType: number;
  /** JSON stringified array of Registry ids to use for this stack */
  Registries?: string;
  /** Uses the manifest's namespaces instead of the default one, relevant only for kube environments */
  UseManifestNamespaces?: boolean;
  /** Pre Pull image */
  PrePullImage?: boolean;
  /** Retry deploy */
  RetryDeploy?: boolean;
};

export type EdgeStackCreateFileParams = {
  /**
   * if true, will not create an edge stack, but just will check the settings and return a non-persisted edge stack object
   */
  dryrun?: string;
};

export type EdgeStackLogsCollectParams = {
  /**
   * Number of lines to request for the logs
   */
  tail?: number;
};

export type EdgeJobCreateFileBody = {
  /** Content of the Stack file */
  file: Blob;
  /** Name of the stack */
  Name: string;
  /** A cron expression to schedule this job */
  CronExpression: string;
  /** JSON stringified array of Edge Groups ids */
  EdgeGroups: string;
  /** JSON stringified array of Environment ids */
  Endpoints: string;
  /** If recurring */
  Recurring?: boolean;
};

export type SnapshotContainersListParams = {
  /**
   * Edge stack identifier, will return only containers for this edge stack
   */
  edgeStackId?: number;
};

/**
 * Type of created stack (1 - swarm, 2 - compose)
 */
export type CustomTemplateCreateFileBodyType =
  typeof CustomTemplateCreateFileBodyType[keyof typeof CustomTemplateCreateFileBodyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomTemplateCreateFileBodyType = {
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

/**
 * Platform associated to the template (1 - 'linux', 2 - 'windows')
 */
export type CustomTemplateCreateFileBodyPlatform =
  typeof CustomTemplateCreateFileBodyPlatform[keyof typeof CustomTemplateCreateFileBodyPlatform];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomTemplateCreateFileBodyPlatform = {
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export type CustomTemplateCreateFileBody = {
  /** Title of the template */
  Title?: string;
  /** Description of the template */
  Description?: string;
  /** A note that will be displayed in the UI. Supports HTML content */
  Note?: string;
  /** Platform associated to the template (1 - 'linux', 2 - 'windows') */
  Platform?: CustomTemplateCreateFileBodyPlatform;
  /** Type of created stack (1 - swarm, 2 - compose) */
  Type?: CustomTemplateCreateFileBodyType;
  /** File */
  file?: Blob;
};

export type CustomTemplateListTypeItem =
  typeof CustomTemplateListTypeItem[keyof typeof CustomTemplateListTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomTemplateListTypeItem = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

export type CustomTemplateListParams = {
  /**
   * Template types
   */
  type: CustomTemplateListTypeItem[];
};

export type UpdateBody = {
  /** cloud provider such as aws, aks, civo, digitalocean, etc. */
  provider: string;
  /** name of the credentials such as rnd-test-credential */
  name: string;
  /** credentials in json format */
  credentials: string;
};

export type _DeleteParams = {
  /**
   * ID of the cloud credential
   */
  id: string;
};

export type GetByIDParams = {
  /**
   * ID of the cloud credential
   */
  id: string;
};

export type Microk8sAddonsParams = {
  /**
   * The environment ID of the cluster within Portainer.
   */
  environmentID: number;
  /**
   * The credential ID to use to connect to a node in the MicroK8s cluster.
   */
  credentialID: number;
};

export type KaasProviderInfoParams = {
  /**
   * If true, get the up-to-date information (instead of cached information).
   */
  force?: boolean;
  /**
   * The shared credential ID used to fetch the cloud provider information.
   */
  credentialId: number;
};

export interface WebhooksWebhookUpdatePayload {
  registryID?: number;
}

export interface WebhooksWebhookReassignPayload {
  resourceID?: string;
  webhookType?: PortainereeWebhookType;
}

export interface WebhooksWebhookCreatePayload {
  endpointID?: number;
  registryID?: number;
  resourceID?: string;
  webhookType?: number;
}

/**
 * User role (1 for administrator account and 2 for regular account)
 */
export type UsersUserUpdatePayloadRole =
  typeof UsersUserUpdatePayloadRole[keyof typeof UsersUserUpdatePayloadRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersUserUpdatePayloadRole = {
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface UsersUserUpdatePayload {
  password: string;
  /** User role (1 for administrator account and 2 for regular account) */
  role: UsersUserUpdatePayloadRole;
  theme?: UsersThemePayload;
  username: string;
}

export interface UsersUserUpdatePasswordPayload {
  /** New Password */
  newPassword: string;
  /** Current Password */
  password: string;
}

export interface UsersUserUpdateOpenAIConfigPayload {
  /** ApiKey is the OpenAI API key that will be used to interact with the OpenAI API. */
  apiKey: string;
}

export interface UsersUserGitCredentialCreatePayload {
  name: string;
  password: string;
  username: string;
}

/**
 * User role (1 for administrator account and 2 for regular account)
 */
export type UsersUserCreatePayloadRole =
  typeof UsersUserCreatePayloadRole[keyof typeof UsersUserCreatePayloadRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersUserCreatePayloadRole = {
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface UsersUserCreatePayload {
  password: string;
  /** User role (1 for administrator account and 2 for regular account) */
  role: UsersUserCreatePayloadRole;
  username: string;
}

export interface UsersUserAccessTokenCreatePayload {
  description: string;
}

/**
 * Color represents the color theme of the UI
 */
export type UsersThemePayloadColor =
  typeof UsersThemePayloadColor[keyof typeof UsersThemePayloadColor];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersThemePayloadColor = {
  dark: 'dark',
  light: 'light',
  highcontrast: 'highcontrast',
  auto: 'auto',
} as const;

export interface UsersThemePayload {
  /** Color represents the color theme of the UI */
  color?: UsersThemePayloadColor;
  /** SubtleUpgradeButton indicates if the upgrade banner should be displayed in a subtle way */
  subtleUpgradeButton?: boolean;
}

export interface UsersNamespaceMapping {
  [key: string]: { [key: string]: PortainereeAuthorizations };
}

export interface UsersGitCredentialResponse {
  gitCredential?: PortainereeGitCredential;
}

export interface UsersAdminInitPayload {
  /** Password for the admin user */
  password: string;
  /** Username for the admin user */
  username: string;
}

export interface UsersAccessTokenResponse {
  apiKey?: PortainereeAPIKey;
  rawAPIKey?: string;
}

export interface UseractivityLogsListResponse {
  logs?: PortainereeUserActivityLog[];
  totalCount?: number;
}

export type TypesUpdateScheduleType =
  typeof TypesUpdateScheduleType[keyof typeof TypesUpdateScheduleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TypesUpdateScheduleType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export type TypesUpdateScheduleStatusType =
  typeof TypesUpdateScheduleStatusType[keyof typeof TypesUpdateScheduleStatusType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TypesUpdateScheduleStatusType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

/**
 * Type of the update (1 - update, 2 - rollback)
 */
export type TypesUpdateScheduleTypeProperty =
  typeof TypesUpdateScheduleTypeProperty[keyof typeof TypesUpdateScheduleTypeProperty];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TypesUpdateScheduleTypeProperty = {
  NUMBER_1: '1',
  NUMBER_2: '2',
} as const;

export type TypesUpdateScheduleEnvironmentsPreviousVersions = {
  [key: string]: string;
};

export interface TypesUpdateSchedule {
  /** Created timestamp */
  created?: number;
  /** Created by user id */
  createdBy?: number;
  edgeStackId?: number;
  environmentsPreviousVersions?: TypesUpdateScheduleEnvironmentsPreviousVersions;
  /** EdgeUpdateSchedule Identifier */
  id?: number;
  /** Name of the schedule */
  name?: string;
  /** ID of registry */
  registryId?: number;
  /** Type of the update (1 - update, 2 - rollback) */
  type?: TypesUpdateScheduleTypeProperty;
  version?: string;
}

export type TypesSummaryNetworkSettingsNetworks = {
  [key: string]: NetworkEndpointSettings;
};

export interface TypesSummaryNetworkSettings {
  networks?: TypesSummaryNetworkSettingsNetworks;
}

export interface TypesServiceUpdateResponse {
  /** Optional warning messages */
  Warnings?: string[];
}

export interface TypesPort {
  /** Host IP address that the container's port is mapped to */
  IP?: string;
  /** Port on the container
Required: true */
  PrivatePort?: number;
  /** Port exposed on the host */
  PublicPort?: number;
  /** type
Required: true */
  Type?: string;
}

export interface TypesMountPoint {
  destination?: string;
  driver?: string;
  mode?: string;
  name?: string;
  propagation?: MountPropagation;
  rw?: boolean;
  source?: string;
  type?: MountType;
}

export interface TypesEndpointUpdateScheduleRelation {
  edgeStackId?: number;
  environmentId?: number;
  scheduleId?: number;
  targetVersion?: string;
}

export type TimeDuration = typeof TimeDuration[keyof typeof TimeDuration];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TimeDuration = {
  NUMBER_MINUS_9223372036854776000: -9223372036854776000,
  NUMBER_9223372036854776000: 9223372036854776000,
  NUMBER_1: 1,
  NUMBER_1000: 1000,
  NUMBER_1000000: 1000000,
  NUMBER_1000000000: 1000000000,
  NUMBER_60000000000: 60000000000,
  NUMBER_3600000000000: 3600000000000,
} as const;

export interface TemplatesListResponse {
  templates?: PortainereeTemplate[];
  version?: string;
}

export interface TemplatesFileResponse {
  /** The requested file content */
  fileContent?: string;
}

export interface TemplatesFilePayload {
  /** Path to the file inside the git repository */
  composeFilePathInRepository: string;
  /** URL of a git repository where the file is stored */
  repositoryURL: string;
}

export interface TeamsTeamUpdatePayload {
  /** Name */
  name?: string;
}

export interface TeamsTeamCreatePayload {
  /** Name */
  name: string;
  /** TeamLeaders */
  teamLeaders?: number[];
}

/**
 * Role for the user inside the team (1 for leader and 2 for regular member)
 */
export type TeammembershipsTeamMembershipUpdatePayloadRole =
  typeof TeammembershipsTeamMembershipUpdatePayloadRole[keyof typeof TeammembershipsTeamMembershipUpdatePayloadRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TeammembershipsTeamMembershipUpdatePayloadRole = {
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface TeammembershipsTeamMembershipUpdatePayload {
  /** Role for the user inside the team (1 for leader and 2 for regular member) */
  role: TeammembershipsTeamMembershipUpdatePayloadRole;
  /** Team identifier */
  teamID: number;
  /** User identifier */
  userID: number;
}

/**
 * Role for the user inside the team (1 for leader and 2 for regular member)
 */
export type TeammembershipsTeamMembershipCreatePayloadRole =
  typeof TeammembershipsTeamMembershipCreatePayloadRole[keyof typeof TeammembershipsTeamMembershipCreatePayloadRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TeammembershipsTeamMembershipCreatePayloadRole = {
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface TeammembershipsTeamMembershipCreatePayload {
  /** Role for the user inside the team (1 for leader and 2 for regular member) */
  role: TeammembershipsTeamMembershipCreatePayloadRole;
  /** Team identifier */
  teamID: number;
  /** User identifier */
  userID: number;
}

export interface TagsTagCreatePayload {
  name: string;
}

export interface StacksUpdateSwarmStackPayload {
  /** A list of environment(endpoint) variables used during stack deployment */
  env?: PortainereePair[];
  /** Prune services that are no longer referenced (only available for Swarm stacks) */
  prune?: boolean;
  /** Force a pulling to current image with the original tag though the image is already the latest */
  pullImage?: boolean;
  /** New content of the Stack file */
  stackFileContent?: string;
  /** A UUID to identify a webhook. The stack will be force updated and pull the latest image when the webhook was invoked. */
  webhook?: string;
}

export interface StacksSwarmStackFromGitRepositoryPayload {
  /** Applicable when deploying with multiple stack files */
  additionalFiles?: string[];
  /** Optional auto update configuration */
  autoUpdate?: PortainereeAutoUpdateSettings;
  /** Path to the Stack file inside the Git repository */
  composeFile?: string;
  /** A list of environment variables used during stack deployment */
  env?: PortainereePair[];
  /** Network filesystem path */
  filesystemPath?: string;
  /** Whether the stack is from a app template */
  fromAppTemplate?: boolean;
  /** Name of the stack */
  name: string;
  /** Use basic authentication to clone the Git repository */
  repositoryAuthentication?: boolean;
  /** GitCredentialID used to identify the bound git credential. Required when RepositoryAuthentication
is true and RepositoryUsername/RepositoryPassword are not provided */
  repositoryGitCredentialID?: number;
  /** Password used in basic authentication. Required when RepositoryAuthentication is true
and RepositoryGitCredentialID is 0 */
  repositoryPassword?: string;
  /** Reference name of a Git repository hosting the Stack file */
  repositoryReferenceName?: string;
  /** URL of a Git repository hosting the Stack file */
  repositoryURL: string;
  /** Username used in basic authentication. Required when RepositoryAuthentication is true
and RepositoryGitCredentialID is 0 */
  repositoryUsername?: string;
  /** Whether the stack suppors relative path volume */
  supportRelativePath?: boolean;
  /** Swarm cluster identifier */
  swarmID: string;
  /** TLSSkipVerify skips SSL verification when cloning the Git repository */
  tlsskipVerify?: boolean;
}

export interface StacksSwarmStackFromFileContentPayload {
  /** A list of environment variables used during stack deployment */
  env?: PortainereePair[];
  /** Whether the stack is from a app template */
  fromAppTemplate?: boolean;
  /** Name of the stack */
  name: string;
  /** Content of the Stack file */
  stackFileContent: string;
  /** Swarm cluster identifier */
  swarmID: string;
  /** A UUID to identify a webhook. The stack will be force updated and pull the latest image when the webhook was invoked. */
  webhook?: string;
}

export interface StacksStackMigratePayload {
  endpointID: number;
  name?: string;
  swarmID?: string;
}

export interface StacksStackGitUpdatePayload {
  autoUpdate?: PortainereeAutoUpdateSettings;
  env?: PortainereePair[];
  prune?: boolean;
  repositoryAuthentication?: boolean;
  repositoryGitCredentialID?: number;
  repositoryPassword?: string;
  repositoryReferenceName?: string;
  repositoryUsername?: string;
  tlsskipVerify?: boolean;
}

export interface StacksStackGitRedployPayload {
  env?: PortainereePair[];
  prune?: boolean;
  /** Force a pulling to current image with the original tag though the image is already the latest */
  pullImage?: boolean;
  repositoryAuthentication?: boolean;
  repositoryGitCredentialID?: number;
  repositoryPassword?: string;
  repositoryReferenceName?: string;
  repositoryUsername?: string;
}

export interface StacksStackFileResponse {
  /** Content of the Stack file */
  StackFileContent?: string;
}

export interface StacksKubernetesStringDeploymentPayload {
  composeFormat?: boolean;
  /** Whether the stack is from a app template */
  fromAppTemplate?: boolean;
  namespace?: string;
  stackFileContent?: string;
  stackName?: string;
}

export interface StacksKubernetesManifestURLDeploymentPayload {
  composeFormat?: boolean;
  manifestURL?: string;
  namespace?: string;
  stackName?: string;
}

export interface StacksKubernetesGitDeploymentPayload {
  additionalFiles?: string[];
  autoUpdate?: PortainereeAutoUpdateSettings;
  composeFormat?: boolean;
  manifestFile?: string;
  namespace?: string;
  repositoryAuthentication?: boolean;
  repositoryGitCredentialID?: number;
  repositoryPassword?: string;
  repositoryReferenceName?: string;
  repositoryURL?: string;
  repositoryUsername?: string;
  stackName?: string;
  /** TLSSkipVerify skips SSL verification when cloning the Git repository */
  tlsskipVerify?: boolean;
}

export interface StacksComposeStackFromGitRepositoryPayload {
  /** Applicable when deploying with multiple stack files */
  additionalFiles?: string[];
  /** Optional auto update configuration */
  autoUpdate?: PortainereeAutoUpdateSettings;
  /** Path to the Stack file inside the Git repository */
  composeFile?: string;
  /** A list of environment variables used during stack deployment */
  env?: PortainereePair[];
  /** Local filesystem path */
  filesystemPath?: string;
  /** Whether the stack is from a app template */
  fromAppTemplate?: boolean;
  /** Name of the stack */
  name: string;
  /** Use basic authentication to clone the Git repository */
  repositoryAuthentication?: boolean;
  /** GitCredentialID used to identify the bound git credential. Required when RepositoryAuthentication
is true and RepositoryUsername/RepositoryPassword are not provided */
  repositoryGitCredentialID?: number;
  /** Password used in basic authentication. Required when RepositoryAuthentication is true
and RepositoryGitCredentialID is 0 */
  repositoryPassword?: string;
  /** Reference name of a Git repository hosting the Stack file */
  repositoryReferenceName?: string;
  /** URL of a Git repository hosting the Stack file */
  repositoryURL: string;
  /** Username used in basic authentication. Required when RepositoryAuthentication is true
and RepositoryGitCredentialID is 0 */
  repositoryUsername?: string;
  /** Whether the stack supports relative path volume */
  supportRelativePath?: boolean;
  /** TLSSkipVerify skips SSL verification when cloning the Git repository */
  tlsskipVerify?: boolean;
}

export interface StacksComposeStackFromFileContentPayload {
  /** A list of environment variables used during stack deployment */
  env?: PortainereePair[];
  /** Whether the stack is from a app template */
  fromAppTemplate?: boolean;
  /** Name of the stack */
  name: string;
  /** Content of the Stack file */
  stackFileContent: string;
  /** A UUID to identify a webhook. The stack will be force updated and pull the latest image when the webhook was invoked. */
  webhook?: string;
}

export interface SslSslUpdatePayload {
  /** SSL Certficates */
  cert?: string;
  /** SSL Client Certificates */
  clientCert?: string;
  httpenabled?: boolean;
  key?: string;
}

export type SettingsSettingsUpdatePayloadEdge = {
  /** The command list interval for edge agent - used in edge async mode (in seconds) */
  CommandInterval?: number;
  /** The ping interval for edge agent - used in edge async mode (in seconds) */
  PingInterval?: number;
  /** The snapshot interval for edge agent - used in edge async mode (in seconds) */
  SnapshotInterval?: number;
  /** AsyncMode enables edge agent to run in async mode by default */
  asyncMode?: boolean;
  mtls?: SettingsMTLSPayload;
  /** The address where the tunneling server can be reached by Edge agents */
  tunnelServerAddress?: string;
};

export interface SettingsSettingsUpdatePayload {
  /** EdgePortainerURL is the URL that is exposed to edge agents */
  EdgePortainerURL?: string;
  /** Show the Kompose build option (discontinued in 2.18) */
  ShowKomposeBuildOption?: boolean;
  /** Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth */
  authenticationMethod?: number;
  /** A list of label name & value that will be used to hide containers when querying containers */
  blackListedLabels?: PortainereePair[];
  /** The content in plaintext used to display in the login page. Will hide when value is empty string */
  customLoginBanner?: string;
  edge?: SettingsSettingsUpdatePayloadEdge;
  /** The default check in interval for edge agent (in seconds) */
  edgeAgentCheckinInterval?: number;
  /** Whether edge compute features are enabled */
  enableEdgeComputeFeatures?: boolean;
  /** Whether telemetry is enabled */
  enableTelemetry?: boolean;
  /** EnforceEdgeID makes Portainer store the Edge ID instead of accepting anyone */
  enforceEdgeID?: boolean;
  /** Deployment options for encouraging deployment as code */
  globalDeploymentOptions?: PortainereeGlobalDeploymentOptions;
  /** Helm repository URL */
  helmRepositoryURL?: string;
  internalAuthSettings?: PortainereeInternalAuthSettings;
  /** The expiry of a Kubeconfig */
  kubeconfigExpiry?: string;
  /** Kubec	tl Shell Image Name/Tag */
  kubectlShellImage?: string;
  ldapsettings?: PortainereeLDAPSettings;
  /** URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string */
  logoURL?: string;
  oauthSettings?: PortainereeOAuthSettings;
  /** The interval in which environment(endpoint) snapshots are created */
  snapshotInterval?: string;
  /** URL to the templates that will be displayed in the UI when navigating to App Templates */
  templatesURL?: string;
  /** TrustOnFirstConnect makes Portainer accepting edge agent connection by default */
  trustOnFirstConnect?: boolean;
  /** The duration of a user session */
  userSessionTimeout?: string;
}

export interface SettingsSettingsExperimentalUpdatePayload {
  /** OpenAI integration */
  openAIIntegration: boolean;
}

export interface SettingsSettingsExperimentalInspectResponse {
  experimentalFeatures?: PortainereeExperimentalFeatures;
}

export type SettingsPublicSettingsResponseEdge = {
  /** The command list interval for edge agent - used in edge async mode [seconds] */
  CommandInterval?: number;
  /** The ping interval for edge agent - used in edge async mode [seconds] */
  PingInterval?: number;
  /** The snapshot interval for edge agent - used in edge async mode [seconds] */
  SnapshotInterval?: number;
  /** The check in interval for edge agent (in seconds) - used in non async mode [seconds] */
  checkinInterval?: number;
  mtls?: PortainereeMTLSSettings;
};

export type SettingsPublicSettingsResponseDefaultRegistry = {
  Hide?: boolean;
};

/**
 * Supported feature flags
 */
export type SettingsPublicSettingsResponseFeatures = { [key: string]: boolean };

export interface SettingsPublicSettingsResponse {
  /** Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth */
  AuthenticationMethod?: PortainereeAuthenticationMethod;
  /** The content in plaintext used to display in the login page. Will hide when value is empty string */
  CustomLoginBanner?: string;
  /** Whether edge compute features are enabled */
  EnableEdgeComputeFeatures?: boolean;
  /** Whether telemetry is enabled */
  EnableTelemetry?: boolean;
  /** Supported feature flags */
  Features?: SettingsPublicSettingsResponseFeatures;
  /** Deployment options for encouraging deployment as code */
  GlobalDeploymentOptions?: PortainereeGlobalDeploymentOptions;
  /** URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string */
  LogoURL?: string;
  /** Whether portainer internal auth view will be hidden */
  OAuthHideInternalAuth?: boolean;
  /** The URL used for oauth login */
  OAuthLoginURI?: string;
  /** The URL used for oauth logout */
  OAuthLogoutURI?: string;
  /** The minimum required length for a password of any user when using internal auth mode */
  RequiredPasswordLength?: number;
  /** Show the Kompose build option (discontinued in 2.18) */
  ShowKomposeBuildOption?: boolean;
  /** Whether team sync is enabled */
  TeamSync?: boolean;
  defaultRegistry?: SettingsPublicSettingsResponseDefaultRegistry;
  edge?: SettingsPublicSettingsResponseEdge;
  /** Whether AMT is enabled */
  isAMTEnabled?: boolean;
  /** Whether FDO is enabled */
  isFDOEnabled?: boolean;
  /** The expiry of a Kubeconfig */
  kubeconfigExpiry?: string;
}

export interface SettingsMTLSPayload {
  caCert?: string;
  cert?: string;
  key?: string;
  useSeparateCert?: boolean;
}

export interface SettingsDefaultRegistryUpdatePayload {
  Hide?: boolean;
}

export interface ResourcecontrolsResourceControlUpdatePayload {
  /** Permit access to resource only to admins */
  administratorsOnly?: boolean;
  /** Permit access to the associated resource to any user */
  public?: boolean;
  /** List of team identifiers with access to the associated resource */
  teams?: number[];
  /** List of user identifiers with access to the associated resource */
  users?: number[];
}

/**
 * Type of Resource. Valid values are: 1 - container, 2 - service
3 - volume, 4 - network, 5 - secret, 6 - stack, 7 - config, 8 - custom template, 9 - azure-container-group
 */
export type ResourcecontrolsResourceControlCreatePayloadType =
  typeof ResourcecontrolsResourceControlCreatePayloadType[keyof typeof ResourcecontrolsResourceControlCreatePayloadType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResourcecontrolsResourceControlCreatePayloadType = {
  NUMBER_1: '1',
  NUMBER_2: '2',
  NUMBER_3: '3',
  NUMBER_4: '4',
  NUMBER_5: '5',
  NUMBER_6: '6',
  NUMBER_7: '7',
  NUMBER_8: '8',
  NUMBER_9: '9',
} as const;

export interface ResourcecontrolsResourceControlCreatePayload {
  /** Permit access to resource only to admins */
  administratorsOnly?: boolean;
  /** Permit access to the associated resource to any user */
  public?: boolean;
  resourceID: string;
  /** List of Docker resources that will inherit this access control */
  subResourceIDs?: string[];
  /** List of team identifiers with access to the associated resource */
  teams?: number[];
  /** Type of Resource. Valid values are: 1 - container, 2 - service
3 - volume, 4 - network, 5 - secret, 6 - stack, 7 - config, 8 - custom template, 9 - azure-container-group */
  type: ResourcecontrolsResourceControlCreatePayloadType;
  /** List of user identifiers with access to the associated resource */
  users?: number[];
}

export interface ReleaseReleaseElement {
  app_version?: string;
  chart?: string;
  name?: string;
  namespace?: string;
  revision?: string;
  status?: string;
  updated?: string;
}

/**
 * Config is the set of extra Values added to the chart.
These values override the default values inside of the chart.
 */
export type ReleaseReleaseConfig = { [key: string]: any };

/**
 * Annotations are additional mappings uninterpreted by Helm,
made available for inspection by other applications.
 */
export type ReleaseMetadataAnnotations = { [key: string]: string };

export interface ReleaseMaintainer {
  /** Email is an optional email address to contact the named maintainer */
  email?: string;
  /** Name is a user name or organization name */
  name?: string;
  /** URL is an optional URL to an address for the named maintainer */
  url?: string;
}

export interface ReleaseMetadata {
  /** Annotations are additional mappings uninterpreted by Helm,
made available for inspection by other applications. */
  annotations?: ReleaseMetadataAnnotations;
  /** The API Version of this chart. Required. */
  apiVersion?: string;
  /** The version of the application enclosed inside of this chart. */
  appVersion?: string;
  /** The condition to check to enable chart */
  condition?: string;
  /** Dependencies are a list of dependencies for a chart. */
  dependencies?: ReleaseDependency[];
  /** Whether or not this chart is deprecated */
  deprecated?: boolean;
  /** A one-sentence description of the chart */
  description?: string;
  /** The URL to a relevant project page, git repo, or contact person */
  home?: string;
  /** The URL to an icon file. */
  icon?: string;
  /** A list of string keywords */
  keywords?: string[];
  /** KubeVersion is a SemVer constraint specifying the version of Kubernetes required. */
  kubeVersion?: string;
  /** A list of name and URL/email address combinations for the maintainer(s) */
  maintainers?: ReleaseMaintainer[];
  /** The name of the chart. Required. */
  name?: string;
  /** Source is the URL to the source code of this chart */
  sources?: string[];
  /** The tags to check to enable chart */
  tags?: string;
  /** Specifies the chart type: application or library */
  type?: string;
  /** A SemVer 2 conformant version string of the chart. Required. */
  version?: string;
}

export interface ReleaseLock {
  /** Dependencies is the list of dependencies that this lock file has locked. */
  dependencies?: ReleaseDependency[];
  /** Digest is a hash of the dependencies in Chart.yaml. */
  digest?: string;
  /** Generated is the date the lock file was last generated. */
  generated?: string;
}

export interface ReleaseHookExecution {
  /** CompletedAt indicates the date/time this hook was completed. */
  completed_at?: string;
  /** Phase indicates whether the hook completed successfully */
  phase?: string;
  /** StartedAt indicates the date/time this hook was started */
  started_at?: string;
}

export interface ReleaseHook {
  /** DeletePolicies are the policies that indicate when to delete the hook */
  delete_policies?: string[];
  /** Events are the events that this hook fires on. */
  events?: string[];
  /** Kind is the Kubernetes kind. */
  kind?: string;
  /** LastRun indicates the date/time this was last run. */
  last_run?: ReleaseHookExecution;
  /** Manifest is the manifest contents. */
  manifest?: string;
  name?: string;
  /** Path is the chart-relative path to the template. */
  path?: string;
  /** Weight indicates the sort order for execution among similar Hook type */
  weight?: number;
}

export interface ReleaseRelease {
  /** Info provides information about a release
Info *Info `json:"info,omitempty"`
Chart is the chart that was released. */
  chart?: ReleaseChart;
  /** Config is the set of extra Values added to the chart.
These values override the default values inside of the chart. */
  config?: ReleaseReleaseConfig;
  /** Hooks are all of the hooks declared for this release. */
  hooks?: ReleaseHook[];
  /** Manifest is the string representation of the rendered template. */
  manifest?: string;
  /** Name is the name of the release */
  name?: string;
  /** Namespace is the kubernetes namespace of the release. */
  namespace?: string;
  /** Version is an int which represents the revision of the release. */
  version?: number;
}

export interface ReleaseFile {
  /** Data is the template as byte data. */
  data?: number[];
  /** Name is the path-like name of the template. */
  name?: string;
}

export interface ReleaseDependency {
  /** Alias usable alias to be used for the chart */
  alias?: string;
  /** A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled ) */
  condition?: string;
  /** Enabled bool determines if chart should be loaded */
  enabled?: boolean;
  /** ImportValues holds the mapping of source values to parent key to be imported. Each item can be a
string or pair of child/parent sublist items. */
  'import-values'?: unknown[];
  /** Name is the name of the dependency.

This must mach the name in the dependency's Chart.yaml. */
  name?: string;
  /** The URL to the repository.

Appending `index.yaml` to this string should result in a URL that can be
used to fetch the repository index. */
  repository?: string;
  /** Tags can be used to group charts for enabling/disabling together */
  tags?: string[];
  /** Version is the version (range) of this chart.

A lock file will always produce a single version, while a dependency
may contain a semantic version range. */
  version?: string;
}

/**
 * Values are default config for this chart.
 */
export type ReleaseChartValues = { [key: string]: any };

export interface ReleaseChart {
  /** Files are miscellaneous files in a chart archive,
e.g. README, LICENSE, etc. */
  files?: ReleaseFile[];
  /** Lock is the contents of Chart.lock. */
  lock?: ReleaseLock;
  /** Metadata is the contents of the Chartfile. */
  metadata?: ReleaseMetadata;
  /** Schema is an optional JSON schema for imposing structure on Values */
  schema?: number[];
  /** Templates for this chart. */
  templates?: ReleaseFile[];
  /** Values are default config for this chart. */
  values?: ReleaseChartValues;
}

export interface RegistriesRegistryUpdatePayload {
  authentication: boolean;
  baseURL?: string;
  ecr?: PortainereeEcrData;
  github?: PortainereeGithubRegistryData;
  name: string;
  password?: string;
  quay?: PortainereeQuayRegistryData;
  registryAccesses?: PortainereeRegistryAccesses;
  url: string;
  username?: string;
}

/**
 * Registry Type. Valid values are:
	1 (Quay.io),
	2 (Azure container registry),
	3 (custom registry),
	4 (Gitlab registry),
	5 (ProGet registry),
	6 (DockerHub)
	7 (ECR)
	8 (Github registry)
 */
export type RegistriesRegistryCreatePayloadType =
  typeof RegistriesRegistryCreatePayloadType[keyof typeof RegistriesRegistryCreatePayloadType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegistriesRegistryCreatePayloadType = {
  NUMBER_1: '1',
  NUMBER_2: '2',
  NUMBER_3: '3',
  NUMBER_4: '4',
  NUMBER_5: '5',
  NUMBER_6: '6',
  NUMBER_7: '7',
  NUMBER_8: '8',
} as const;

export interface RegistriesRegistryCreatePayload {
  /** Is authentication against this registry enabled */
  authentication: boolean;
  /** BaseURL required for ProGet registry */
  baseURL?: string;
  /** ECR specific details, required when type = 7 */
  ecr?: PortainereeEcrData;
  /** Github specific details, required when type = 8 */
  github?: PortainereeGithubRegistryData;
  /** Gitlab specific details, required when type = 4 */
  gitlab?: PortainereeGitlabRegistryData;
  /** Name that will be used to identify this registry */
  name: string;
  /** Password used to authenticate against this registry. required when Authentication is true */
  password?: string;
  /** Quay specific details, required when type = 1 */
  quay?: PortainereeQuayRegistryData;
  /** Registry Type. Valid values are:
	1 (Quay.io),
	2 (Azure container registry),
	3 (custom registry),
	4 (Gitlab registry),
	5 (ProGet registry),
	6 (DockerHub)
	7 (ECR)
	8 (Github registry) */
  type: RegistriesRegistryCreatePayloadType;
  /** URL or IP address of the Docker registry */
  url: string;
  /** Username used to authenticate against this registry. Required when Authentication is true */
  username?: string;
}

export interface RegistriesRegistryConfigurePayload {
  /** Is authentication against this registry enabled */
  authentication: boolean;
  /** Password used to authenticate against this registry. required when Authentication is true */
  password?: string;
  /** ECR region */
  region?: string;
  /** Use TLS */
  tls?: boolean;
  /** The TLS CA certificate file */
  tlscacertFile?: number[];
  /** The TLS client certificate file */
  tlscertFile?: number[];
  /** The TLS client key file */
  tlskeyFile?: number[];
  /** Skip the verification of the server TLS certificate */
  tlsskipVerify?: boolean;
  /** Username used to authenticate against this registry. Required when Authentication is true */
  username?: string;
}

export interface RegistriesDeleteTagsPayload {
  tags?: string[];
}

export type PortainereeWebhookType =
  typeof PortainereeWebhookType[keyof typeof PortainereeWebhookType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeWebhookType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface PortainereeWebhook {
  EndpointId?: number;
  /** Webhook Identifier */
  Id?: number;
  RegistryId?: number;
  ResourceId?: string;
  Token?: string;
  Type?: PortainereeWebhookType;
}

/**
 * Color represents the color theme of the UI
 */
export type PortainereeUserThemeSettingsColor =
  typeof PortainereeUserThemeSettingsColor[keyof typeof PortainereeUserThemeSettingsColor];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeUserThemeSettingsColor = {
  dark: 'dark',
  light: 'light',
  highcontrast: 'highcontrast',
  auto: 'auto',
} as const;

export interface PortainereeUserThemeSettings {
  /** Color represents the color theme of the UI */
  color?: PortainereeUserThemeSettingsColor;
  /** SubtleUpgradeButton indicates if the upgrade banner should be displayed in a subtle way */
  subtleUpgradeButton?: boolean;
}

export type PortainereeUserRole =
  typeof PortainereeUserRole[keyof typeof PortainereeUserRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeUserRole = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface PortainereeUserResourceAccess {
  AccessLevel?: PortainereeResourceAccessLevel;
  UserId?: number;
}

export interface PortainereeUserActivityLog {
  action?: string;
  context?: string;
  id?: number;
  payload?: number[];
  timestamp?: number;
  username?: string;
}

export interface PortainereeUserAccessPolicies {
  [key: string]: PortainereeAccessPolicy;
}

export interface PortainereeUser {
  EndpointAuthorizations?: PortainereeEndpointAuthorizations;
  /** User Identifier */
  Id?: number;
  /** OpenAI integration parameters */
  OpenAIApiKey?: string;
  PortainerAuthorizations?: PortainereeAuthorizations;
  /** User role (1 for administrator account and 2 for regular account) */
  Role?: PortainereeUserRole;
  TokenIssueAt?: number;
  Username?: string;
  themeSettings?: PortainereeUserThemeSettings;
  /** Deprecated */
  userTheme?: string;
}

export interface PortainereeTemplateVolume {
  /** Path on the host */
  bind?: string;
  /** Path inside the container */
  container?: string;
  /** Whether the volume used should be readonly */
  readonly?: boolean;
}

export type PortainereeTemplateType =
  typeof PortainereeTemplateType[keyof typeof PortainereeTemplateType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeTemplateType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
} as const;

export interface PortainereeTemplateRepository {
  /** Path to the stack file inside the git repository */
  stackfile?: string;
  /** URL of a git repository used to deploy a stack template. Mandatory for a Swarm/Compose stack template */
  url?: string;
}

export interface PortainereeTemplateEnvSelect {
  /** Will set this choice as the default choice */
  default?: boolean;
  /** Some text that will displayed as a choice */
  text?: string;
  /** A value that will be associated to the choice */
  value?: string;
}

export interface PortainereeTemplateEnv {
  /** Default value that will be set for the variable */
  default?: string;
  /** Content of the tooltip that will be generated in the UI */
  description?: string;
  /** Text for the label that will be generated in the UI */
  label?: string;
  /** name of the environment(endpoint) variable */
  name?: string;
  /** If set to true, will not generate any input for this variable in the UI */
  preset?: boolean;
  /** A list of name/value that will be used to generate a dropdown in the UI */
  select?: PortainereeTemplateEnvSelect[];
}

export interface PortainereeTemplate {
  /** Mandatory container/stack fields
Template Identifier */
  Id?: number;
  /** Whether the template should be available to administrators only */
  administrator_only?: boolean;
  /** A list of categories associated to the template */
  categories?: string[];
  /** The command that will be executed in a container template */
  command?: string;
  /** Description of the template */
  description?: string;
  /** A list of environment(endpoint) variables used during the template deployment */
  env?: PortainereeTemplateEnv[];
  /** Container hostname */
  hostname?: string;
  /** Mandatory container fields
Image associated to a container template. Mandatory for a container template */
  image?: string;
  /** Whether the container should be started in
interactive mode (-i -t equivalent on the CLI) */
  interactive?: boolean;
  /** Container labels */
  labels?: PortainereePair[];
  /** URL of the template's logo */
  logo?: string;
  /** Optional stack/container fields
Default name for the stack/container to be used on deployment */
  name?: string;
  /** Name of a network that will be used on container deployment if it exists inside the environment(endpoint) */
  network?: string;
  /** A note that will be displayed in the UI. Supports HTML content */
  note?: string;
  /** Platform associated to the template.
Valid values are: 'linux', 'windows' or leave empty for multi-platform */
  platform?: string;
  /** A list of ports exposed by the container */
  ports?: string[];
  /** Whether the container should be started in privileged mode */
  privileged?: boolean;
  /** Optional container fields
The URL of a registry associated to the image for a container template */
  registry?: string;
  /** Mandatory stack fields */
  repository?: PortainereeTemplateRepository;
  /** Container restart policy */
  restart_policy?: string;
  /** Mandatory Edge stack fields
Stack file used for this template */
  stackFile?: string;
  /** Title of the template */
  title?: string;
  /** Template type. Valid values are: 1 (container), 2 (Swarm stack) or 3 (Compose stack) */
  type?: PortainereeTemplateType;
  /** A list of volumes used during the container template deployment */
  volumes?: PortainereeTemplateVolume[];
}

export interface PortainereeTeamResourceAccess {
  AccessLevel?: PortainereeResourceAccessLevel;
  TeamId?: number;
}

export interface PortainereeTeamMemberships {
  AdminAutoPopulate?: boolean;
  AdminGroupClaimsRegexList?: string[];
  OAuthClaimMappings?: PortainereeOAuthClaimMappings[];
  OAuthClaimName?: string;
}

export interface PortainereeTeamMembership {
  /** Membership Identifier */
  Id?: number;
  /** Team role (1 for team leader and 2 for team member) */
  Role?: PortainereeMembershipRole;
  /** Team identifier */
  TeamID?: number;
  /** User identifier */
  UserID?: number;
}

export interface PortainereeTeamAccessPolicies {
  [key: string]: PortainereeAccessPolicy;
}

export interface PortainereeTeam {
  /** Team Identifier */
  Id?: number;
  /** Team name */
  Name?: string;
}

/**
 * A set of environment(endpoint) ids that have this tag
 */
export type PortainereeTagEndpoints = { [key: string]: boolean };

/**
 * A set of environment(endpoint) group ids that have this tag
 */
export type PortainereeTagEndpointGroups = { [key: string]: boolean };

export interface PortainereeTag {
  /** A set of environment(endpoint) group ids that have this tag */
  EndpointGroups?: PortainereeTagEndpointGroups;
  /** A set of environment(endpoint) ids that have this tag */
  Endpoints?: PortainereeTagEndpoints;
  /** Tag name */
  Name?: string;
  /** Tag identifier */
  id?: number;
}

export interface PortainereeTLSConfiguration {
  /** Use TLS */
  TLS?: boolean;
  /** Path to the TLS CA certificate file */
  TLSCACert?: string;
  /** Path to the TLS client certificate file */
  TLSCert?: string;
  /** Path to the TLS client key file */
  TLSKey?: string;
  /** Skip the verification of the server TLS certificate */
  TLSSkipVerify?: boolean;
}

export type PortainereeStackType =
  typeof PortainereeStackType[keyof typeof PortainereeStackType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeStackType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
} as const;

export type PortainereeStackStatus =
  typeof PortainereeStackStatus[keyof typeof PortainereeStackStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeStackStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface PortainereeStackOption {
  /** Prune services that are no longer referenced */
  prune?: boolean;
}

/**
 * the default builtin registry now is anonymous docker hub registry
 */
export type PortainereeSettingsDefaultRegistry = {
  Hide?: boolean;
};

export interface PortainereeSSLSettings {
  caCertPath?: string;
  certPath?: string;
  httpEnabled?: boolean;
  keyPath?: string;
  selfSigned?: boolean;
}

export interface PortainereeS3BackupSettings {
  /** AWS access key id */
  accessKeyID?: string;
  /** AWS S3 bucket name */
  bucketName?: string;
  /** Crontab rule to make periodical backups */
  cronRule?: string;
  /** Password to encrypt the backup with */
  password?: string;
  /** AWS S3 region. Default to "us-east-1" */
  region?: string;
  /** S3 compatible host */
  s3CompatibleHost?: string;
  /** AWS secret access key */
  secretAccessKey?: string;
}

export type PortainereeRoleID =
  typeof PortainereeRoleID[keyof typeof PortainereeRoleID];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeRoleID = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
} as const;

export interface PortainereeRole {
  /** Authorizations associated to a role */
  Authorizations: PortainereeAuthorizations;
  /** Role description */
  Description: string;
  /** Role Identifier */
  Id: PortainereeRoleID;
  /** Role name */
  Name: string;
  Priority: number;
}

export type PortainereeResourceControlType =
  typeof PortainereeResourceControlType[keyof typeof PortainereeResourceControlType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeResourceControlType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
} as const;

export type PortainereeResourceAccessLevel =
  typeof PortainereeResourceAccessLevel[keyof typeof PortainereeResourceAccessLevel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeResourceAccessLevel = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export interface PortainereeResourceControl {
  AccessLevel?: PortainereeResourceAccessLevel;
  /** Permit access to resource only to admins */
  AdministratorsOnly?: boolean;
  /** ResourceControl Identifier */
  Id?: number;
  /** Deprecated fields
Deprecated in DBVersion == 2 */
  OwnerId?: number;
  /** Permit access to the associated resource to any user */
  Public?: boolean;
  /** Docker resource identifier on which access control will be applied.\
In the case of a resource control applied to a stack, use the stack name as identifier */
  ResourceId?: string;
  /** List of Docker resources that will inherit this access control */
  SubResourceIds?: string[];
  System?: boolean;
  TeamAccesses?: PortainereeTeamResourceAccess[];
  /** Type of Docker resource. Valid values are: 1- container, 2 -service
3 - volume, 4 - secret, 5 - stack, 6 - config or 7 - custom template */
  Type?: PortainereeResourceControlType;
  UserAccesses?: PortainereeUserResourceAccess[];
}

export type PortainereeRegistryType =
  typeof PortainereeRegistryType[keyof typeof PortainereeRegistryType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeRegistryType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
} as const;

export interface PortainereeRegistryManagementConfiguration {
  AccessToken?: string;
  AccessTokenExpiry?: number;
  Authentication?: boolean;
  Ecr?: PortainereeEcrData;
  Password?: string;
  TLSConfig?: PortainereeTLSConfiguration;
  Type?: PortainereeRegistryType;
  Username?: string;
}

export interface PortainereeRegistryAccessPolicies {
  Namespaces?: string[];
  TeamAccessPolicies?: PortainereeTeamAccessPolicies;
  UserAccessPolicies?: PortainereeUserAccessPolicies;
}

export interface PortainereeRegistryAccesses {
  [key: string]: PortainereeRegistryAccessPolicies;
}

/**
 * Registry Type (1 - Quay, 2 - Azure, 3 - Custom, 4 - Gitlab, 5 - ProGet, 6 - DockerHub, 7 - ECR, 8 - Github)
 */
export type PortainereeRegistryTypeProperty =
  typeof PortainereeRegistryTypeProperty[keyof typeof PortainereeRegistryTypeProperty];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeRegistryTypeProperty = {
  NUMBER_1: '1',
  NUMBER_2: '2',
  NUMBER_3: '3',
  NUMBER_4: '4',
  NUMBER_5: '5',
  NUMBER_6: '6',
  NUMBER_7: '7',
  NUMBER_8: '8',
} as const;

export interface PortainereeQuayRegistryData {
  OrganisationName?: string;
  UseOrganisation?: boolean;
}

export interface PortainereeRegistry {
  /** Stores temporary access token */
  AccessToken?: string;
  AccessTokenExpiry?: number;
  /** Is authentication against this registry enabled */
  Authentication?: boolean;
  /** Deprecated in DBVersion == 18 */
  AuthorizedTeams?: number[];
  /** Deprecated in DBVersion == 18 */
  AuthorizedUsers?: number[];
  /** Base URL, introduced for ProGet registry */
  BaseURL?: string;
  Ecr?: PortainereeEcrData;
  Github?: PortainereeGithubRegistryData;
  Gitlab?: PortainereeGitlabRegistryData;
  /** Registry Identifier */
  Id?: number;
  ManagementConfiguration?: PortainereeRegistryManagementConfiguration;
  /** Registry Name */
  Name?: string;
  /** Password or SecretAccessKey used to authenticate against this registry */
  Password?: string;
  Quay?: PortainereeQuayRegistryData;
  RegistryAccesses?: PortainereeRegistryAccesses;
  /** Deprecated in DBVersion == 31 */
  TeamAccessPolicies?: PortainereeTeamAccessPolicies;
  /** Registry Type (1 - Quay, 2 - Azure, 3 - Custom, 4 - Gitlab, 5 - ProGet, 6 - DockerHub, 7 - ECR, 8 - Github) */
  Type?: PortainereeRegistryTypeProperty;
  /** URL or IP address of the Docker registry */
  URL?: string;
  /** Deprecated fields
Deprecated in DBVersion == 31 */
  UserAccessPolicies?: PortainereeUserAccessPolicies;
  /** Username or AccessKeyID used to authenticate against this registry */
  Username?: string;
}

export interface PortainereePair {
  name?: string;
  value?: string;
}

export interface PortainereeStack {
  /** Only applies when deploying stack with multiple files */
  AdditionalFiles?: string[];
  /** The auto update settings of a git stack */
  AutoUpdate?: PortainereeAutoUpdateSettings;
  /** Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment */
  EndpointId?: number;
  /** Path to the Stack file */
  EntryPoint?: string;
  /** A list of environment(endpoint) variables used during stack deployment */
  Env?: PortainereePair[];
  /** Stack Identifier */
  Id?: number;
  /** Stack name */
  Name?: string;
  /** The stack deployment option */
  Option?: PortainereeStackOption;
  ResourceControl?: PortainereeResourceControl;
  /** Stack status (1 - active, 2 - inactive) */
  Status?: PortainereeStackStatus;
  /** Cluster identifier of the Swarm cluster where the stack is deployed */
  SwarmId?: string;
  /** Stack type. 1 for a Swarm stack, 2 for a Compose stack, 3 for a Kubernetes stack */
  Type?: PortainereeStackType;
  /** The username which created this stack */
  createdBy?: string;
  /** The date in unix time when stack was created */
  creationDate?: number;
  /** Network(Swarm) or local(Standalone) filesystem path */
  filesystemPath?: string;
  /** Whether the stack is from a app template */
  fromAppTemplate?: boolean;
  /** The git configuration of a git stack */
  gitConfig?: GittypesRepoConfig;
  /** IsComposeFormat indicates if the Kubernetes stack is created from a Docker Compose file */
  isComposeFormat?: boolean;
  /** Kubernetes namespace if stack is a kube application */
  namespace?: string;
  /** Path on disk to the repository hosting the Stack file */
  projectPath?: string;
  /** If stack support relative path volume */
  supportRelativePath?: boolean;
  /** The date in unix time when stack was last updated */
  updateDate?: number;
  /** The username which last updated this stack */
  updatedBy?: string;
  /** A UUID to identify a webhook. The stack will be force updated and pull the latest image when the webhook was invoked. */
  webhook?: string;
}

export interface PortainereeOAuthSettings {
  AccessTokenURI?: string;
  AuthorizationURI?: string;
  ClientID?: string;
  ClientSecret?: string;
  DefaultTeamID?: number;
  HideInternalAuth?: boolean;
  KubeSecretKey?: number[];
  LogoutURI?: string;
  MicrosoftTenantID?: string;
  OAuthAutoCreateUsers?: boolean;
  OAuthAutoMapTeamMemberships?: boolean;
  RedirectURI?: string;
  ResourceURI?: string;
  SSO?: boolean;
  Scopes?: string;
  TeamMemberships?: PortainereeTeamMemberships;
  UserIdentifier?: string;
}

export interface PortainereeSettings {
  /** Container environment parameter AGENT_SECRET */
  AgentSecret?: string;
  AllowBindMountsForRegularUsers?: boolean;
  AllowContainerCapabilitiesForRegularUsers?: boolean;
  AllowDeviceMappingForRegularUsers?: boolean;
  AllowHostNamespaceForRegularUsers?: boolean;
  AllowPrivilegedModeForRegularUsers?: boolean;
  AllowStackManagementForRegularUsers?: boolean;
  AllowVolumeBrowserForRegularUsers?: boolean;
  /** Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth */
  AuthenticationMethod?: PortainereeAuthenticationMethod;
  /** A list of label name & value that will be used to hide containers when querying containers */
  BlackListedLabels?: PortainereePair[];
  /** CloudAPIKeys */
  CloudApiKeys?: PortainereeCloudApiKeys;
  /** The content in plaintext used to display in the login page. Will hide when value is empty string */
  CustomLoginBanner?: string;
  Edge?: PortainereeEdge;
  /** The default check in interval for edge agent (in seconds) */
  EdgeAgentCheckinInterval?: number;
  /** EdgePortainerURL is the URL that is exposed to edge agents */
  EdgePortainerUrl?: string;
  /** Whether edge compute features are enabled */
  EnableEdgeComputeFeatures?: boolean;
  /** Deprecated fields v26 */
  EnableHostManagementFeatures?: boolean;
  /** Whether telemetry is enabled */
  EnableTelemetry?: boolean;
  /** EnforceEdgeID makes Portainer store the Edge ID instead of accepting anyone */
  EnforceEdgeID?: boolean;
  /** Experimental features */
  ExperimentalFeatures?: PortainereeExperimentalFeatures;
  /** Deployment options for encouraging git ops workflows */
  GlobalDeploymentOptions?: PortainereeGlobalDeploymentOptions;
  /** Helm repository URL, defaults to "https://charts.bitnami.com/bitnami" */
  HelmRepositoryURL?: string;
  InternalAuthSettings?: PortainereeInternalAuthSettings;
  /** The expiry of a Kubeconfig */
  KubeconfigExpiry?: string;
  /** KubectlImage, defaults to portainer/kubectl-shell */
  KubectlShellImage?: string;
  LDAPSettings?: PortainereeLDAPSettings;
  /** URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string */
  LogoURL?: string;
  OAuthSettings?: PortainereeOAuthSettings;
  /** Show the Kompose build option (discontinued in 2.18) */
  ShowKomposeBuildOption?: boolean;
  /** The interval in which environment(endpoint) snapshots are created */
  SnapshotInterval?: string;
  /** URL to the templates that will be displayed in the UI when navigating to App Templates */
  TemplatesURL?: string;
  /** TrustOnFirstConnect makes Portainer accepting edge agent connection by default */
  TrustOnFirstConnect?: boolean;
  /** The duration of a user session */
  UserSessionTimeout?: string;
  /** the default builtin registry now is anonymous docker hub registry */
  defaultRegistry?: PortainereeSettingsDefaultRegistry;
  /** Deprecated fields */
  displayDonationHeader?: boolean;
  displayExternalContributors?: boolean;
  fdoConfiguration?: PortainereeFDOConfiguration;
  openAMTConfiguration?: PortainerOpenAMTConfiguration;
}

export interface PortainereeOAuthClaimMappings {
  ClaimValRegex?: string;
  Team?: number;
}

export interface PortainereeNomadSnapshotTask {
  AllocationID?: string;
  JobID?: string;
  Namespace?: string;
  StartedAt?: string;
  State?: string;
  TaskGroup?: string;
  TaskName?: string;
}

export interface PortainereeNomadSnapshotJob {
  ID?: string;
  Namespace?: string;
  Status?: string;
  SubmitTime?: number;
  Tasks?: PortainereeNomadSnapshotTask[];
}

export interface PortainereeNomadSnapshot {
  GroupCount?: number;
  JobCount?: number;
  Jobs?: PortainereeNomadSnapshotJob[];
  NodeCount?: number;
  NomadVersion?: string;
  RunningTaskCount?: number;
  TaskCount?: number;
  Time?: number;
  TotalCPU?: number;
  TotalMemory?: number;
}

export interface PortainereeNomadData {
  Snapshots?: PortainereeNomadSnapshot[];
}

export type PortainereeMembershipRole =
  typeof PortainereeMembershipRole[keyof typeof PortainereeMembershipRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeMembershipRole = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface PortainereeMTLSSettings {
  CaCertFile?: string;
  CertFile?: string;
  KeyFile?: string;
  UseSeparateCert?: boolean;
}

export interface PortainereeLDAPUser {
  groups?: string[];
  name?: string;
}

export type PortainereeLDAPServerType =
  typeof PortainereeLDAPServerType[keyof typeof PortainereeLDAPServerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeLDAPServerType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface PortainereeLDAPSearchSettings {
  /** The distinguished name of the element from which the LDAP server will search for users */
  BaseDN?: string;
  /** Optional LDAP search filter used to select user elements */
  Filter?: string;
  /** LDAP attribute which denotes the username */
  UserNameAttribute?: string;
}

export interface PortainereeLDAPGroupSearchSettings {
  /** LDAP attribute which denotes the group membership */
  GroupAttribute?: string;
  /** The distinguished name of the element from which the LDAP server will search for groups */
  GroupBaseDN?: string;
  /** The LDAP search filter used to select group elements, optional */
  GroupFilter?: string;
}

export interface PortainereeLDAPSettings {
  /** Whether auto admin population is switched on or not */
  AdminAutoPopulate?: boolean;
  AdminGroupSearchSettings?: PortainereeLDAPGroupSearchSettings[];
  /** Saved admin group list, the user will be populated as an admin role if any user group matches the record in the list */
  AdminGroups?: string[];
  /** Enable this option if the server is configured for Anonymous access. When enabled, ReaderDN and Password will not be used */
  AnonymousMode?: boolean;
  /** Automatically provision users and assign them to matching LDAP group names */
  AutoCreateUsers?: boolean;
  GroupSearchSettings?: PortainereeLDAPGroupSearchSettings[];
  /** Password of the account that will be used to search users */
  Password?: string;
  /** Account that will be used to search for users */
  ReaderDN?: string;
  SearchSettings?: PortainereeLDAPSearchSettings[];
  ServerType?: PortainereeLDAPServerType;
  /** Whether LDAP connection should use StartTLS */
  StartTLS?: boolean;
  TLSConfig?: PortainereeTLSConfiguration;
  /** Deprecated */
  URL?: string;
  /** URLs or IP addresses of the LDAP server */
  URLs?: string[];
}

export interface PortainereeKubernetesStorageClassConfig {
  AccessModes?: string[];
  AllowVolumeExpansion?: boolean;
  Name?: string;
  Provisioner?: string;
}

export interface PortainereeKubernetesSnapshot {
  KubernetesVersion?: string;
  NodeCount?: number;
  Time?: number;
  TotalCPU?: number;
  TotalMemory?: number;
}

export interface PortainereeKubernetesIngressClassConfig {
  Blocked?: boolean;
  BlockedNamespaces?: string[];
  Name?: string;
  Type?: string;
}

export interface PortainereeKubernetesFlags {
  IsServerIngressClassDetected?: boolean;
  IsServerMetricsDetected?: boolean;
  IsServerStorageDetected?: boolean;
}

export interface PortainereeKubernetesConfiguration {
  AllowNoneIngressClass?: boolean;
  EnableResourceOverCommit?: boolean;
  IngressAvailabilityPerNamespace?: boolean;
  IngressClasses?: PortainereeKubernetesIngressClassConfig[];
  ResourceOverCommitPercentage?: number;
  RestrictDefaultNamespace?: boolean;
  RestrictStandardUserIngressW?: boolean;
  StorageClasses?: PortainereeKubernetesStorageClassConfig[];
  UseLoadBalancer?: boolean;
  UseServerMetrics?: boolean;
}

export interface PortainereeKubernetesData {
  Configuration?: PortainereeKubernetesConfiguration;
  Flags?: PortainereeKubernetesFlags;
  Snapshots?: PortainereeKubernetesSnapshot[];
}

export interface PortainereeK8sNodeLimits {
  CPU?: number;
  Memory?: number;
}

export interface PortainereeK8sNodesLimits {
  [key: string]: PortainereeK8sNodeLimits;
}

export interface PortainereeInternalAuthSettings {
  requiredPasswordLength?: number;
}

export interface PortainereeHelmUserRepository {
  /** Membership Identifier */
  Id?: number;
  /** Helm repository URL */
  URL?: string;
  /** User identifier */
  UserId?: number;
}

export interface PortainereeGlobalDeploymentOptions {
  /** Hide manual deploy forms in portainer */
  hideAddWithForm?: boolean;
  /** Hide the file upload option in the remaining visible forms */
  hideFileUpload?: boolean;
  /** Hide the webeditor in the remaining visible forms */
  hideWebEditor?: boolean;
  /** Configure this per environment or globally */
  perEnvOverride?: boolean;
}

export interface PortainereeGitlabRegistryData {
  InstanceURL?: string;
  ProjectId?: number;
  ProjectPath?: string;
}

export interface PortainereeGithubRegistryData {
  OrganisationName?: string;
  UseOrganisation?: boolean;
}

export interface PortainereeGitCredential {
  creationDate?: number;
  id?: number;
  name?: string;
  password?: string;
  userId?: number;
  username?: string;
}

export interface PortainereeFDOConfiguration {
  enabled?: boolean;
  ownerPassword?: string;
  ownerURL?: string;
  ownerUsername?: string;
}

export interface PortainereeExperimentalFeatures {
  OpenAIIntegration?: boolean;
}

export interface PortainereeEnvironmentEdgeSettings {
  /** The command list interval for edge agent - used in edge async mode [seconds] */
  CommandInterval?: number;
  /** The ping interval for edge agent - used in edge async mode [seconds] */
  PingInterval?: number;
  /** The snapshot interval for edge agent - used in edge async mode [seconds] */
  SnapshotInterval?: number;
  /** Whether the device has been started in edge async mode */
  asyncMode?: boolean;
}

export type PortainereeEndpointType =
  typeof PortainereeEndpointType[keyof typeof PortainereeEndpointType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeEndpointType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
} as const;

export interface PortainereeEndpointStatusMessage {
  Detail?: string;
  Summary?: string;
}

export type PortainereeEndpointStatus =
  typeof PortainereeEndpointStatus[keyof typeof PortainereeEndpointStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeEndpointStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
} as const;

export interface PortainereeEndpointSecuritySettings {
  /** Whether non-administrator should be able to use bind mounts when creating containers */
  allowBindMountsForRegularUsers?: boolean;
  /** Whether non-administrator should be able to use container capabilities */
  allowContainerCapabilitiesForRegularUsers?: boolean;
  /** Whether non-administrator should be able to use device mapping */
  allowDeviceMappingForRegularUsers?: boolean;
  /** Whether non-administrator should be able to use the host pid */
  allowHostNamespaceForRegularUsers?: boolean;
  /** Whether non-administrator should be able to use privileged mode when creating containers */
  allowPrivilegedModeForRegularUsers?: boolean;
  /** Whether non-administrator should be able to manage stacks */
  allowStackManagementForRegularUsers?: boolean;
  /** Whether non-administrator should be able to use sysctl settings */
  allowSysctlSettingForRegularUsers?: boolean;
  /** Whether non-administrator should be able to browse volumes */
  allowVolumeBrowserForRegularUsers?: boolean;
  /** Whether host management features are enabled */
  enableHostManagementFeatures?: boolean;
}

export interface PortainereeEndpointPostInitMigrations {
  MigrateGPUs?: boolean;
  MigrateGateKeeper?: boolean;
  MigrateIngresses?: boolean;
}

export interface PortainereeEndpointGroup {
  AuthorizedTeams?: number[];
  /** Deprecated in DBVersion == 18 */
  AuthorizedUsers?: number[];
  /** Description associated to the environment(endpoint) group */
  Description?: string;
  /** Environment(Endpoint) group Identifier */
  Id?: number;
  /** Deprecated fields */
  Labels?: PortainereePair[];
  /** Environment(Endpoint) group name */
  Name?: string;
  /** List of tags associated to this environment(endpoint) group */
  TagIds?: number[];
  /** Deprecated in DBVersion == 22 */
  Tags?: string[];
  TeamAccessPolicies?: PortainereeTeamAccessPolicies;
  UserAccessPolicies?: PortainereeUserAccessPolicies;
}

export interface PortainereeEndpointChangeWindow {
  Enabled?: boolean;
  EndTime?: string;
  StartTime?: string;
}

export interface PortainereeEndpointAuthorizations {
  [key: string]: PortainereeAuthorizations;
}

export type PortainereeEndpointAgent = {
  version?: string;
};

export interface PortainereeEndpoint {
  /** The identifier of the AMT Device associated with this environment(endpoint) */
  AMTDeviceGUID?: string;
  AuthorizedTeams?: number[];
  /** Deprecated in DBVersion == 18 */
  AuthorizedUsers?: number[];
  AzureCredentials?: PortainereeAzureCredentials;
  /** Automatic update change window restriction for stacks and apps */
  ChangeWindow?: PortainereeEndpointChangeWindow;
  /** A Kubernetes as a service cloud provider. Only included if this
endpoint was created using KaaS provisioning. */
  CloudProvider?: PortainereeCloudProvider;
  /** Maximum version of docker-compose */
  ComposeSyntaxMaxVersion?: string;
  /** Hide manual deployment forms for an environment */
  DeploymentOptions?: PortainereeDeploymentOptions;
  /** The check in interval for edge agent (in seconds) */
  EdgeCheckinInterval?: number;
  /** The identifier of the edge agent associated with this environment(endpoint) */
  EdgeID?: string;
  /** The key which is used to map the agent to Portainer */
  EdgeKey?: string;
  EnableGPUManagement?: boolean;
  EnableImageNotification?: boolean;
  Gpus?: PortainereePair[];
  /** Environment(Endpoint) group identifier */
  GroupId?: number;
  /** Heartbeat indicates the heartbeat status of an edge environment */
  Heartbeat?: boolean;
  /** Environment(Endpoint) Identifier */
  Id?: number;
  /** Associated Kubernetes data */
  Kubernetes?: PortainereeKubernetesData;
  /** Environment(Endpoint) name */
  Name?: string;
  /** Associated Nomad data */
  Nomad?: PortainereeNomadData;
  /** Whether we need to run any "post init migrations". */
  PostInitMigrations?: PortainereeEndpointPostInitMigrations;
  /** URL or IP address where exposed containers will be reachable */
  PublicURL?: string;
  /** List of snapshots */
  Snapshots?: PortainerDockerSnapshot[];
  /** The status of the environment(endpoint) (1 - up, 2 - down, 3 -
provisioning, 4 - error) */
  Status?: PortainereeEndpointStatus;
  /** A message that describes the status. Should be included for Status 3
or 4. */
  StatusMessage?: PortainereeEndpointStatusMessage;
  /** Deprecated fields
Deprecated in DBVersion == 4 */
  TLS?: boolean;
  TLSCACert?: string;
  TLSCert?: string;
  TLSConfig?: PortainereeTLSConfiguration;
  TLSKey?: string;
  /** List of tag identifiers to which this environment(endpoint) is associated */
  TagIds?: number[];
  /** Deprecated in DBVersion == 22 */
  Tags?: string[];
  /** List of team identifiers authorized to connect to this environment(endpoint) */
  TeamAccessPolicies?: PortainereeTeamAccessPolicies;
  /** Environment(Endpoint) environment(endpoint) type. 1 for a Docker environment(endpoint), 2 for an agent on Docker environment(endpoint) or 3 for an Azure environment(endpoint). */
  Type?: PortainereeEndpointType;
  /** URL or IP address of the Docker host associated to this environment(endpoint) */
  URL?: string;
  /** List of user identifiers authorized to connect to this environment(endpoint) */
  UserAccessPolicies?: PortainereeUserAccessPolicies;
  agent?: PortainereeEndpointAgent;
  edge?: PortainereeEnvironmentEdgeSettings;
  /** Deprecated v2.18 */
  isEdgeDevice?: boolean;
  /** LastCheckInDate mark last check-in date on checkin */
  lastCheckInDate?: number;
  /** LocalTimeZone is the local time zone of the endpoint */
  localTimeZone?: string;
  /** QueryDate of each query with the endpoints list */
  queryDate?: number;
  /** Environment(Endpoint) specific security settings */
  securitySettings?: PortainereeEndpointSecuritySettings;
  /** Whether the device has been trusted or not by the user */
  userTrusted?: boolean;
}

export type PortainereeEdgeStackDeploymentType =
  typeof PortainereeEdgeStackDeploymentType[keyof typeof PortainereeEdgeStackDeploymentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeEdgeStackDeploymentType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export type PortainereeEdgeStackStatus = {
  [key: string]: PortainerEdgeStackStatus;
};

export interface PortainereeEdgeStack {
  CreationDate?: number;
  DeploymentType?: PortainereeEdgeStackDeploymentType;
  EdgeGroups?: number[];
  EntryPoint?: string;
  /** EdgeStack Identifier */
  Id?: number;
  ManifestPath?: string;
  Name?: string;
  NumDeployments?: number;
  /** Pre Pull Image */
  PrePullImage?: boolean;
  ProjectPath?: string;
  /** Deprecated */
  Prune?: boolean;
  /** Re-Pull Image */
  RePullImage?: boolean;
  Registries?: number[];
  Status?: PortainereeEdgeStackStatus;
  Version?: number;
  /** EdgeUpdateID represents the parent update ID, will be zero if this stack is not part of an update */
  edgeUpdateID?: number;
  /** Retry deploy */
  retryDeploy?: boolean;
  /** Schedule represents the schedule of the Edge stack (optional, format - 'YYYY-MM-DD HH:mm:ss') */
  scheduledTime?: string;
  /** Uses the manifest's namespaces instead of the default one */
  useManifestNamespaces?: boolean;
}

export interface PortainereeEdgeRegistryCredential {
  secret?: string;
  serverURL?: string;
  username?: string;
}

export type PortainereeEdgeJobLogsStatus =
  typeof PortainereeEdgeJobLogsStatus[keyof typeof PortainereeEdgeJobLogsStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeEdgeJobLogsStatus = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

export interface PortainereeEdgeJobEndpointMeta {
  collectLogs?: boolean;
  logsStatus?: PortainereeEdgeJobLogsStatus;
}

/**
 * Field used for log collection of Endpoints belonging to EdgeGroups
 */
export type PortainereeEdgeJobGroupLogsCollection = {
  [key: string]: PortainereeEdgeJobEndpointMeta;
};

export type PortainereeEdgeJobEndpoints = {
  [key: string]: PortainereeEdgeJobEndpointMeta;
};

export interface PortainereeEdgeJob {
  Created?: number;
  CronExpression?: string;
  EdgeGroups?: number[];
  Endpoints?: PortainereeEdgeJobEndpoints;
  /** EdgeJob Identifier */
  Id?: number;
  Name?: string;
  Recurring?: boolean;
  ScriptPath?: string;
  Version?: number;
  /** Field used for log collection of Endpoints belonging to EdgeGroups */
  groupLogsCollection?: PortainereeEdgeJobGroupLogsCollection;
}

export interface PortainereeEdgeGroup {
  Dynamic?: boolean;
  Endpoints?: number[];
  /** EdgeGroup Identifier */
  Id?: number;
  Name?: string;
  PartialMatch?: boolean;
  TagIds?: number[];
}

export type PortainereeEdgeAsyncCommandType =
  typeof PortainereeEdgeAsyncCommandType[keyof typeof PortainereeEdgeAsyncCommandType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeEdgeAsyncCommandType = {
  edgeStack: 'edgeStack',
  edgeJob: 'edgeJob',
  edgeLog: 'edgeLog',
  container: 'container',
  image: 'image',
  volume: 'volume',
} as const;

export type PortainereeEdgeAsyncCommandOperation =
  typeof PortainereeEdgeAsyncCommandOperation[keyof typeof PortainereeEdgeAsyncCommandOperation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeEdgeAsyncCommandOperation = {
  add: 'add',
  remove: 'remove',
  replace: 'replace',
} as const;

export interface PortainereeEdgeAsyncCommand {
  endpointID?: number;
  executed?: boolean;
  id?: number;
  op?: PortainereeEdgeAsyncCommandOperation;
  path?: string;
  scheduledTime?: string;
  timestamp?: string;
  type?: PortainereeEdgeAsyncCommandType;
  value?: unknown;
}

export interface PortainereeEdge {
  /** The command list interval for edge agent - used in edge async mode (in seconds) */
  CommandInterval?: number;
  /** The ping interval for edge agent - used in edge async mode (in seconds) */
  PingInterval?: number;
  /** The snapshot interval for edge agent - used in edge async mode (in seconds) */
  SnapshotInterval?: number;
  /** The address where the tunneling server can be reached by Edge agents */
  TunnelServerAddress?: string;
  /** Deprecated 2.18 */
  asyncMode?: boolean;
  mtls?: PortainereeMTLSSettings;
}

export interface PortainereeEcrData {
  Region?: string;
}

export interface PortainereeDeploymentOptions {
  /** Hide manual deploy forms in portainer */
  hideAddWithForm?: boolean;
  /** Hide the file upload option in the remaining visible forms */
  hideFileUpload?: boolean;
  /** Hide the webeditor in the remaining visible forms */
  hideWebEditor?: boolean;
  overrideGlobalOptions?: boolean;
}

export interface PortainereeCustomTemplateVariableDefinition {
  defaultValue?: string;
  description?: string;
  label?: string;
  name?: string;
}

export type PortainereeCustomTemplatePlatform =
  typeof PortainereeCustomTemplatePlatform[keyof typeof PortainereeCustomTemplatePlatform];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeCustomTemplatePlatform = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

/**
 * Platform associated to the template.
Valid values are: 1 - 'linux', 2 - 'windows'
 */
export type PortainereeCustomTemplatePlatformProperty =
  typeof PortainereeCustomTemplatePlatformProperty[keyof typeof PortainereeCustomTemplatePlatformProperty];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeCustomTemplatePlatformProperty = {
  NUMBER_1: '1',
  NUMBER_2: '2',
} as const;

export interface PortainereeCustomTemplate {
  /** User identifier who created this template */
  CreatedByUserId?: number;
  /** Description of the template */
  Description?: string;
  /** Path to the Stack file */
  EntryPoint?: string;
  GitConfig?: GittypesRepoConfig;
  /** CustomTemplate Identifier */
  Id?: number;
  /** URL of the template's logo */
  Logo?: string;
  /** A note that will be displayed in the UI. Supports HTML content */
  Note?: string;
  /** Platform associated to the template.
Valid values are: 1 - 'linux', 2 - 'windows' */
  Platform?: PortainereeCustomTemplatePlatformProperty;
  /** Path on disk to the repository hosting the Stack file */
  ProjectPath?: string;
  ResourceControl?: PortainereeResourceControl;
  /** Title of the template */
  Title?: string;
  /** Type of created stack (1 - swarm, 2 - compose) */
  Type?: PortainereeStackType;
  /** IsComposeFormat indicates if the Kubernetes template is created from a Docker Compose file */
  isComposeFormat?: boolean;
  variables?: PortainereeCustomTemplateVariableDefinition[];
}

export interface PortainereeCloudProvider {
  /** MicroK8S specific fields */
  Addons?: string;
  /** Amazon specific fields */
  AmiType?: string;
  CPU?: number;
  /** CredentialID holds an ID of the credential used to create the cluster */
  CredentialID?: number;
  HDD?: number;
  InstanceType?: string;
  Name?: string;
  /** Pointer will hide this field for providers other than civo which do
not use this field. */
  NetworkID?: string;
  NodeCount?: number;
  NodeIPs?: string;
  NodeVolumeSize?: number;
  RAM?: number;
  Region?: string;
  Size?: string;
  URL?: string;
  dnsprefix?: string;
  kubernetesVersion?: string;
  poolName?: string;
  /** Azure specific fields */
  resourceGroup?: string;
  tier?: string;
}

export interface PortainereeCloudApiKeys {
  CivoApiKey?: string;
  DigitalOceanToken?: string;
  GKEApiKey?: string;
  LinodeToken?: string;
}

export interface PortainereeAzureCredentials {
  /** Azure application ID */
  ApplicationID?: string;
  /** Azure authentication key */
  AuthenticationKey?: string;
  /** Azure tenant ID */
  TenantID?: string;
}

export interface PortainereeAutoUpdateSettings {
  /** Pull latest image */
  forcePullImage?: boolean;
  /** Force update ignores repo changes */
  forceUpdate?: boolean;
  /** Auto update interval */
  interval?: string;
  /** Autoupdate job id */
  jobID?: string;
  /** A UUID generated from client */
  webhook?: string;
}

export interface PortainereeAuthorizations {
  [key: string]: boolean;
}

export type PortainereeAuthenticationMethod =
  typeof PortainereeAuthenticationMethod[keyof typeof PortainereeAuthenticationMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeAuthenticationMethod = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

export type PortainereeAuthenticationActivityType =
  typeof PortainereeAuthenticationActivityType[keyof typeof PortainereeAuthenticationActivityType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainereeAuthenticationActivityType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

export interface PortainereeAuthActivityLog {
  context?: PortainereeAuthenticationMethod;
  id?: number;
  origin?: string;
  timestamp?: number;
  type?: PortainereeAuthenticationActivityType;
  username?: string;
}

export interface PortainereeAccessPolicy {
  /** Role identifier. Reference the role that will be associated to this access policy */
  RoleId?: PortainereeRoleID;
}

export interface PortainereeAPIKey {
  /** Unix timestamp (UTC) when the API key was created */
  dateCreated?: number;
  description?: string;
  /** Digest represents SHA256 hash of the raw API key */
  digest?: number[];
  id?: number;
  /** Unix timestamp (UTC) when the API key was last used */
  lastUsed?: number;
  /** API key identifier (7 char prefix) */
  prefix?: string;
  userId?: number;
}

export interface PortainerOpenAMTDeviceEnabledFeatures {
  IDER?: boolean;
  KVM?: boolean;
  SOL?: boolean;
  redirection?: boolean;
  userConsent?: string;
}

export interface PortainerOpenAMTConfiguration {
  certFileContent?: string;
  certFileName?: string;
  certFilePassword?: string;
  domainName?: string;
  enabled?: boolean;
  mpsPassword?: string;
  mpsServer?: string;
  /** retrieved from API */
  mpsToken?: string;
  mpsUser?: string;
}

export type PortainerEdgeStackStatusType =
  typeof PortainerEdgeStackStatusType[keyof typeof PortainerEdgeStackStatusType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainerEdgeStackStatusType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
} as const;

export interface PortainerEdgeStackStatusDetails {
  acknowledged?: boolean;
  error?: boolean;
  imagesPulled?: boolean;
  ok?: boolean;
  pending?: boolean;
  remoteUpdateSuccess?: boolean;
  remove?: boolean;
}

export interface PortainerEdgeStackStatus {
  Details?: PortainerEdgeStackStatusDetails;
  EndpointID?: number;
  Error?: string;
  /** Deprecated */
  Type?: PortainerEdgeStackStatusType;
}

export type PortainerEdgeStackDeploymentType =
  typeof PortainerEdgeStackDeploymentType[keyof typeof PortainerEdgeStackDeploymentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortainerEdgeStackDeploymentType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export type PortainerEdgeStackStatusProperty = {
  [key: string]: PortainerEdgeStackStatus;
};

export interface PortainerEdgeStack {
  CreationDate?: number;
  EdgeGroups?: number[];
  EntryPoint?: string;
  /** EdgeStack Identifier */
  Id?: number;
  Name?: string;
  NumDeployments?: number;
  ProjectPath?: string;
  /** Deprecated */
  Prune?: boolean;
  Status?: PortainerEdgeStackStatusProperty;
  Version?: number;
  deploymentType?: PortainerEdgeStackDeploymentType;
  manifestPath?: string;
  /** Uses the manifest's namespaces instead of the default one */
  useManifestNamespaces?: boolean;
}

export interface PortainerDockerSnapshotRaw {
  [key: string]: any;
}

export interface PortainerDockerSnapshot {
  DockerSnapshotRaw?: PortainerDockerSnapshotRaw;
  DockerVersion?: string;
  GpuUseAll?: boolean;
  GpuUseList?: string[];
  HealthyContainerCount?: number;
  ImageCount?: number;
  NodeCount?: number;
  RunningContainerCount?: number;
  ServiceCount?: number;
  StackCount?: number;
  StoppedContainerCount?: number;
  Swarm?: boolean;
  Time?: number;
  TotalCPU?: number;
  TotalMemory?: number;
  UnhealthyContainerCount?: number;
  VolumeCount?: number;
}

export type PortainerDockerContainerSnapshotLabels = { [key: string]: string };

export type PortainerDockerContainerSnapshotHostConfig = {
  networkMode?: string;
};

export interface PortainerDockerContainerSnapshot {
  /** EE-5240 */
  Env?: string[];
  Id?: string;
  command?: string;
  created?: number;
  hostConfig?: PortainerDockerContainerSnapshotHostConfig;
  image?: string;
  imageID?: string;
  labels?: PortainerDockerContainerSnapshotLabels;
  mounts?: TypesMountPoint[];
  names?: string[];
  networkSettings?: TypesSummaryNetworkSettings;
  ports?: TypesPort[];
  sizeRootFs?: number;
  sizeRw?: number;
  state?: string;
  status?: string;
}

export type PodsecuritySupplementalGroupsStrategyType =
  typeof PodsecuritySupplementalGroupsStrategyType[keyof typeof PodsecuritySupplementalGroupsStrategyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PodsecuritySupplementalGroupsStrategyType = {
  MayRunAs: 'MayRunAs',
  MustRunAs: 'MustRunAs',
  RunAsAny: 'RunAsAny',
} as const;

export type PodsecurityRunAsUserStrategy =
  typeof PodsecurityRunAsUserStrategy[keyof typeof PodsecurityRunAsUserStrategy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PodsecurityRunAsUserStrategy = {
  MustRunAs: 'MustRunAs',
  MustRunAsNonRoot: 'MustRunAsNonRoot',
  RunAsAny: 'RunAsAny',
} as const;

export type PodsecurityRunAsGroupStrategy =
  typeof PodsecurityRunAsGroupStrategy[keyof typeof PodsecurityRunAsGroupStrategy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PodsecurityRunAsGroupStrategy = {
  MayRunAs: 'MayRunAs',
  MustRunAs: 'MustRunAs',
  RunAsAny: 'RunAsAny',
} as const;

export interface PodsecurityPodSecurityVolumeTypes {
  allowedTypes?: PodsecurityFSType[];
  enabled?: boolean;
}

export interface PodsecurityPodSecuritySupplementalGroups {
  idrange?: PodsecurityPodSecurityIdrange[];
  type?: PodsecuritySupplementalGroupsStrategyType;
}

export interface PodsecurityPodSecuritySelinux {
  allowedCapabilities?: PodsecurityPodSecurityAllowedCapabilities[];
  enabled?: boolean;
}

export interface PodsecurityPodSecuritySecComp {
  enabled?: boolean;
  secCompType?: string[];
}

export interface PodsecurityPodSecurityRunAsUser {
  idrange?: PodsecurityPodSecurityIdrange[];
  type?: PodsecurityRunAsUserStrategy;
}

export interface PodsecurityPodSecurityReadOnlyRootFileSystem {
  enabled?: boolean;
}

export interface PodsecurityPodSecurityPrivilegedContainers {
  enabled?: boolean;
}

export interface PodsecurityPodSecurityIdrange {
  max?: number;
  min?: number;
}

export interface PodsecurityPodSecurityRunAsGroup {
  idrange?: PodsecurityPodSecurityIdrange[];
  type?: PodsecurityRunAsGroupStrategy;
}

export interface PodsecurityPodSecurityHostNetworkingPorts {
  enabled?: boolean;
  hostNetwork?: boolean;
  max?: number;
  min?: number;
}

export interface PodsecurityPodSecurityHostNamespaces {
  enabled?: boolean;
}

export interface PodsecurityPodSecurityHostFilesystem {
  allowedPaths?: PodsecurityPodSecurityAllowedPaths[];
  enabled?: boolean;
}

export interface PodsecurityPodSecurityFsGroups {
  idrange?: PodsecurityPodSecurityIdrange[];
  type?: PodsecurityFSGroupStrategyType;
}

export interface PodsecurityPodSecurityUsers {
  enabled?: boolean;
  fsGroups?: PodsecurityPodSecurityFsGroups;
  runAsGroup?: PodsecurityPodSecurityRunAsGroup;
  runAsUser?: PodsecurityPodSecurityRunAsUser;
  supplementalGroups?: PodsecurityPodSecuritySupplementalGroups;
}

export interface PodsecurityPodSecurityForbiddenSysctlsList {
  enabled?: boolean;
  requiredDropCapabilities?: string[];
}

export interface PodsecurityPodSecurityCapabilities {
  allowedCapabilities?: string[];
  enabled?: boolean;
  requiredDropCapabilities?: string[];
}

export interface PodsecurityPodSecurityAppArmour {
  AppArmorType?: string[];
  enabled?: boolean;
}

export interface PodsecurityPodSecurityRule {
  allowFlexVolumes?: PodsecurityPodSecurityAllowFlexVolumes;
  allowPrivilegeEscalation?: PodsecurityPodSecurityAllowPrivilegeEscalation;
  allowProcMount?: PodsecurityPodSecurityAllowProcMount;
  appArmor?: PodsecurityPodSecurityAppArmour;
  capabilities?: PodsecurityPodSecurityCapabilities;
  enabled?: boolean;
  endPointID?: number;
  forbiddenSysctlsList?: PodsecurityPodSecurityForbiddenSysctlsList;
  hostFilesystem?: PodsecurityPodSecurityHostFilesystem;
  hostNamespaces?: PodsecurityPodSecurityHostNamespaces;
  hostPorts?: PodsecurityPodSecurityHostNetworkingPorts;
  id?: number;
  privilegedContainers?: PodsecurityPodSecurityPrivilegedContainers;
  readOnlyRootFileSystem?: PodsecurityPodSecurityReadOnlyRootFileSystem;
  secComp?: PodsecurityPodSecuritySecComp;
  selinux?: PodsecurityPodSecuritySelinux;
  users?: PodsecurityPodSecurityUsers;
  volumeTypes?: PodsecurityPodSecurityVolumeTypes;
}

export interface PodsecurityPodSecurityAllowedPaths {
  pathPrefix?: string;
  readonly?: boolean;
}

export interface PodsecurityPodSecurityAllowedCapabilities {
  level?: string;
  role?: string;
  type?: string;
  user?: string;
}

export interface PodsecurityPodSecurityAllowProcMount {
  enabled?: boolean;
  procMountType?: string;
}

export interface PodsecurityPodSecurityAllowPrivilegeEscalation {
  enabled?: boolean;
}

export interface PodsecurityPodSecurityAllowFlexVolumes {
  allowedVolumes?: string[];
  enabled?: boolean;
}

export type PodsecurityFSType =
  typeof PodsecurityFSType[keyof typeof PodsecurityFSType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PodsecurityFSType = {
  azureFile: 'azureFile',
  flocker: 'flocker',
  flexVolume: 'flexVolume',
  hostPath: 'hostPath',
  emptyDir: 'emptyDir',
  gcePersistentDisk: 'gcePersistentDisk',
  awsElasticBlockStore: 'awsElasticBlockStore',
  gitRepo: 'gitRepo',
  secret: 'secret',
  nfs: 'nfs',
  iscsi: 'iscsi',
  glusterfs: 'glusterfs',
  persistentVolumeClaim: 'persistentVolumeClaim',
  rbd: 'rbd',
  cinder: 'cinder',
  cephFS: 'cephFS',
  downwardAPI: 'downwardAPI',
  fc: 'fc',
  configMap: 'configMap',
  vsphereVolume: 'vsphereVolume',
  quobyte: 'quobyte',
  azureDisk: 'azureDisk',
  photonPersistentDisk: 'photonPersistentDisk',
  storageos: 'storageos',
  projected: 'projected',
  portworxVolume: 'portworxVolume',
  scaleIO: 'scaleIO',
  csi: 'csi',
  ephemeral: 'ephemeral',
  '*': '*',
} as const;

export type PodsecurityFSGroupStrategyType =
  typeof PodsecurityFSGroupStrategyType[keyof typeof PodsecurityFSGroupStrategyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PodsecurityFSGroupStrategyType = {
  MayRunAs: 'MayRunAs',
  MustRunAs: 'MustRunAs',
  RunAsAny: 'RunAsAny',
} as const;

export interface OpenamtOpenAMTConfigurePayload {
  certFileContent?: string;
  certFileName?: string;
  certFilePassword?: string;
  domainName?: string;
  enabled?: boolean;
  mpspassword?: string;
  mpsserver?: string;
  mpsuser?: string;
}

export interface OpenamtDeviceFeaturesPayload {
  features?: PortainerOpenAMTDeviceEnabledFeatures;
}

export interface OpenamtDeviceActionPayload {
  action?: string;
}

export interface NomadSlimNomadTaskEvent {
  date?: number;
  message?: string;
  type?: string;
}

export type NetworkEndpointSettingsDriverOpts = { [key: string]: string };

export interface NetworkEndpointIPAMConfig {
  ipv4Address?: string;
  ipv6Address?: string;
  linkLocalIPs?: string[];
}

export interface NetworkEndpointSettings {
  aliases?: string[];
  driverOpts?: NetworkEndpointSettingsDriverOpts;
  endpointID?: string;
  gateway?: string;
  globalIPv6Address?: string;
  globalIPv6PrefixLen?: number;
  ipaddress?: string;
  /** Configurations */
  ipamconfig?: NetworkEndpointIPAMConfig;
  ipprefixLen?: number;
  ipv6Gateway?: string;
  links?: string[];
  macAddress?: string;
  /** Operational data */
  networkID?: string;
}

export type MountType = typeof MountType[keyof typeof MountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MountType = {
  bind: 'bind',
  volume: 'volume',
  tmpfs: 'tmpfs',
  npipe: 'npipe',
} as const;

export type MountPropagation =
  typeof MountPropagation[keyof typeof MountPropagation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MountPropagation = {
  rprivate: 'rprivate',
  private: 'private',
  rshared: 'rshared',
  shared: 'shared',
  rslave: 'rslave',
  slave: 'slave',
} as const;

export type MotdMotdResponseContentLayout = { [key: string]: string };

export interface MotdMotdResponse {
  ContentLayout?: MotdMotdResponseContentLayout;
  Hash?: number[];
  Message?: string;
  Style?: string;
  Title?: string;
}

export interface ModelsSSHKeyPair {
  private?: string;
  public?: string;
}

export type ModelsK8sApplicationLabels = { [key: string]: string };

export interface ModelsK8sApplication {
  kind?: string;
  labels?: ModelsK8sApplicationLabels;
  name?: string;
  namespace?: string;
  uid?: string;
}

export interface ModelsCloudCredentialMap {
  [key: string]: string;
}

export interface ModelsCloudCredential {
  created?: number;
  credentials?: ModelsCloudCredentialMap;
  id?: number;
  name?: string;
  provider?: string;
}

export type LicensesDeleteResponseFailedKeys = { [key: string]: string };

export interface LicensesDeleteResponse {
  failedKeys?: LicensesDeleteResponseFailedKeys;
}

export interface LicensesDeletePayload {
  /** List of license keys to remove */
  licenseKeys?: string[];
}

export type LicensesAttachResponseFailedKeys = { [key: string]: string };

export interface LicensesAttachResponse {
  failedKeys?: LicensesAttachResponseFailedKeys;
  licenses?: LiblicensePortainerLicense[];
}

export interface LicensesAttachPayload {
  /** List of license keys to attach */
  licenseKeys?: string[];
}

export type LiblicenseProductEdition =
  typeof LiblicenseProductEdition[keyof typeof LiblicenseProductEdition];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LiblicenseProductEdition = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

export type LiblicensePortainerLicenseType =
  typeof LiblicensePortainerLicenseType[keyof typeof LiblicensePortainerLicenseType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LiblicensePortainerLicenseType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
} as const;

export interface LicensesLicenseInfo {
  company?: string;
  enforcedAt?: number;
  expiresAt?: number;
  nodes?: number;
  /** unix timestamp when node usage exceeded avaiable license limit */
  overuseStartedTimestamp?: number;
  type?: LiblicensePortainerLicenseType;
  valid?: boolean;
}

export interface LiblicensePortainerLicense {
  company?: string;
  created?: number;
  email?: string;
  expiresAfter?: number;
  expiresAt?: number;
  firstCheckin?: number;
  id?: string;
  lastCheckin?: number;
  licenseKey?: string;
  nodes?: number;
  productEdition?: LiblicenseProductEdition;
  reference?: string;
  revoked?: boolean;
  revokedAt?: number;
  type?: LiblicensePortainerLicenseType;
  version?: number;
}

export interface LdapUsersPayload {
  ldapsettings?: PortainereeLDAPSettings;
}

export interface LdapTestLoginResponse {
  valid?: boolean;
}

export interface LdapTestLoginPayload {
  ldapsettings?: PortainereeLDAPSettings;
  password?: string;
  username?: string;
}

export interface LdapGroupsPayload {
  ldapsettings?: PortainereeLDAPSettings;
}

export interface LdapCheckPayload {
  ldapsettings?: PortainereeLDAPSettings;
}

export interface LdapAdminGroupsPayload {
  ldapsettings?: PortainereeLDAPSettings;
}

export interface KubernetesNamespacesToggleSystemPayload {
  /** Toggle the system state of this namespace to true or false */
  system?: boolean;
}

export interface HelmInstallChartPayload {
  chart?: string;
  name?: string;
  namespace?: string;
  repo?: string;
  values?: string;
}

export interface HelmHelmUserRepositoryResponse {
  GlobalRepository?: string;
  UserRepositories?: PortainereeHelmUserRepository[];
}

export interface HelmAddHelmRepoUrlPayload {
  url?: string;
}

export interface GittypesGitAuthentication {
  /** Git credentials identifier when the value is not 0
When the value is 0, Username and Password are set without using saved credential
This is introduced since 2.15.0 */
  gitCredentialID?: number;
  password?: string;
  username?: string;
}

export interface GittypesRepoConfig {
  /** Git credentials */
  authentication?: GittypesGitAuthentication;
  /** Path to where the config file is in this url/refName */
  configFilePath?: string;
  /** Repository hash */
  configHash?: string;
  /** The reference name */
  referenceName?: string;
  /** TLSSkipVerify skips SSL verification when cloning the Git repository */
  tlsskipVerify?: boolean;
  /** The repo url */
  url?: string;
}

export interface GitopsRepositoryReferenceListPayload {
  gitCredentialID?: number;
  password?: string;
  repository: string;
  stackID?: number;
  /** TLSSkipVerify skips SSL verification when cloning the Git repository */
  tlsskipVerify?: boolean;
  username?: string;
}

export interface GitopsRepositoryFileSearchPayload {
  gitCredentialID?: number;
  /** Allow to provide specific file extension as the search result. If empty, the file extensions yml,yaml,hcl,json will be set by default */
  include?: string;
  /** Partial or completed file name. If empty, all filenames with included extensions will be returned */
  keyword?: string;
  password?: string;
  /** Specific Git repository reference. If empty, the reference ref/heads/main will be set by default */
  reference?: string;
  repository: string;
  /** TLSSkipVerify skips SSL verification when cloning the Git repository */
  tlsskipVerify?: boolean;
  username?: string;
}

export interface GitopsRepositoryFilePreviewPayload {
  gitCredentialID?: number;
  password?: string;
  reference?: string;
  repository: string;
  /** Path to file whose content will be read */
  targetFile?: string;
  /** TLSSkipVerify skips SSL verification when cloning the Git repository */
  tlsskipVerify?: boolean;
  username?: string;
}

export interface GitopsFileResponse {
  fileContent?: string;
}

export interface GithubComPortainerPortainerEeApiHttpHandlerSystemVersionResponse {
  /** The latest version available */
  LatestVersion?: string;
  /** Whether portainer has an update available */
  UpdateAvailable?: boolean;
  build?: GithubComPortainerPortainerEeApiHttpHandlerSystemBuildInfo;
  databaseVersion?: string;
  serverVersion?: string;
}

export interface GithubComPortainerPortainerEeApiHttpHandlerSystemStatus {
  /** Portainer API version */
  Version?: string;
  demoEnvironment?: GithubComPortainerPortainerEeApiDemoEnvironmentDetails;
  /** Server Instance ID */
  instanceID?: string;
}

export interface GithubComPortainerPortainerEeApiHttpHandlerSystemNodesCountResponse {
  nodes?: number;
}

export interface GithubComPortainerPortainerEeApiHttpHandlerSystemBuildInfo {
  buildNumber?: string;
  goVersion?: string;
  imageTag?: string;
  nodejsVersion?: string;
  webpackVersion?: string;
  yarnVersion?: string;
}

export interface GithubComPortainerPortainerEeApiDemoEnvironmentDetails {
  enabled?: boolean;
  environments?: number[];
  users?: number[];
}

export interface FdoFdoConfigurePayload {
  enabled?: boolean;
  ownerPassword?: string;
  ownerURL?: string;
  ownerUsername?: string;
}

export interface FdoDeviceConfigurePayload {
  edgeID?: string;
  edgeKey?: string;
  name?: string;
  profile?: number;
}

export interface EndpointsResourcePoolUpdatePayload {
  teamsToAdd?: number[];
  teamsToRemove?: number[];
  usersToAdd?: number[];
  usersToRemove?: number[];
}

export interface EndpointsRegistryAccessPayload {
  namespaces?: string[];
  teamAccessPolicies?: PortainereeTeamAccessPolicies;
  userAccessPolicies?: PortainereeUserAccessPolicies;
}

export interface EndpointsForceUpdateServicePayload {
  /** PullImage if true will pull the image */
  pullImage?: boolean;
  /** ServiceId to update */
  serviceID?: string;
}

export type EndpointsEndpointUpdatePayloadEdge = {
  /** The command list interval for edge agent - used in edge async mode (in seconds) */
  CommandInterval?: number;
  /** The ping interval for edge agent - used in edge async mode (in seconds) */
  PingInterval?: number;
  /** The snapshot interval for edge agent - used in edge async mode (in seconds) */
  SnapshotInterval?: number;
};

export interface EndpointsEndpointUpdatePayload {
  /** Hide manual deployment forms for an environment */
  DeploymentOptions?: PortainereeDeploymentOptions;
  /** Azure application ID */
  azureApplicationID?: string;
  /** Azure authentication key */
  azureAuthenticationKey?: string;
  /** Azure tenant ID */
  azureTenantID?: string;
  /** Whether automatic update time restrictions are enabled */
  changeWindow?: PortainereeEndpointChangeWindow;
  edge?: EndpointsEndpointUpdatePayloadEdge;
  /** The check in interval for edge agent (in seconds) */
  edgeCheckinInterval?: number;
  /** GPUs information */
  gpus?: PortainereePair[];
  /** Group identifier */
  groupID?: number;
  /** Associated Kubernetes data */
  kubernetes?: PortainereeKubernetesData;
  /** Name that will be used to identify this environment(endpoint) */
  name?: string;
  /** URL or IP address where exposed containers will be reachable.\
Defaults to URL if not specified */
  publicURL?: string;
  /** The status of the environment(endpoint) (1 - up, 2 - down) */
  status?: number;
  /** List of tag identifiers to which this environment(endpoint) is associated */
  tagIDs?: number[];
  teamAccessPolicies?: PortainereeTeamAccessPolicies;
  /** Require TLS to connect against this environment(endpoint) */
  tls?: boolean;
  /** Skip client verification when using TLS */
  tlsskipClientVerify?: boolean;
  /** Skip server verification when using TLS */
  tlsskipVerify?: boolean;
  /** URL or IP address of a Docker host */
  url?: string;
  userAccessPolicies?: PortainereeUserAccessPolicies;
}

/**
 * Security settings updates
 */
export type EndpointsEndpointSettingsUpdatePayloadSecuritySettings = {
  /** Whether non-administrator should be able to use bind mounts when creating containers */
  allowBindMountsForRegularUsers?: boolean;
  /** Whether non-administrator should be able to use container capabilities */
  allowContainerCapabilitiesForRegularUsers?: boolean;
  /** Whether non-administrator should be able to use device mapping */
  allowDeviceMappingForRegularUsers?: boolean;
  /** Whether non-administrator should be able to use the host pid */
  allowHostNamespaceForRegularUsers?: boolean;
  /** Whether non-administrator should be able to use privileged mode when creating containers */
  allowPrivilegedModeForRegularUsers?: boolean;
  /** Whether non-administrator should be able to manage stacks */
  allowStackManagementForRegularUsers?: boolean;
  /** Whether non-administrator should be able to use sysctl settings */
  allowSysctlSettingForRegularUsers?: boolean;
  /** Whether non-administrator should be able to browse volumes */
  allowVolumeBrowserForRegularUsers?: boolean;
  /** Whether host management features are enabled */
  enableHostManagementFeatures?: boolean;
};

export interface EndpointsEndpointSettingsUpdatePayload {
  /** Whether automatic update time restrictions are enabled */
  changeWindow?: PortainereeEndpointChangeWindow;
  /** Hide manual deployment forms for an environment */
  deploymentOptions?: PortainereeDeploymentOptions;
  enableGPUManagement?: boolean;
  enableImageNotification?: boolean;
  gpus?: PortainereePair[];
  /** Security settings updates */
  securitySettings?: EndpointsEndpointSettingsUpdatePayloadSecuritySettings;
}

export interface EndpointsEndpointCreateGlobalKeyResponse {
  endpointID?: number;
}

export interface EndpointsDockerhubStatusResponse {
  /** Daily limit */
  limit?: number;
  /** Remaiming images to pull */
  remaining?: number;
}

export interface EndpointgroupsEndpointGroupUpdatePayload {
  /** Environment(Endpoint) group description */
  description?: string;
  /** Environment(Endpoint) group name */
  name?: string;
  /** List of tag identifiers associated to the environment(endpoint) group */
  tagIDs?: number[];
  teamAccessPolicies?: PortainereeTeamAccessPolicies;
  userAccessPolicies?: PortainereeUserAccessPolicies;
}

export interface EndpointgroupsEndpointGroupCreatePayload {
  /** List of environment(endpoint) identifiers that will be part of this group */
  associatedEndpoints?: number[];
  /** Environment(Endpoint) group description */
  description?: string;
  /** Environment(Endpoint) group name */
  name: string;
  /** List of tag identifiers to which this environment(endpoint) group is associated */
  tagIDs?: number[];
}

export interface EndpointedgeStackStatusResponse {
  /** EdgeStack Identifier */
  id?: number;
  /** Version of this stack */
  version?: number;
}

export interface EndpointedgeGenerateKeyResponse {
  edgeKey?: string;
}

export interface EndpointedgeEdgeJobResponse {
  /** Whether to collect logs */
  CollectLogs?: boolean;
  /** A cron expression to schedule this job */
  CronExpression?: string;
  /** EdgeJob Identifier */
  Id?: number;
  /** Script to run */
  Script?: string;
  /** Version of this EdgeJob */
  Version?: number;
}

export interface EndpointedgeEndpointEdgeStatusInspectResponse {
  /** The current value of CheckinInterval */
  checkin?: number;
  credentials?: string;
  /** The tunnel port */
  port?: number;
  /** List of requests for jobs to run on the environment(endpoint) */
  schedules?: EndpointedgeEdgeJobResponse[];
  /** List of stacks to be deployed on the environments(endpoints) */
  stacks?: EndpointedgeStackStatusResponse[];
  /** Status represents the environment(endpoint) status */
  status?: string;
}

export interface EndpointedgeConfigResponse {
  edgeUpdateID?: number;
  name?: string;
  /** Namespace to use for Kubernetes manifests, leave empty to use the namespaces defined in the manifest */
  namespace?: string;
  prePullImage?: boolean;
  rePullImage?: boolean;
  registryCredentials?: PortainereeEdgeRegistryCredential[];
  retryDeploy?: boolean;
  stackFileContent?: string;
}

export interface EndpointedgeEdgeAsyncResponse {
  commandInterval?: TimeDuration;
  commands?: PortainereeEdgeAsyncCommand[];
  endpointID?: number;
  needFullSnapshot?: boolean;
  pingInterval?: TimeDuration;
  snapshotInterval?: TimeDuration;
}

export interface EdgeupdateschedulesUpdatePayload {
  groupIDs?: number[];
  name?: string;
  registryID?: number;
  scheduledTime?: string;
  type?: TypesUpdateScheduleType;
  version?: string;
}

/**
 * Type of the update (1 - update, 2 - rollback)
 */
export type EdgeupdateschedulesDecoratedUpdateScheduleType =
  typeof EdgeupdateschedulesDecoratedUpdateScheduleType[keyof typeof EdgeupdateschedulesDecoratedUpdateScheduleType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EdgeupdateschedulesDecoratedUpdateScheduleType = {
  NUMBER_1: '1',
  NUMBER_2: '2',
} as const;

export type EdgeupdateschedulesDecoratedUpdateScheduleEnvironmentsPreviousVersions =
  { [key: string]: string };

export interface EdgeupdateschedulesDecoratedUpdateSchedule {
  /** Created timestamp */
  created?: number;
  /** Created by user id */
  createdBy?: number;
  edgeGroupIds?: number[];
  edgeStackId?: number;
  environmentsPreviousVersions?: EdgeupdateschedulesDecoratedUpdateScheduleEnvironmentsPreviousVersions;
  /** EdgeUpdateSchedule Identifier */
  id?: number;
  /** Name of the schedule */
  name?: string;
  /** ID of registry */
  registryId?: number;
  scheduledTime?: string;
  status?: TypesUpdateScheduleStatusType;
  statusMessage?: string;
  /** Type of the update (1 - update, 2 - rollback) */
  type?: EdgeupdateschedulesDecoratedUpdateScheduleType;
  version?: string;
}

export interface EdgeupdateschedulesCreatePayload {
  groupIDs?: number[];
  name?: string;
  registryID?: number;
  scheduledTime?: string;
  type?: TypesUpdateScheduleType;
  version?: string;
}

export interface EdgeupdateschedulesActiveSchedulePayload {
  environmentIDs?: number[];
}

export interface EdgestacksUpdateEdgeStackPayload {
  deploymentType?: PortainereeEdgeStackDeploymentType;
  edgeGroups?: number[];
  prePullImage?: boolean;
  rePullImage?: boolean;
  registries?: number[];
  retryDeploy?: boolean;
  stackFileContent?: string;
  /** Uses the manifest's namespaces instead of the default one */
  useManifestNamespaces?: boolean;
  version?: number;
}

/**
 * Deployment type to deploy this stack
Valid values are: 0 - 'compose', 1 - 'kubernetes', 2 - 'nomad'
for compose stacks will use kompose to convert to kubernetes manifest for kubernetes environments(endpoints)
kubernetes deploy type is enabled only for kubernetes environments(endpoints)
nomad deploy type is enabled only for nomad environments(endpoints)
 */
export type EdgestacksSwarmStackFromGitRepositoryPayloadDeploymentType =
  typeof EdgestacksSwarmStackFromGitRepositoryPayloadDeploymentType[keyof typeof EdgestacksSwarmStackFromGitRepositoryPayloadDeploymentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EdgestacksSwarmStackFromGitRepositoryPayloadDeploymentType = {
  NUMBER_0: '0',
  NUMBER_1: '1',
  NUMBER_2: '2',
} as const;

export interface EdgestacksSwarmStackFromGitRepositoryPayload {
  /** Deployment type to deploy this stack
Valid values are: 0 - 'compose', 1 - 'kubernetes', 2 - 'nomad'
for compose stacks will use kompose to convert to kubernetes manifest for kubernetes environments(endpoints)
kubernetes deploy type is enabled only for kubernetes environments(endpoints)
nomad deploy type is enabled only for nomad environments(endpoints) */
  deploymentType?: EdgestacksSwarmStackFromGitRepositoryPayloadDeploymentType;
  /** List of identifiers of EdgeGroups */
  edgeGroups?: number[];
  /** Path to the Stack file inside the Git repository */
  filePathInRepository?: string;
  /** Name of the stack */
  name: string;
  /** Pre Pull image */
  prePullImage?: boolean;
  /** List of Registries to use for this stack */
  registries?: number[];
  /** Use basic authentication to clone the Git repository */
  repositoryAuthentication?: boolean;
  /** GitCredentialID used to identify the binded git credential */
  repositoryGitCredentialID?: number;
  /** Password used in basic authentication. Required when RepositoryAuthentication is true. */
  repositoryPassword?: string;
  /** Reference name of a Git repository hosting the Stack file */
  repositoryReferenceName?: string;
  /** URL of a Git repository hosting the Stack file */
  repositoryURL: string;
  /** Username used in basic authentication. Required when RepositoryAuthentication is true. */
  repositoryUsername?: string;
  /** Retry deploy */
  retryDeploy?: boolean;
  /** TLSSkipVerify skips SSL verification when cloning the Git repository */
  tlsskipVerify?: boolean;
  /** Uses the manifest's namespaces instead of the default one */
  useManifestNamespaces?: boolean;
}

/**
 * Deployment type to deploy this stack
Valid values are: 0 - 'compose', 1 - 'kubernetes', 2 - 'nomad'
for compose stacks will use kompose to convert to kubernetes manifest for kubernetes environments(endpoints)
kubernetes deploy type is enabled only for kubernetes environments(endpoints)
nomad deploy type is enabled only for nomad environments(endpoints)
 */
export type EdgestacksSwarmStackFromFileContentPayloadDeploymentType =
  typeof EdgestacksSwarmStackFromFileContentPayloadDeploymentType[keyof typeof EdgestacksSwarmStackFromFileContentPayloadDeploymentType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EdgestacksSwarmStackFromFileContentPayloadDeploymentType = {
  NUMBER_0: '0',
  NUMBER_1: '1',
  NUMBER_2: '2',
} as const;

export interface EdgestacksSwarmStackFromFileContentPayload {
  /** Deployment type to deploy this stack
Valid values are: 0 - 'compose', 1 - 'kubernetes', 2 - 'nomad'
for compose stacks will use kompose to convert to kubernetes manifest for kubernetes environments(endpoints)
kubernetes deploy type is enabled only for kubernetes environments(endpoints)
nomad deploy type is enabled only for nomad environments(endpoints) */
  deploymentType?: EdgestacksSwarmStackFromFileContentPayloadDeploymentType;
  /** List of identifiers of EdgeGroups */
  edgeGroups?: number[];
  /** Name of the stack */
  name: string;
  /** Pre Pull image */
  prePullImage?: boolean;
  /** List of Registries to use for this stack */
  registries?: number[];
  /** Retry deploy */
  retryDeploy?: boolean;
  /** Content of the Stack file */
  stackFileContent: string;
  /** Uses the manifest's namespaces instead of the default one */
  useManifestNamespaces?: boolean;
}

export interface EdgestacksStackFileResponse {
  StackFileContent?: string;
}

export interface EdgejobsTaskContainer {
  EndpointId?: number;
  Id?: string;
  LogsStatus?: PortainereeEdgeJobLogsStatus;
}

export interface EdgejobsFileResponse {
  FileContent?: string;
}

export interface EdgejobsEdgeJobUpdatePayload {
  cronExpression?: string;
  edgeGroups?: number[];
  endpoints?: number[];
  fileContent?: string;
  name?: string;
  recurring?: boolean;
}

export interface EdgejobsEdgeJobFileResponse {
  FileContent?: string;
}

export interface EdgejobsEdgeJobCreateFromFileContentPayload {
  cronExpression?: string;
  edgeGroups?: number[];
  endpoints?: number[];
  fileContent?: string;
  name?: string;
  recurring?: boolean;
}

export interface EdgegroupsEdgeGroupUpdatePayload {
  dynamic?: boolean;
  endpoints?: number[];
  name?: string;
  partialMatch?: boolean;
  tagIDs?: number[];
}

export interface EdgegroupsEdgeGroupCreatePayload {
  dynamic?: boolean;
  endpoints?: number[];
  name?: string;
  partialMatch?: boolean;
  tagIDs?: number[];
}

export interface EdgegroupsDecoratedEdgeGroup {
  Dynamic?: boolean;
  Endpoints?: number[];
  HasEdgeGroup?: boolean;
  HasEdgeStack?: boolean;
  /** EdgeGroup Identifier */
  Id?: number;
  Name?: string;
  PartialMatch?: boolean;
  TagIds?: number[];
  endpointTypes?: PortainereeEndpointType[];
}

export interface CustomtemplatesFileResponse {
  fileContent?: string;
}

/**
 * Type of created stack (1 - swarm, 2 - compose, 3 - kubernetes)
 */
export type CustomtemplatesCustomTemplateUpdatePayloadType =
  typeof CustomtemplatesCustomTemplateUpdatePayloadType[keyof typeof CustomtemplatesCustomTemplateUpdatePayloadType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomtemplatesCustomTemplateUpdatePayloadType = {
  NUMBER_1: '1',
  NUMBER_2: '2',
  NUMBER_3: '3',
} as const;

/**
 * Platform associated to the template.
Valid values are: 1 - 'linux', 2 - 'windows'
Required for Docker stacks
 */
export type CustomtemplatesCustomTemplateUpdatePayloadPlatform =
  typeof CustomtemplatesCustomTemplateUpdatePayloadPlatform[keyof typeof CustomtemplatesCustomTemplateUpdatePayloadPlatform];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomtemplatesCustomTemplateUpdatePayloadPlatform = {
  NUMBER_1: '1',
  NUMBER_2: '2',
} as const;

export interface CustomtemplatesCustomTemplateUpdatePayload {
  /** Path to the Stack file inside the Git repository */
  composeFilePathInRepository?: string;
  /** Description of the template */
  description: string;
  /** Content of stack file */
  fileContent: string;
  /** IsComposeFormat indicates if the Kubernetes template is created from a Docker Compose file */
  isComposeFormat?: boolean;
  /** URL of the template's logo */
  logo?: string;
  /** A note that will be displayed in the UI. Supports HTML content */
  note?: string;
  /** Platform associated to the template.
Valid values are: 1 - 'linux', 2 - 'windows'
Required for Docker stacks */
  platform?: CustomtemplatesCustomTemplateUpdatePayloadPlatform;
  /** Use basic authentication to clone the Git repository */
  repositoryAuthentication?: boolean;
  /** GitCredentialID used to identify the bound git credential. Required when RepositoryAuthentication
is true and RepositoryUsername/RepositoryPassword are not provided */
  repositoryGitCredentialID?: number;
  /** Password used in basic authentication. Required when RepositoryAuthentication is true
and RepositoryGitCredentialID is 0 */
  repositoryPassword?: string;
  /** Reference name of a Git repository hosting the Stack file */
  repositoryReferenceName?: string;
  /** URL of a Git repository hosting the Stack file */
  repositoryURL: string;
  /** Username used in basic authentication. Required when RepositoryAuthentication is true
and RepositoryGitCredentialID is 0 */
  repositoryUsername?: string;
  /** Title of the template */
  title: string;
  /** Type of created stack (1 - swarm, 2 - compose, 3 - kubernetes) */
  type: CustomtemplatesCustomTemplateUpdatePayloadType;
  /** Definitions of variables in the stack file */
  variables?: PortainereeCustomTemplateVariableDefinition[];
}

/**
 * Type of created stack (1 - swarm, 2 - compose)
 */
export type CustomtemplatesCustomTemplateFromGitRepositoryPayloadType =
  typeof CustomtemplatesCustomTemplateFromGitRepositoryPayloadType[keyof typeof CustomtemplatesCustomTemplateFromGitRepositoryPayloadType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomtemplatesCustomTemplateFromGitRepositoryPayloadType = {
  NUMBER_1: '1',
  NUMBER_2: '2',
} as const;

/**
 * Platform associated to the template.
Valid values are: 1 - 'linux', 2 - 'windows'
Required for Docker stacks
 */
export type CustomtemplatesCustomTemplateFromGitRepositoryPayloadPlatform =
  typeof CustomtemplatesCustomTemplateFromGitRepositoryPayloadPlatform[keyof typeof CustomtemplatesCustomTemplateFromGitRepositoryPayloadPlatform];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomtemplatesCustomTemplateFromGitRepositoryPayloadPlatform = {
  NUMBER_1: '1',
  NUMBER_2: '2',
} as const;

export interface CustomtemplatesCustomTemplateFromGitRepositoryPayload {
  /** Path to the Stack file inside the Git repository */
  composeFilePathInRepository?: string;
  /** Description of the template */
  description: string;
  /** IsComposeFormat indicates if the Kubernetes template is created from a Docker Compose file */
  isComposeFormat?: boolean;
  /** URL of the template's logo */
  logo?: string;
  /** A note that will be displayed in the UI. Supports HTML content */
  note?: string;
  /** Platform associated to the template.
Valid values are: 1 - 'linux', 2 - 'windows'
Required for Docker stacks */
  platform?: CustomtemplatesCustomTemplateFromGitRepositoryPayloadPlatform;
  /** Use basic authentication to clone the Git repository */
  repositoryAuthentication?: boolean;
  /** GitCredentialID used to identify the bound git credential. Required when RepositoryAuthentication
is true and RepositoryUsername/RepositoryPassword are not provided */
  repositoryGitCredentialID?: number;
  /** Password used in basic authentication. Required when RepositoryAuthentication is true
and RepositoryGitCredentialID is 0 */
  repositoryPassword?: string;
  /** Reference name of a Git repository hosting the Stack file */
  repositoryReferenceName?: string;
  /** URL of a Git repository hosting the Stack file */
  repositoryURL: string;
  /** Username used in basic authentication. Required when RepositoryAuthentication is true
and RepositoryGitCredentialID is 0 */
  repositoryUsername?: string;
  /** Title of the template */
  title: string;
  /** TLSSkipVerify skips SSL verification when cloning the Git repository */
  tlsskipVerify?: boolean;
  /** Type of created stack (1 - swarm, 2 - compose) */
  type: CustomtemplatesCustomTemplateFromGitRepositoryPayloadType;
  /** Definitions of variables in the stack file */
  variables?: PortainereeCustomTemplateVariableDefinition[];
}

/**
 * Type of created stack (1 - swarm, 2 - compose, 3 - kubernetes)
 */
export type CustomtemplatesCustomTemplateFromFileContentPayloadType =
  typeof CustomtemplatesCustomTemplateFromFileContentPayloadType[keyof typeof CustomtemplatesCustomTemplateFromFileContentPayloadType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomtemplatesCustomTemplateFromFileContentPayloadType = {
  NUMBER_1: '1',
  NUMBER_2: '2',
  NUMBER_3: '3',
} as const;

/**
 * Platform associated to the template.
Valid values are: 1 - 'linux', 2 - 'windows'
Required for Docker stacks
 */
export type CustomtemplatesCustomTemplateFromFileContentPayloadPlatform =
  typeof CustomtemplatesCustomTemplateFromFileContentPayloadPlatform[keyof typeof CustomtemplatesCustomTemplateFromFileContentPayloadPlatform];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CustomtemplatesCustomTemplateFromFileContentPayloadPlatform = {
  NUMBER_1: '1',
  NUMBER_2: '2',
} as const;

export interface CustomtemplatesCustomTemplateFromFileContentPayload {
  /** Description of the template */
  description: string;
  /** Content of stack file */
  fileContent: string;
  /** URL of the template's logo */
  logo?: string;
  /** A note that will be displayed in the UI. Supports HTML content */
  note?: string;
  /** Platform associated to the template.
Valid values are: 1 - 'linux', 2 - 'windows'
Required for Docker stacks */
  platform?: CustomtemplatesCustomTemplateFromFileContentPayloadPlatform;
  /** Title of the template */
  title: string;
  /** Type of created stack (1 - swarm, 2 - compose, 3 - kubernetes) */
  type: CustomtemplatesCustomTemplateFromFileContentPayloadType;
  /** Definitions of variables in the stack file */
  variables?: PortainereeCustomTemplateVariableDefinition[];
}

export interface ContainersContainerGpusResponse {
  gpus?: string;
}

export interface ChatChatQueryResponse {
  /** Message is the message that is returned by the OpenAI API. */
  message?: string;
  /** Yaml is the content of the compose / kubernetes manifest file that was generated by the OpenAI API as part of the response. */
  yaml?: string;
}

export interface ChatChatQueryPayload {
  /** Context is used to build a context that will be added to the prompt sent to OpenAI.
Only accepts a list of specific values:
environment_aware will create a context based on environment information (EnvironmentID parameter is mandatory). */
  context: string;
  /** EnvironmentID is the ID of the environment for which the chat query is being made
it will be used to retrieve context information about the environment and pass it to then OpenAI API.
Mandatory when environment_aware context is used. */
  environmentID?: number;
  /** Message is the message that will be forwarded to the OpenAI API. */
  message: string;
  /** Model is the name of the OpenAI model that will be used to generate the response.
Only accepts a list of specific values: text-davinci-003, gpt-3.5-turbo, gpt-4
Note that the use of the GPT-4 model requires access to its API.
Optional: will default to gpt-3.5-turbo if not provided. */
  model?: string;
}

export interface BackupS3BackupPayload {
  /** AWS access key id */
  accessKeyID?: string;
  /** AWS S3 bucket name */
  bucketName?: string;
  /** Crontab rule to make periodical backups */
  cronRule?: string;
  /** Password to encrypt the backup with */
  password?: string;
  /** AWS S3 region. Default to "us-east-1" */
  region?: string;
  /** S3 compatible host */
  s3CompatibleHost?: string;
  /** AWS secret access key */
  secretAccessKey?: string;
}

export interface BackupRestoreS3Settings {
  /** AWS access key id */
  accessKeyID?: string;
  /** AWS S3 bucket name */
  bucketName?: string;
  /** AWS S3 filename in the bucket */
  filename?: string;
  password?: string;
  /** AWS S3 region. Default to "us-east-1" */
  region?: string;
  /** S3 compatible host */
  s3CompatibleHost?: string;
  /** AWS secret access key */
  secretAccessKey?: string;
}

export interface BackupRestorePayload {
  /** Content of the backup */
  fileContent: number[];
  /** File name */
  fileName: string;
  /** Password to decrypt the backup with */
  password?: string;
}

export interface BackupBackupStatus {
  failed?: boolean;
  timestampUTC?: string;
}

export interface BackupBackupPayload {
  password?: string;
}

export interface AuthOauthPayload {
  /** OAuth code returned from OAuth Provided */
  code?: string;
}

export interface AuthAuthenticateResponse {
  /** JWT token used to authenticate against the API */
  jwt?: string;
}

export interface AuthAuthenticatePayload {
  /** Password */
  password: string;
  /** Username */
  username: string;
}
