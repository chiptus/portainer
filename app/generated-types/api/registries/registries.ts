/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * PortainerEE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.
Examples are available at https://documentation.portainer.io/api/api-examples/
You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).

# Authentication

Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.
Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request
with the **Bearer** authentication mechanism.

Example:

```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE
```

# Security

Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).

Different access policies are available:

- Public access
- Authenticated access
- Restricted access
- Administrator access

### Public access

No authentication is required to access the environments(endpoints) with this access policy.

### Authenticated access

Authentication is required to access the environments(endpoints) with this access policy.

### Restricted access

Authentication is required to access the environments(endpoints) with this access policy.
Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.

### Administrator access

Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.

# Execute Docker requests

Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).

Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.

To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).

# Private Registry

Using private registry, you will need to pass a based64 encoded JSON string ‚Äò{"registryId":\<registryID value\>}‚Äô inside the Request Header. The parameter name is "X-Registry-Auth".
\<registryID value\> - The registry ID where the repository was created.

Example:

```
eyJyZWdpc3RyeUlkIjoxfQ==
```

**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).

 * OpenAPI spec version: 2.19.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  PortainereeRegistry,
  RegistriesRegistryCreatePayload,
  RegistriesRegistryUpdatePayload,
  RegistriesRegistryConfigurePayload,
  RegistriesDeleteTagsPayload,
} from '../portainerEEAPI.schemas';

/**
 * List all registries based on the current user authorizations.
Will return all registries if using an administrator account otherwise it
will only return authorized registries.
**Access policy**: restricted
 * @summary List Registries
 */
export const registryList = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeRegistry[]>> =>
  axios.get(`/registries`, options);

export const getRegistryListQueryKey = () => [`/registries`] as const;

export const getRegistryListQueryOptions = <
  TData = Awaited<ReturnType<typeof registryList>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof registryList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<Awaited<ReturnType<typeof registryList>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRegistryListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof registryList>>> = ({
    signal,
  }) => registryList({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type RegistryListQueryResult = NonNullable<
  Awaited<ReturnType<typeof registryList>>
>;
export type RegistryListQueryError = AxiosError<void>;

export const useRegistryList = <
  TData = Awaited<ReturnType<typeof registryList>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof registryList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getRegistryListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a new registry.
 **Access policy**: restricted
 * @summary Create a new registry
 */
export const registryCreate = (
  registriesRegistryCreatePayload: RegistriesRegistryCreatePayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeRegistry>> =>
  axios.post(`/registries`, registriesRegistryCreatePayload, options);

export const getRegistryCreateMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registryCreate>>,
    TError,
    { data: RegistriesRegistryCreatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registryCreate>>,
  TError,
  { data: RegistriesRegistryCreatePayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registryCreate>>,
    { data: RegistriesRegistryCreatePayload }
  > = (props) => {
    const { data } = props ?? {};

    return registryCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegistryCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof registryCreate>>
>;
export type RegistryCreateMutationBody = RegistriesRegistryCreatePayload;
export type RegistryCreateMutationError = AxiosError<void>;

export const useRegistryCreate = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registryCreate>>,
    TError,
    { data: RegistriesRegistryCreatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getRegistryCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Remove a registry
 **Access policy**: restricted
 * @summary Remove a registry
 */
export const registryDelete = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => axios.delete(`/registries/${id}`, options);

export const getRegistryDeleteMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registryDelete>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registryDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registryDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return registryDelete(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegistryDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof registryDelete>>
>;

export type RegistryDeleteMutationError = AxiosError<unknown>;

export const useRegistryDelete = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registryDelete>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getRegistryDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve details about a registry.
 **Access policy**: restricted
 * @summary Inspect a registry
 */
export const registryInspect = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeRegistry>> =>
  axios.get(`/registries/${id}`, options);

export const getRegistryInspectQueryKey = (id: number) =>
  [`/registries/${id}`] as const;

export const getRegistryInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof registryInspect>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof registryInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof registryInspect>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRegistryInspectQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof registryInspect>>> = ({
    signal,
  }) => registryInspect(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type RegistryInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof registryInspect>>
>;
export type RegistryInspectQueryError = AxiosError<void>;

export const useRegistryInspect = <
  TData = Awaited<ReturnType<typeof registryInspect>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof registryInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getRegistryInspectQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update a registry
 **Access policy**: restricted
 * @summary Update a registry
 */
export const registryUpdate = (
  id: number,
  registriesRegistryUpdatePayload: RegistriesRegistryUpdatePayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeRegistry>> =>
  axios.put(`/registries/${id}`, registriesRegistryUpdatePayload, options);

export const getRegistryUpdateMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registryUpdate>>,
    TError,
    { id: number; data: RegistriesRegistryUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registryUpdate>>,
  TError,
  { id: number; data: RegistriesRegistryUpdatePayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registryUpdate>>,
    { id: number; data: RegistriesRegistryUpdatePayload }
  > = (props) => {
    const { id, data } = props ?? {};

    return registryUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegistryUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof registryUpdate>>
>;
export type RegistryUpdateMutationBody = RegistriesRegistryUpdatePayload;
export type RegistryUpdateMutationError = AxiosError<void>;

export const useRegistryUpdate = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registryUpdate>>,
    TError,
    { id: number; data: RegistriesRegistryUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getRegistryUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Configures a registry.
 **Access policy**: restricted
 * @summary Configures a registry
 */
export const registryConfigure = (
  id: number,
  registriesRegistryConfigurePayload: RegistriesRegistryConfigurePayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(
    `/registries/${id}/configure`,
    registriesRegistryConfigurePayload,
    options
  );

export const getRegistryConfigureMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registryConfigure>>,
    TError,
    { id: number; data: RegistriesRegistryConfigurePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registryConfigure>>,
  TError,
  { id: number; data: RegistriesRegistryConfigurePayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registryConfigure>>,
    { id: number; data: RegistriesRegistryConfigurePayload }
  > = (props) => {
    const { id, data } = props ?? {};

    return registryConfigure(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegistryConfigureMutationResult = NonNullable<
  Awaited<ReturnType<typeof registryConfigure>>
>;
export type RegistryConfigureMutationBody = RegistriesRegistryConfigurePayload;
export type RegistryConfigureMutationError = AxiosError<unknown>;

export const useRegistryConfigure = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registryConfigure>>,
    TError,
    { id: number; data: RegistriesRegistryConfigurePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getRegistryConfigureMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete ECR repository.
 **Access policy**: restricted
 * @summary Delete ECR repository
 */
export const ecrDeleteRepository = (
  id: number,
  repositoryName: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.delete(`/registries/${id}/ecr/repositories/${repositoryName}`, options);

export const getEcrDeleteRepositoryMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ecrDeleteRepository>>,
    TError,
    { id: number; repositoryName: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ecrDeleteRepository>>,
  TError,
  { id: number; repositoryName: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ecrDeleteRepository>>,
    { id: number; repositoryName: string }
  > = (props) => {
    const { id, repositoryName } = props ?? {};

    return ecrDeleteRepository(id, repositoryName, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EcrDeleteRepositoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof ecrDeleteRepository>>
>;

export type EcrDeleteRepositoryMutationError = AxiosError<unknown>;

export const useEcrDeleteRepository = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ecrDeleteRepository>>,
    TError,
    { id: number; repositoryName: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEcrDeleteRepositoryMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Delete tags for a given ECR repository
 **Access policy**: restricted
 * @summary Delete tags
 */
export const ecrDeleteTags = (
  id: number,
  repositoryName: number,
  registriesDeleteTagsPayload: RegistriesDeleteTagsPayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.delete(`/registries/${id}/ecr/repositories/${repositoryName}/tags`, {
    data: registriesDeleteTagsPayload,
    ...options,
  });

export const getEcrDeleteTagsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ecrDeleteTags>>,
    TError,
    { id: number; repositoryName: number; data: RegistriesDeleteTagsPayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof ecrDeleteTags>>,
  TError,
  { id: number; repositoryName: number; data: RegistriesDeleteTagsPayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof ecrDeleteTags>>,
    { id: number; repositoryName: number; data: RegistriesDeleteTagsPayload }
  > = (props) => {
    const { id, repositoryName, data } = props ?? {};

    return ecrDeleteTags(id, repositoryName, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EcrDeleteTagsMutationResult = NonNullable<
  Awaited<ReturnType<typeof ecrDeleteTags>>
>;
export type EcrDeleteTagsMutationBody = RegistriesDeleteTagsPayload;
export type EcrDeleteTagsMutationError = AxiosError<unknown>;

export const useEcrDeleteTags = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof ecrDeleteTags>>,
    TError,
    { id: number; repositoryName: number; data: RegistriesDeleteTagsPayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getEcrDeleteTagsMutationOptions(options);

  return useMutation(mutationOptions);
};
