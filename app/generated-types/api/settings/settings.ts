/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * PortainerEE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.
Examples are available at https://documentation.portainer.io/api/api-examples/
You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).

# Authentication

Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.
Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request
with the **Bearer** authentication mechanism.

Example:

```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE
```

# Security

Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).

Different access policies are available:

- Public access
- Authenticated access
- Restricted access
- Administrator access

### Public access

No authentication is required to access the environments(endpoints) with this access policy.

### Authenticated access

Authentication is required to access the environments(endpoints) with this access policy.

### Restricted access

Authentication is required to access the environments(endpoints) with this access policy.
Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.

### Administrator access

Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.

# Execute Docker requests

Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).

Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.

To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).

# Private Registry

Using private registry, you will need to pass a based64 encoded JSON string ‚Äò{"registryId":\<registryID value\>}‚Äô inside the Request Header. The parameter name is "X-Registry-Auth".
\<registryID value\> - The registry ID where the repository was created.

Example:

```
eyJyZWdpc3RyeUlkIjoxfQ==
```

**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).

 * OpenAPI spec version: 2.19.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  PortainereeSettings,
  SettingsSettingsUpdatePayload,
  SettingsSettingsExperimentalInspectResponse,
  SettingsSettingsExperimentalUpdatePayload,
  SettingsPublicSettingsResponse,
} from '../portainerEEAPI.schemas';

/**
 * Retrieve Portainer settings.
 **Access policy**: administrator
 * @summary Retrieve Portainer settings
 */
export const settingsInspect = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeSettings>> =>
  axios.get(`/settings`, options);

export const getSettingsInspectQueryKey = () => [`/settings`] as const;

export const getSettingsInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof settingsInspect>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof settingsInspect>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof settingsInspect>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSettingsInspectQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof settingsInspect>>> = ({
    signal,
  }) => settingsInspect({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type SettingsInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof settingsInspect>>
>;
export type SettingsInspectQueryError = AxiosError<void>;

export const useSettingsInspect = <
  TData = Awaited<ReturnType<typeof settingsInspect>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof settingsInspect>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSettingsInspectQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update Portainer settings.
 **Access policy**: administrator
 * @summary Update Portainer settings
 */
export const settingsUpdate = (
  settingsSettingsUpdatePayload: SettingsSettingsUpdatePayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeSettings>> =>
  axios.put(`/settings`, settingsSettingsUpdatePayload, options);

export const getSettingsUpdateMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof settingsUpdate>>,
    TError,
    { data: SettingsSettingsUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof settingsUpdate>>,
  TError,
  { data: SettingsSettingsUpdatePayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof settingsUpdate>>,
    { data: SettingsSettingsUpdatePayload }
  > = (props) => {
    const { data } = props ?? {};

    return settingsUpdate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SettingsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof settingsUpdate>>
>;
export type SettingsUpdateMutationBody = SettingsSettingsUpdatePayload;
export type SettingsUpdateMutationError = AxiosError<void>;

export const useSettingsUpdate = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof settingsUpdate>>,
    TError,
    { data: SettingsSettingsUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getSettingsUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve Portainer experimental settings.
 **Access policy**: authenticated
 * @summary Retrieve Portainer experimental settings
 */
export const settingsExperimentalInspect = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SettingsSettingsExperimentalInspectResponse>> =>
  axios.get(`/settings/experimental`, options);

export const getSettingsExperimentalInspectQueryKey = () =>
  [`/settings/experimental`] as const;

export const getSettingsExperimentalInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof settingsExperimentalInspect>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof settingsExperimentalInspect>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof settingsExperimentalInspect>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSettingsExperimentalInspectQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof settingsExperimentalInspect>>
  > = ({ signal }) => settingsExperimentalInspect({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type SettingsExperimentalInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof settingsExperimentalInspect>>
>;
export type SettingsExperimentalInspectQueryError = AxiosError<void>;

export const useSettingsExperimentalInspect = <
  TData = Awaited<ReturnType<typeof settingsExperimentalInspect>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof settingsExperimentalInspect>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSettingsExperimentalInspectQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Update Portainer experimental settings.
 **Access policy**: administrator
 * @summary Update Portainer experimental settings
 */
export const settingsExperimentalUpdate = (
  settingsSettingsExperimentalUpdatePayload: SettingsSettingsExperimentalUpdatePayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.put(
    `/settings/experimental`,
    settingsSettingsExperimentalUpdatePayload,
    options
  );

export const getSettingsExperimentalUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof settingsExperimentalUpdate>>,
    TError,
    { data: SettingsSettingsExperimentalUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof settingsExperimentalUpdate>>,
  TError,
  { data: SettingsSettingsExperimentalUpdatePayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof settingsExperimentalUpdate>>,
    { data: SettingsSettingsExperimentalUpdatePayload }
  > = (props) => {
    const { data } = props ?? {};

    return settingsExperimentalUpdate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SettingsExperimentalUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof settingsExperimentalUpdate>>
>;
export type SettingsExperimentalUpdateMutationBody =
  SettingsSettingsExperimentalUpdatePayload;
export type SettingsExperimentalUpdateMutationError = AxiosError<unknown>;

export const useSettingsExperimentalUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof settingsExperimentalUpdate>>,
    TError,
    { data: SettingsSettingsExperimentalUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getSettingsExperimentalUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Retrieve public settings. Returns a small set of settings that are not reserved to administrators only.
 **Access policy**: public
 * @summary Retrieve Portainer public settings
 */
export const settingsPublic = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SettingsPublicSettingsResponse>> =>
  axios.get(`/settings/public`, options);

export const getSettingsPublicQueryKey = () => [`/settings/public`] as const;

export const getSettingsPublicQueryOptions = <
  TData = Awaited<ReturnType<typeof settingsPublic>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof settingsPublic>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof settingsPublic>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSettingsPublicQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof settingsPublic>>> = ({
    signal,
  }) => settingsPublic({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type SettingsPublicQueryResult = NonNullable<
  Awaited<ReturnType<typeof settingsPublic>>
>;
export type SettingsPublicQueryError = AxiosError<void>;

export const useSettingsPublic = <
  TData = Awaited<ReturnType<typeof settingsPublic>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof settingsPublic>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSettingsPublicQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
