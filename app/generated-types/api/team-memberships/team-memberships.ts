/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * PortainerEE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.
Examples are available at https://documentation.portainer.io/api/api-examples/
You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).

# Authentication

Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.
Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request
with the **Bearer** authentication mechanism.

Example:

```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE
```

# Security

Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).

Different access policies are available:

- Public access
- Authenticated access
- Restricted access
- Administrator access

### Public access

No authentication is required to access the environments(endpoints) with this access policy.

### Authenticated access

Authentication is required to access the environments(endpoints) with this access policy.

### Restricted access

Authentication is required to access the environments(endpoints) with this access policy.
Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.

### Administrator access

Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.

# Execute Docker requests

Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).

Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.

To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).

# Private Registry

Using private registry, you will need to pass a based64 encoded JSON string ‚Äò{"registryId":\<registryID value\>}‚Äô inside the Request Header. The parameter name is "X-Registry-Auth".
\<registryID value\> - The registry ID where the repository was created.

Example:

```
eyJyZWdpc3RyeUlkIjoxfQ==
```

**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).

 * OpenAPI spec version: 2.19.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  PortainereeTeamMembership,
  TeammembershipsTeamMembershipCreatePayload,
  TeammembershipsTeamMembershipUpdatePayload,
} from '../portainerEEAPI.schemas';

/**
 * List team memberships. Access is only available to administrators and team leaders.
 **Access policy**: administrator
 * @summary List team memberships
 */
export const teamMembershipList = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeTeamMembership[]>> =>
  axios.get(`/team_memberships`, options);

export const getTeamMembershipListQueryKey = () =>
  [`/team_memberships`] as const;

export const getTeamMembershipListQueryOptions = <
  TData = Awaited<ReturnType<typeof teamMembershipList>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof teamMembershipList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof teamMembershipList>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTeamMembershipListQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof teamMembershipList>>
  > = ({ signal }) => teamMembershipList({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type TeamMembershipListQueryResult = NonNullable<
  Awaited<ReturnType<typeof teamMembershipList>>
>;
export type TeamMembershipListQueryError = AxiosError<void>;

export const useTeamMembershipList = <
  TData = Awaited<ReturnType<typeof teamMembershipList>>,
  TError = AxiosError<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof teamMembershipList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTeamMembershipListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Create a new team memberships. Access is only available to administrators leaders of the associated team.
 **Access policy**: administrator
 * @summary Create a new team membership
 */
export const teamMembershipCreate = (
  teammembershipsTeamMembershipCreatePayload: TeammembershipsTeamMembershipCreatePayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeTeamMembership | void>> =>
  axios.post(
    `/team_memberships`,
    teammembershipsTeamMembershipCreatePayload,
    options
  );

export const getTeamMembershipCreateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teamMembershipCreate>>,
    TError,
    { data: TeammembershipsTeamMembershipCreatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof teamMembershipCreate>>,
  TError,
  { data: TeammembershipsTeamMembershipCreatePayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof teamMembershipCreate>>,
    { data: TeammembershipsTeamMembershipCreatePayload }
  > = (props) => {
    const { data } = props ?? {};

    return teamMembershipCreate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TeamMembershipCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof teamMembershipCreate>>
>;
export type TeamMembershipCreateMutationBody =
  TeammembershipsTeamMembershipCreatePayload;
export type TeamMembershipCreateMutationError = AxiosError<unknown>;

export const useTeamMembershipCreate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teamMembershipCreate>>,
    TError,
    { data: TeammembershipsTeamMembershipCreatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getTeamMembershipCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Remove a team membership. Access is only available to administrators leaders of the associated team.
 **Access policy**: administrator
 * @summary Remove a team membership
 */
export const teamMembershipDelete = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.delete(`/team_memberships/${id}`, options);

export const getTeamMembershipDeleteMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teamMembershipDelete>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof teamMembershipDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof teamMembershipDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return teamMembershipDelete(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TeamMembershipDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof teamMembershipDelete>>
>;

export type TeamMembershipDeleteMutationError = AxiosError<unknown>;

export const useTeamMembershipDelete = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teamMembershipDelete>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getTeamMembershipDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Update a team membership. Access is only available to administrators or leaders of the associated team.
 **Access policy**: administrator or leaders of the associated team
 * @summary Update a team membership
 */
export const teamMembershipUpdate = (
  id: number,
  teammembershipsTeamMembershipUpdatePayload: TeammembershipsTeamMembershipUpdatePayload,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeTeamMembership>> =>
  axios.put(
    `/team_memberships/${id}`,
    teammembershipsTeamMembershipUpdatePayload,
    options
  );

export const getTeamMembershipUpdateMutationOptions = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teamMembershipUpdate>>,
    TError,
    { id: number; data: TeammembershipsTeamMembershipUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof teamMembershipUpdate>>,
  TError,
  { id: number; data: TeammembershipsTeamMembershipUpdatePayload },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof teamMembershipUpdate>>,
    { id: number; data: TeammembershipsTeamMembershipUpdatePayload }
  > = (props) => {
    const { id, data } = props ?? {};

    return teamMembershipUpdate(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type TeamMembershipUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof teamMembershipUpdate>>
>;
export type TeamMembershipUpdateMutationBody =
  TeammembershipsTeamMembershipUpdatePayload;
export type TeamMembershipUpdateMutationError = AxiosError<void>;

export const useTeamMembershipUpdate = <
  TError = AxiosError<void>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teamMembershipUpdate>>,
    TError,
    { id: number; data: TeammembershipsTeamMembershipUpdatePayload },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getTeamMembershipUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * List team memberships. Access is only available to administrators and team leaders.
 **Access policy**: restricted
 * @summary List team memberships
 */
export const teamMemberships = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PortainereeTeamMembership[]>> =>
  axios.get(`/teams/${id}/memberships`, options);

export const getTeamMembershipsQueryKey = (id: number) =>
  [`/teams/${id}/memberships`] as const;

export const getTeamMembershipsQueryOptions = <
  TData = Awaited<ReturnType<typeof teamMemberships>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof teamMemberships>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof teamMemberships>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTeamMembershipsQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teamMemberships>>> = ({
    signal,
  }) => teamMemberships(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type TeamMembershipsQueryResult = NonNullable<
  Awaited<ReturnType<typeof teamMemberships>>
>;
export type TeamMembershipsQueryError = AxiosError<void>;

export const useTeamMemberships = <
  TData = Awaited<ReturnType<typeof teamMemberships>>,
  TError = AxiosError<void>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof teamMemberships>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTeamMembershipsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
