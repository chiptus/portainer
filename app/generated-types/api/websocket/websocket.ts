/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * PortainerEE API
 * Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API.
Examples are available at https://documentation.portainer.io/api/api-examples/
You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).

# Authentication

Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used.
Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request
with the **Bearer** authentication mechanism.

Example:

```
Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE
```

# Security

Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).

Different access policies are available:

- Public access
- Authenticated access
- Restricted access
- Administrator access

### Public access

No authentication is required to access the environments(endpoints) with this access policy.

### Authenticated access

Authentication is required to access the environments(endpoints) with this access policy.

### Restricted access

Authentication is required to access the environments(endpoints) with this access policy.
Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.

### Administrator access

Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.

# Execute Docker requests

Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).

Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.

To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).

# Private Registry

Using private registry, you will need to pass a based64 encoded JSON string ‚Äò{"registryId":\<registryID value\>}‚Äô inside the Request Header. The parameter name is "X-Registry-Auth".
\<registryID value\> - The registry ID where the repository was created.

Example:

```
eyJyZWdpc3RyeUlkIjoxfQ==
```

**NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).

 * OpenAPI spec version: 2.19.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery } from 'react-query';
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  GetWebsocketAttachParams,
  GetWebsocketExecParams,
  GetWebsocketKubernetesShellParams,
  GetWebsocketPodParams,
} from '../portainerEEAPI.schemas';

/**
 * If the nodeName query parameter is present, the request will be proxied to the underlying agent environment(endpoint).
If the nodeName query parameter is not specified, the request will be upgraded to the websocket protocol and
an AttachStart operation HTTP request will be created and hijacked.
**Access policy**: authenticated
 * @summary Attach a websocket
 */
export const getWebsocketAttach = (
  params: GetWebsocketAttachParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.get(`/websocket/attach`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getGetWebsocketAttachQueryKey = (
  params: GetWebsocketAttachParams
) => [`/websocket/attach`, ...(params ? [params] : [])] as const;

export const getGetWebsocketAttachQueryOptions = <
  TData = Awaited<ReturnType<typeof getWebsocketAttach>>,
  TError = AxiosError<unknown>
>(
  params: GetWebsocketAttachParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWebsocketAttach>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getWebsocketAttach>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetWebsocketAttachQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWebsocketAttach>>
  > = ({ signal }) => getWebsocketAttach(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type GetWebsocketAttachQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWebsocketAttach>>
>;
export type GetWebsocketAttachQueryError = AxiosError<unknown>;

export const useGetWebsocketAttach = <
  TData = Awaited<ReturnType<typeof getWebsocketAttach>>,
  TError = AxiosError<unknown>
>(
  params: GetWebsocketAttachParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWebsocketAttach>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWebsocketAttachQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * If the nodeName query parameter is present, the request will be proxied to the underlying agent environment(endpoint).
If the nodeName query parameter is not specified, the request will be upgraded to the websocket protocol and
an ExecStart operation HTTP request will be created and hijacked.
 * @summary Execute a websocket
 */
export const getWebsocketExec = (
  params: GetWebsocketExecParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.get(`/websocket/exec`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getGetWebsocketExecQueryKey = (params: GetWebsocketExecParams) =>
  [`/websocket/exec`, ...(params ? [params] : [])] as const;

export const getGetWebsocketExecQueryOptions = <
  TData = Awaited<ReturnType<typeof getWebsocketExec>>,
  TError = AxiosError<unknown>
>(
  params: GetWebsocketExecParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWebsocketExec>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getWebsocketExec>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetWebsocketExecQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWebsocketExec>>
  > = ({ signal }) => getWebsocketExec(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type GetWebsocketExecQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWebsocketExec>>
>;
export type GetWebsocketExecQueryError = AxiosError<unknown>;

export const useGetWebsocketExec = <
  TData = Awaited<ReturnType<typeof getWebsocketExec>>,
  TError = AxiosError<unknown>
>(
  params: GetWebsocketExecParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWebsocketExec>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWebsocketExecQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * The request will be upgraded to the websocket protocol. The request will proxy input from the client to the pod via long-lived websocket connection.
 **Access policy**: authenticated
 * @summary Execute a websocket on kubectl shell pod
 */
export const getWebsocketKubernetesShell = (
  params: GetWebsocketKubernetesShellParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.get(`/websocket/kubernetes-shell`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getGetWebsocketKubernetesShellQueryKey = (
  params: GetWebsocketKubernetesShellParams
) => [`/websocket/kubernetes-shell`, ...(params ? [params] : [])] as const;

export const getGetWebsocketKubernetesShellQueryOptions = <
  TData = Awaited<ReturnType<typeof getWebsocketKubernetesShell>>,
  TError = AxiosError<unknown>
>(
  params: GetWebsocketKubernetesShellParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWebsocketKubernetesShell>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getWebsocketKubernetesShell>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetWebsocketKubernetesShellQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWebsocketKubernetesShell>>
  > = ({ signal }) =>
    getWebsocketKubernetesShell(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type GetWebsocketKubernetesShellQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWebsocketKubernetesShell>>
>;
export type GetWebsocketKubernetesShellQueryError = AxiosError<unknown>;

export const useGetWebsocketKubernetesShell = <
  TData = Awaited<ReturnType<typeof getWebsocketKubernetesShell>>,
  TError = AxiosError<unknown>
>(
  params: GetWebsocketKubernetesShellParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWebsocketKubernetesShell>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWebsocketKubernetesShellQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * The request will be upgraded to the websocket protocol.
 **Access policy**: authenticated
 * @summary Execute a websocket on pod
 */
export const getWebsocketPod = (
  params: GetWebsocketPodParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.get(`/websocket/pod`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getGetWebsocketPodQueryKey = (params: GetWebsocketPodParams) =>
  [`/websocket/pod`, ...(params ? [params] : [])] as const;

export const getGetWebsocketPodQueryOptions = <
  TData = Awaited<ReturnType<typeof getWebsocketPod>>,
  TError = AxiosError<unknown>
>(
  params: GetWebsocketPodParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWebsocketPod>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getWebsocketPod>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWebsocketPodQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWebsocketPod>>> = ({
    signal,
  }) => getWebsocketPod(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type GetWebsocketPodQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWebsocketPod>>
>;
export type GetWebsocketPodQueryError = AxiosError<unknown>;

export const useGetWebsocketPod = <
  TData = Awaited<ReturnType<typeof getWebsocketPod>>,
  TError = AxiosError<unknown>
>(
  params: GetWebsocketPodParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getWebsocketPod>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWebsocketPodQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
