/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the
Docker client uses to communicate with the Engine, so everything the Docker
client can do can be done with the API.

Most of the client's commands map directly to API endpoints (e.g. `docker ps`
is `GET /containers/json`). The notable exception is running containers,
which consists of several API calls.

# Errors

The API uses standard HTTP status codes to indicate the success or failure
of the API call. The body of the response will be JSON in the following
format:

```
{
  "message": "page not found"
}
```

# Versioning

The API is usually changed in each release, so API calls are versioned to
ensure that clients don't break. To lock to a specific version of the API,
you prefix the URL with its version, for example, call `/v1.30/info` to use
the v1.30 version of the `/info` endpoint. If the API version specified in
the URL is not supported by the daemon, a HTTP `400 Bad Request` error message
is returned.

If you omit the version-prefix, the current version of the API (v1.41) is used.
For example, calling `/info` is the same as calling `/v1.41/info`. Using the
API without a version-prefix is deprecated and will be removed in a future release.

Engine releases in the near future should support this version of the API,
so your client will continue to work even if it is talking to a newer Engine.

The API uses an open schema model, which means server may add extra properties
to responses. Likewise, the server will ignore any extra query parameters and
request body properties. When you write clients, you need to ignore additional
properties in responses to ensure they do not break when talking to newer
daemons.


# Authentication

Authentication for registries is handled client side. The client has to send
authentication details to various endpoints that need to communicate with
registries, such as `POST /images/(name)/push`. These are sent as
`X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5)
(JSON) string with the following structure:

```
{
  "username": "string",
  "password": "string",
  "email": "string",
  "serveraddress": "string"
}
```

The `serveraddress` is a domain/IP without a protocol. Throughout this
structure, double quotes are required.

If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth),
you can just pass this instead of credentials:

```
{
  "identitytoken": "9cbaf023786cd7..."
}
```

 * OpenAPI spec version: 1.41
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  Config,
  ErrorResponse,
  ConfigListParams,
  IdResponse,
  ConfigCreateBody,
  ConfigSpec,
  ConfigUpdateParams,
} from '../dockerEngineAPI.schemas';

/**
 * @summary List configs
 */
export const configList = (
  endpointId: number,
  params?: ConfigListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Config[]>> =>
  axios.get(`/endpoints/${endpointId}/docker/configs`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getConfigListQueryKey = (
  endpointId: number,
  params?: ConfigListParams
) =>
  [
    `/endpoints/${endpointId}/docker/configs`,
    ...(params ? [params] : []),
  ] as const;

export const getConfigListQueryOptions = <
  TData = Awaited<ReturnType<typeof configList>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  params?: ConfigListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof configList>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigListQueryKey(endpointId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof configList>>> = ({
    signal,
  }) => configList(endpointId, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!endpointId, ...queryOptions };
};

export type ConfigListQueryResult = NonNullable<
  Awaited<ReturnType<typeof configList>>
>;
export type ConfigListQueryError = AxiosError<ErrorResponse>;

export const useConfigList = <
  TData = Awaited<ReturnType<typeof configList>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  params?: ConfigListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getConfigListQueryOptions(endpointId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create a config
 */
export const configCreate = (
  endpointId: number,
  configCreateBody: ConfigCreateBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<IdResponse>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/configs/create`,
    configCreateBody,
    options
  );

export const getConfigCreateMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof configCreate>>,
    TError,
    { endpointId: number; data: ConfigCreateBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof configCreate>>,
  TError,
  { endpointId: number; data: ConfigCreateBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof configCreate>>,
    { endpointId: number; data: ConfigCreateBody }
  > = (props) => {
    const { endpointId, data } = props ?? {};

    return configCreate(endpointId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ConfigCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof configCreate>>
>;
export type ConfigCreateMutationBody = ConfigCreateBody;
export type ConfigCreateMutationError = AxiosError<ErrorResponse>;

export const useConfigCreate = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof configCreate>>,
    TError,
    { endpointId: number; data: ConfigCreateBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getConfigCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Inspect a config
 */
export const configInspect = (
  endpointId: number,
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Config>> =>
  axios.get(`/endpoints/${endpointId}/docker/configs/${id}`, options);

export const getConfigInspectQueryKey = (endpointId: number, id: string) =>
  [`/endpoints/${endpointId}/docker/configs/${id}`] as const;

export const getConfigInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof configInspect>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof configInspect>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConfigInspectQueryKey(endpointId, id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof configInspect>>> = ({
    signal,
  }) => configInspect(endpointId, id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!(endpointId && id), ...queryOptions };
};

export type ConfigInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof configInspect>>
>;
export type ConfigInspectQueryError = AxiosError<ErrorResponse>;

export const useConfigInspect = <
  TData = Awaited<ReturnType<typeof configInspect>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof configInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getConfigInspectQueryOptions(endpointId, id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Delete a config
 */
export const configDelete = (
  endpointId: number,
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.delete(`/endpoints/${endpointId}/docker/configs/${id}`, options);

export const getConfigDeleteMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof configDelete>>,
    TError,
    { endpointId: number; id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof configDelete>>,
  TError,
  { endpointId: number; id: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof configDelete>>,
    { endpointId: number; id: string }
  > = (props) => {
    const { endpointId, id } = props ?? {};

    return configDelete(endpointId, id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ConfigDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof configDelete>>
>;

export type ConfigDeleteMutationError = AxiosError<ErrorResponse>;

export const useConfigDelete = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof configDelete>>,
    TError,
    { endpointId: number; id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getConfigDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Update a Config
 */
export const configUpdate = (
  endpointId: number,
  id: string,
  configSpec: ConfigSpec,
  params: ConfigUpdateParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/configs/${id}/update`,
    configSpec,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );

export const getConfigUpdateMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof configUpdate>>,
    TError,
    {
      endpointId: number;
      id: string;
      data: ConfigSpec;
      params: ConfigUpdateParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof configUpdate>>,
  TError,
  {
    endpointId: number;
    id: string;
    data: ConfigSpec;
    params: ConfigUpdateParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof configUpdate>>,
    {
      endpointId: number;
      id: string;
      data: ConfigSpec;
      params: ConfigUpdateParams;
    }
  > = (props) => {
    const { endpointId, id, data, params } = props ?? {};

    return configUpdate(endpointId, id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ConfigUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof configUpdate>>
>;
export type ConfigUpdateMutationBody = ConfigSpec;
export type ConfigUpdateMutationError = AxiosError<ErrorResponse>;

export const useConfigUpdate = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof configUpdate>>,
    TError,
    {
      endpointId: number;
      id: string;
      data: ConfigSpec;
      params: ConfigUpdateParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getConfigUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
