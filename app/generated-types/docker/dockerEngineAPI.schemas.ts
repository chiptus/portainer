/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the
Docker client uses to communicate with the Engine, so everything the Docker
client can do can be done with the API.

Most of the client's commands map directly to API endpoints (e.g. `docker ps`
is `GET /containers/json`). The notable exception is running containers,
which consists of several API calls.

# Errors

The API uses standard HTTP status codes to indicate the success or failure
of the API call. The body of the response will be JSON in the following
format:

```
{
  "message": "page not found"
}
```

# Versioning

The API is usually changed in each release, so API calls are versioned to
ensure that clients don't break. To lock to a specific version of the API,
you prefix the URL with its version, for example, call `/v1.30/info` to use
the v1.30 version of the `/info` endpoint. If the API version specified in
the URL is not supported by the daemon, a HTTP `400 Bad Request` error message
is returned.

If you omit the version-prefix, the current version of the API (v1.41) is used.
For example, calling `/info` is the same as calling `/v1.41/info`. Using the
API without a version-prefix is deprecated and will be removed in a future release.

Engine releases in the near future should support this version of the API,
so your client will continue to work even if it is talking to a newer Engine.

The API uses an open schema model, which means server may add extra properties
to responses. Likewise, the server will ignore any extra query parameters and
request body properties. When you write clients, you need to ignore additional
properties in responses to ensure they do not break when talking to newer
daemons.


# Authentication

Authentication for registries is handled client side. The client has to send
authentication details to various endpoints that need to communicate with
registries, such as `POST /images/(name)/push`. These are sent as
`X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5)
(JSON) string with the following structure:

```
{
  "username": "string",
  "password": "string",
  "email": "string",
  "serveraddress": "string"
}
```

The `serveraddress` is a domain/IP without a protocol. Throughout this
structure, double quotes are required.

If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth),
you can just pass this instead of credentials:

```
{
  "identitytoken": "9cbaf023786cd7..."
}
```

 * OpenAPI spec version: 1.41
 */
export type ConfigUpdateParams = {
  /**
 * The version number of the config object being updated. This is
required to avoid conflicting writes.

 */
  version: number;
};

export type ConfigCreateBodyAllOf = { [key: string]: any };

export type ConfigCreateBody = ConfigSpec & ConfigCreateBodyAllOf;

export type ConfigListParams = {
  /**
 * A JSON encoded value of the filters (a `map[string][]string`) to
process on the configs list.

Available filters:

- `id=<config id>`
- `label=<key> or label=<key>=value`
- `name=<config name>`
- `names=<config name>`

 */
  filters?: string;
};

export type SecretUpdateParams = {
  /**
 * The version number of the secret object being updated. This is
required to avoid conflicting writes.

 */
  version: number;
};

export type SecretCreateBodyAllOf = { [key: string]: any };

export type SecretCreateBody = SecretSpec & SecretCreateBodyAllOf;

export type SecretListParams = {
  /**
 * A JSON encoded value of the filters (a `map[string][]string`) to
process on the secrets list.

Available filters:

- `id=<secret id>`
- `label=<key> or label=<key>=value`
- `name=<secret name>`
- `names=<secret name>`

 */
  filters?: string;
};

export type TaskLogsParams = {
  /**
   * Show task context and extra details provided to logs.
   */
  details?: boolean;
  /**
   * Keep connection after returning logs.
   */
  follow?: boolean;
  /**
   * Return logs from `stdout`
   */
  stdout?: boolean;
  /**
   * Return logs from `stderr`
   */
  stderr?: boolean;
  /**
   * Only return logs since this time, as a UNIX timestamp
   */
  since?: number;
  /**
   * Add timestamps to every log line
   */
  timestamps?: boolean;
  /**
 * Only return this number of log lines from the end of the logs.
Specify as an integer or `all` to output all log lines.

 */
  tail?: string;
};

export type TaskListParams = {
  /**
 * A JSON encoded value of the filters (a `map[string][]string`) to
process on the tasks list.

Available filters:

- `desired-state=(running | shutdown | accepted)`
- `id=<task id>`
- `label=key` or `label="key=value"`
- `name=<task name>`
- `node=<node id or name>`
- `service=<service name>`

 */
  filters?: string;
};

export type ServiceLogsParams = {
  /**
   * Show service context and extra details provided to logs.
   */
  details?: boolean;
  /**
   * Keep connection after returning logs.
   */
  follow?: boolean;
  /**
   * Return logs from `stdout`
   */
  stdout?: boolean;
  /**
   * Return logs from `stderr`
   */
  stderr?: boolean;
  /**
   * Only return logs since this time, as a UNIX timestamp
   */
  since?: number;
  /**
   * Add timestamps to every log line
   */
  timestamps?: boolean;
  /**
 * Only return this number of log lines from the end of the logs.
Specify as an integer or `all` to output all log lines.

 */
  tail?: string;
};

export type ServiceUpdateBodyAllOf = { [key: string]: any };

export type ServiceUpdateBody = ServiceSpec & ServiceUpdateBodyAllOf;

export type ServiceUpdateRegistryAuthFrom =
  typeof ServiceUpdateRegistryAuthFrom[keyof typeof ServiceUpdateRegistryAuthFrom];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceUpdateRegistryAuthFrom = {
  spec: 'spec',
  'previous-spec': 'previous-spec',
} as const;

export type ServiceUpdateParams = {
  /**
 * The version number of the service object being updated. This is
required to avoid conflicting writes.
This version number should be the value as currently set on the
service *before* the update. You can find the current version by
calling `GET /services/{id}`

 */
  version: number;
  /**
 * If the `X-Registry-Auth` header is not specified, this parameter
indicates where to find registry authorization credentials.

 */
  registryAuthFrom?: ServiceUpdateRegistryAuthFrom;
  /**
 * Set to this parameter to `previous` to cause a server-side rollback
to the previous service spec. The supplied spec will be ignored in
this case.

 */
  rollback?: string;
};

export type ServiceInspectParams = {
  /**
   * Fill empty fields with default values.
   */
  insertDefaults?: boolean;
};

export type ServiceCreate201 = {
  /** The ID of the created service. */
  ID?: string;
  /** Optional warning message */
  Warning?: string;
};

export type ServiceCreateBodyAllOf = { [key: string]: any };

export type ServiceCreateBody = ServiceSpec & ServiceCreateBodyAllOf;

export type ServiceListParams = {
  /**
 * A JSON encoded value of the filters (a `map[string][]string`) to
process on the services list.

Available filters:

- `id=<service id>`
- `label=<service label>`
- `mode=["replicated"|"global"]`
- `name=<service name>`

 */
  filters?: string;
  /**
 * Include service status, with count of running and desired tasks.

 */
  status?: boolean;
};

export type SwarmUnlockBody = {
  /** The swarm's unlock key. */
  UnlockKey?: string;
};

export type SwarmUnlockkey200Two = {
  /** The swarm's unlock key. */
  UnlockKey?: string;
};

export type SwarmUnlockkey200One = {
  /** The swarm's unlock key. */
  UnlockKey?: string;
};

export type SwarmUpdateParams = {
  /**
 * The version number of the swarm object being updated. This is
required to avoid conflicting writes.

 */
  version: number;
  /**
   * Rotate the worker join token.
   */
  rotateWorkerToken?: boolean;
  /**
   * Rotate the manager join token.
   */
  rotateManagerToken?: boolean;
  /**
   * Rotate the manager unlock key.
   */
  rotateManagerUnlockKey?: boolean;
};

export type SwarmLeaveParams = {
  /**
 * Force leave swarm, even if this is the last manager or that it will
break the cluster.

 */
  force?: boolean;
};

export type SwarmJoinBodyTwo = {
  /** Listen address used for inter-manager communication if the node
gets promoted to manager, as well as determining the networking
interface used for the VXLAN Tunnel Endpoint (VTEP).
 */
  ListenAddr?: string;
  /** Externally reachable address advertised to other nodes. This
can either be an address/port combination in the form
`192.168.1.1:4567`, or an interface followed by a port number,
like `eth0:4567`. If the port number is omitted, the port
number from the listen address is used. If `AdvertiseAddr` is
not specified, it will be automatically detected when possible.
 */
  AdvertiseAddr?: string;
  /** Address or interface to use for data path traffic (format:
`<ip|interface>`), for example,  `192.168.1.1`, or an interface,
like `eth0`. If `DataPathAddr` is unspecified, the same address
as `AdvertiseAddr` is used.

The `DataPathAddr` specifies the address that global scope
network drivers will publish towards other nodes in order to
reach the containers running on this node. Using this parameter
it is possible to separate the container data traffic from the
management traffic of the cluster.
 */
  DataPathAddr?: string;
  /** Addresses of manager nodes already participating in the swarm.
   */
  RemoteAddrs?: string[];
  /** Secret token for joining this swarm. */
  JoinToken?: string;
};

export type SwarmJoinBodyOne = {
  /** Listen address used for inter-manager communication if the node
gets promoted to manager, as well as determining the networking
interface used for the VXLAN Tunnel Endpoint (VTEP).
 */
  ListenAddr?: string;
  /** Externally reachable address advertised to other nodes. This
can either be an address/port combination in the form
`192.168.1.1:4567`, or an interface followed by a port number,
like `eth0:4567`. If the port number is omitted, the port
number from the listen address is used. If `AdvertiseAddr` is
not specified, it will be automatically detected when possible.
 */
  AdvertiseAddr?: string;
  /** Address or interface to use for data path traffic (format:
`<ip|interface>`), for example,  `192.168.1.1`, or an interface,
like `eth0`. If `DataPathAddr` is unspecified, the same address
as `AdvertiseAddr` is used.

The `DataPathAddr` specifies the address that global scope
network drivers will publish towards other nodes in order to
reach the containers running on this node. Using this parameter
it is possible to separate the container data traffic from the
management traffic of the cluster.
 */
  DataPathAddr?: string;
  /** Addresses of manager nodes already participating in the swarm.
   */
  RemoteAddrs?: string[];
  /** Secret token for joining this swarm. */
  JoinToken?: string;
};

export type SwarmInitBodyTwo = {
  /** Listen address used for inter-manager communication, as well
as determining the networking interface used for the VXLAN
Tunnel Endpoint (VTEP). This can either be an address/port
combination in the form `192.168.1.1:4567`, or an interface
followed by a port number, like `eth0:4567`. If the port number
is omitted, the default swarm listening port is used.
 */
  ListenAddr?: string;
  /** Externally reachable address advertised to other nodes. This
can either be an address/port combination in the form
`192.168.1.1:4567`, or an interface followed by a port number,
like `eth0:4567`. If the port number is omitted, the port
number from the listen address is used. If `AdvertiseAddr` is
not specified, it will be automatically detected when possible.
 */
  AdvertiseAddr?: string;
  /** Address or interface to use for data path traffic (format:
`<ip|interface>`), for example,  `192.168.1.1`, or an interface,
like `eth0`. If `DataPathAddr` is unspecified, the same address
as `AdvertiseAddr` is used.

The `DataPathAddr` specifies the address that global scope
network drivers will publish towards other  nodes in order to
reach the containers running on this node. Using this parameter
it is possible to separate the container data traffic from the
management traffic of the cluster.
 */
  DataPathAddr?: string;
  /** DataPathPort specifies the data path port number for data traffic.
Acceptable port range is 1024 to 49151.
if no port is set or is set to 0, default port 4789 will be used.
 */
  DataPathPort?: number;
  /** Default Address Pool specifies default subnet pools for global
scope networks.
 */
  DefaultAddrPool?: string[];
  /** Force creation of a new swarm. */
  ForceNewCluster?: boolean;
  /** SubnetSize specifies the subnet size of the networks created
from the default subnet pool.
 */
  SubnetSize?: number;
  Spec?: SwarmSpec;
};

export type SwarmInitBodyOne = {
  /** Listen address used for inter-manager communication, as well
as determining the networking interface used for the VXLAN
Tunnel Endpoint (VTEP). This can either be an address/port
combination in the form `192.168.1.1:4567`, or an interface
followed by a port number, like `eth0:4567`. If the port number
is omitted, the default swarm listening port is used.
 */
  ListenAddr?: string;
  /** Externally reachable address advertised to other nodes. This
can either be an address/port combination in the form
`192.168.1.1:4567`, or an interface followed by a port number,
like `eth0:4567`. If the port number is omitted, the port
number from the listen address is used. If `AdvertiseAddr` is
not specified, it will be automatically detected when possible.
 */
  AdvertiseAddr?: string;
  /** Address or interface to use for data path traffic (format:
`<ip|interface>`), for example,  `192.168.1.1`, or an interface,
like `eth0`. If `DataPathAddr` is unspecified, the same address
as `AdvertiseAddr` is used.

The `DataPathAddr` specifies the address that global scope
network drivers will publish towards other  nodes in order to
reach the containers running on this node. Using this parameter
it is possible to separate the container data traffic from the
management traffic of the cluster.
 */
  DataPathAddr?: string;
  /** DataPathPort specifies the data path port number for data traffic.
Acceptable port range is 1024 to 49151.
if no port is set or is set to 0, default port 4789 will be used.
 */
  DataPathPort?: number;
  /** Default Address Pool specifies default subnet pools for global
scope networks.
 */
  DefaultAddrPool?: string[];
  /** Force creation of a new swarm. */
  ForceNewCluster?: boolean;
  /** SubnetSize specifies the subnet size of the networks created
from the default subnet pool.
 */
  SubnetSize?: number;
  Spec?: SwarmSpec;
};

export type NodeUpdateParams = {
  /**
 * The version number of the node object being updated. This is required
to avoid conflicting writes.

 */
  version: number;
};

export type NodeDeleteParams = {
  /**
   * Force remove a node from the swarm
   */
  force?: boolean;
};

export type NodeListParams = {
  /**
 * Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).

Available filters:
- `id=<node id>`
- `label=<engine label>`
- `membership=`(`accepted`|`pending`)`
- `name=<node name>`
- `node.label=<node label>`
- `role=`(`manager`|`worker`)`

 */
  filters?: string;
};

export type PluginCreateParams = {
  /**
 * The name of the plugin. The `:latest` tag is optional, and is the
default if omitted.

 */
  name: string;
};

export type PluginUpgradeParams = {
  /**
 * Remote reference to upgrade to.

The `:latest` tag is optional, and is used as the default if omitted.

 */
  remote: string;
};

export type PluginEnableParams = {
  /**
   * Set the HTTP client timeout (in seconds)
   */
  timeout?: number;
};

export type PluginDeleteParams = {
  /**
 * Disable the plugin before removing. This may result in issues if the
plugin is in use by a container.

 */
  force?: boolean;
};

export type PluginPullParams = {
  /**
 * Remote reference for plugin to install.

The `:latest` tag is optional, and is used as the default if omitted.

 */
  remote: string;
  /**
 * Local name for the pulled plugin.

The `:latest` tag is optional, and is used as the default if omitted.

 */
  name?: string;
};

export type GetPluginPrivilegesParams = {
  /**
 * The name of the plugin. The `:latest` tag is optional, and is the
default if omitted.

 */
  remote: string;
};

export type PluginListParams = {
  /**
 * A JSON encoded value of the filters (a `map[string][]string`) to
process on the plugin list.

Available filters:

- `capability=<capability name>`
- `enable=<true>|<false>`

 */
  filters?: string;
};

export type NetworkPrune200 = {
  /** Networks that were deleted */
  NetworksDeleted?: string[];
};

export type NetworkPruneParams = {
  /**
 * Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

Available filters:
- `until=<timestamp>` Prune networks created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine‚Äôs time.
- `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune networks with (or without, in case `label!=...` is used) the specified labels.

 */
  filters?: string;
};

export type NetworkDisconnectBody = {
  /** The ID or name of the container to disconnect from the network.
   */
  Container?: string;
  /** Force the container to disconnect from the network.
   */
  Force?: boolean;
};

export type NetworkConnectBody = {
  /** The ID or name of the container to connect to the network. */
  Container?: string;
  EndpointConfig?: EndpointSettings;
};

export type NetworkCreate201 = {
  /** The ID of the created network. */
  Id?: string;
  Warning?: string;
};

/**
 * User-defined key/value metadata.
 */
export type NetworkCreateBodyLabels = { [key: string]: string };

/**
 * Network specific options to be used by the drivers.
 */
export type NetworkCreateBodyOptions = { [key: string]: string };

export type NetworkCreateBody = {
  /** The network's name. */
  Name: string;
  /** Check for networks with duplicate names. Since Network is
primarily keyed based on a random ID and not on the name, and
network name is strictly a user-friendly alias to the network
which is uniquely identified using ID, there is no guaranteed
way to check for duplicates. CheckDuplicate is there to provide
a best effort checking of any networks which has the same name
but it is not guaranteed to catch all name collisions.
 */
  CheckDuplicate?: boolean;
  /** Name of the network driver plugin to use. */
  Driver?: string;
  /** Restrict external access to the network. */
  Internal?: boolean;
  /** Globally scoped network is manually attachable by regular
containers from workers in swarm mode.
 */
  Attachable?: boolean;
  /** Ingress network is the network which provides the routing-mesh
in swarm mode.
 */
  Ingress?: boolean;
  IPAM?: Ipam;
  /** Enable IPv6 on the network. */
  EnableIPv6?: boolean;
  /** Network specific options to be used by the drivers. */
  Options?: NetworkCreateBodyOptions;
  /** User-defined key/value metadata. */
  Labels?: NetworkCreateBodyLabels;
};

export type NetworkInspectParams = {
  /**
   * Detailed inspect output for troubleshooting
   */
  verbose?: boolean;
  /**
   * Filter the network by scope (swarm, global, or local)
   */
  scope?: string;
};

export type NetworkListParams = {
  /**
 * JSON encoded value of the filters (a `map[string][]string`) to process
on the networks list.

Available filters:

- `dangling=<boolean>` When set to `true` (or `1`), returns all
   networks that are not in use by a container. When set to `false`
   (or `0`), only networks that are in use by one or more
   containers are returned.
- `driver=<driver-name>` Matches a network's driver.
- `id=<network-id>` Matches all or part of a network ID.
- `label=<key>` or `label=<key>=<value>` of a network label.
- `name=<network-name>` Matches all or part of a network name.
- `scope=["swarm"|"global"|"local"]` Filters networks by scope (`swarm`, `global`, or `local`).
- `type=["custom"|"builtin"]` Filters networks by type. The `custom` keyword returns all user-defined networks.

 */
  filters?: string;
};

export type VolumePrune200 = {
  /** Volumes that were deleted */
  VolumesDeleted?: string[];
  /** Disk space reclaimed in bytes */
  SpaceReclaimed?: number;
};

export type VolumePruneParams = {
  /**
 * Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

Available filters:
- `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune volumes with (or without, in case `label!=...` is used) the specified labels.

 */
  filters?: string;
};

export type VolumeDeleteParams = {
  /**
   * Force the removal of the volume
   */
  force?: boolean;
};

export type VolumeListParams = {
  /**
 * JSON encoded value of the filters (a `map[string][]string`) to
process on the volumes list. Available filters:

- `dangling=<boolean>` When set to `true` (or `1`), returns all
   volumes that are not in use by a container. When set to `false`
   (or `0`), only volumes that are in use by one or more
   containers are returned.
- `driver=<volume-driver-name>` Matches volumes based on their driver.
- `label=<key>` or `label=<key>:<value>` Matches volumes based on
   the presence of a `label` alone or a `label` and a value.
- `name=<volume-name>` Matches all or part of a volume name.

 */
  filters?: string;
};

export type ExecInspect200 = {
  CanRemove?: boolean;
  DetachKeys?: string;
  ID?: string;
  Running?: boolean;
  ExitCode?: number;
  ProcessConfig?: ProcessConfig;
  OpenStdin?: boolean;
  OpenStderr?: boolean;
  OpenStdout?: boolean;
  ContainerID?: string;
  /** The system process ID for the exec process. */
  Pid?: number;
};

export type ExecResizeParams = {
  /**
   * Height of the TTY session in characters
   */
  h?: number;
  /**
   * Width of the TTY session in characters
   */
  w?: number;
};

export type ExecStartBody = {
  /** Detach from the command. */
  Detach?: boolean;
  /** Allocate a pseudo-TTY. */
  Tty?: boolean;
};

export type ContainerExecBody = {
  /** Attach to `stdin` of the exec command. */
  AttachStdin?: boolean;
  /** Attach to `stdout` of the exec command. */
  AttachStdout?: boolean;
  /** Attach to `stderr` of the exec command. */
  AttachStderr?: boolean;
  /** Override the key sequence for detaching a container. Format is
a single character `[a-Z]` or `ctrl-<value>` where `<value>`
is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.
 */
  DetachKeys?: string;
  /** Allocate a pseudo-TTY. */
  Tty?: boolean;
  /** A list of environment variables in the form `["VAR=value", ...]`.
   */
  Env?: string[];
  /** Command to run, as a string or array of strings. */
  Cmd?: string[];
  /** Runs the exec process with extended privileges. */
  Privileged?: boolean;
  /** The user, and optionally, group to run the exec process inside
the container. Format is one of: `user`, `user:group`, `uid`,
or `uid:gid`.
 */
  User?: string;
  /** The working directory for the exec process inside the container.
   */
  WorkingDir?: string;
};

export type ImageLoadParams = {
  /**
   * Suppress progress details during load.
   */
  quiet?: boolean;
};

export type ImageGetAllParams = {
  /**
   * Image names to filter by
   */
  names?: string[];
};

export type SystemDataUsage200Two = {
  LayersSize?: number;
  Images?: ImageSummary[];
  Containers?: ContainerSummary[];
  Volumes?: Volume[];
  BuildCache?: BuildCache[];
};

export type SystemDataUsage200One = {
  LayersSize?: number;
  Images?: ImageSummary[];
  Containers?: ContainerSummary[];
  Volumes?: Volume[];
  BuildCache?: BuildCache[];
};

export type SystemEventsParams = {
  /**
   * Show events created since this timestamp then stream new events.
   */
  since?: string;
  /**
   * Show events created until this timestamp then stop streaming.
   */
  until?: string;
  /**
 * A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:

- `config=<string>` config name or ID
- `container=<string>` container name or ID
- `daemon=<string>` daemon name or ID
- `event=<string>` event type
- `image=<string>` image name or ID
- `label=<string>` image or container label
- `network=<string>` network name or ID
- `node=<string>` node ID
- `plugin`=<string> plugin name or ID
- `scope`=<string> local or swarm
- `secret=<string>` secret name or ID
- `service=<string>` service name or ID
- `type=<string>` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config`
- `volume=<string>` volume name

 */
  filters?: string;
};

export type ImageCommitParams = {
  /**
   * The ID or name of the container to commit
   */
  container?: string;
  /**
   * Repository name for the created image
   */
  repo?: string;
  /**
   * Tag name for the create image
   */
  tag?: string;
  /**
   * Commit message
   */
  comment?: string;
  /**
   * Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`)
   */
  author?: string;
  /**
   * Whether to pause the container before committing
   */
  pause?: boolean;
  /**
   * `Dockerfile` instructions to apply while committing
   */
  changes?: string;
};

export type SystemAuth200 = {
  /** The status of the authentication */
  Status: string;
  /** An opaque token used to authenticate a user after a successful login */
  IdentityToken?: string;
};

export type ImagePrune200 = {
  /** Images that were deleted */
  ImagesDeleted?: ImageDeleteResponseItem[];
  /** Disk space reclaimed in bytes */
  SpaceReclaimed?: number;
};

export type ImagePruneParams = {
  /**
 * Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:

- `dangling=<boolean>` When set to `true` (or `1`), prune only
   unused *and* untagged images. When set to `false`
   (or `0`), all unused images are pruned.
- `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine‚Äôs time.
- `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune images with (or without, in case `label!=...` is used) the specified labels.

 */
  filters?: string;
};

export type ImageSearch200Item = {
  description?: string;
  is_official?: boolean;
  is_automated?: boolean;
  name?: string;
  star_count?: number;
};

export type ImageSearchParams = {
  /**
   * Term to search
   */
  term: string;
  /**
   * Maximum number of results to return
   */
  limit?: number;
  /**
 * A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:

- `is-automated=(true|false)`
- `is-official=(true|false)`
- `stars=<number>` Matches images that has at least 'number' stars.

 */
  filters?: string;
};

export type ImageDeleteParams = {
  /**
   * Remove the image even if it is being used by stopped containers or has other tags
   */
  force?: boolean;
  /**
   * Do not delete untagged parent images
   */
  noprune?: boolean;
};

export type ImageTagParams = {
  /**
   * The repository to tag in. For example, `someuser/someimage`.
   */
  repo?: string;
  /**
   * The name of the new tag.
   */
  tag?: string;
};

export type ImagePushParams = {
  /**
   * The tag to associate with the image on the registry.
   */
  tag?: string;
};

/**
 * individual image layer information in response to ImageHistory operation
 */
export type ImageHistory200Item = {
  Id: string;
  Created: number;
  CreatedBy: string;
  Tags: string[];
  Size: number;
  Comment: string;
};

export type ImageCreateParams = {
  /**
   * Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
   */
  fromImage?: string;
  /**
   * Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image.
   */
  fromSrc?: string;
  /**
   * Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
   */
  repo?: string;
  /**
   * Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
   */
  tag?: string;
  /**
   * Set commit message for imported image.
   */
  message?: string;
  /**
 * Apply `Dockerfile` instructions to the image that is created,
for example: `changes=ENV DEBUG=true`.
Note that `ENV DEBUG=true` should be URI component encoded.

Supported `Dockerfile` instructions:
`CMD`|`ENTRYPOINT`|`ENV`|`EXPOSE`|`ONBUILD`|`USER`|`VOLUME`|`WORKDIR`

 */
  changes?: string[];
  /**
   * Platform in the format os[/arch[/variant]]
   */
  platform?: string;
};

export type BuildPrune200 = {
  CachesDeleted?: string[];
  /** Disk space reclaimed in bytes */
  SpaceReclaimed?: number;
};

export type BuildPruneParams = {
  /**
   * Amount of disk space in bytes to keep for cache
   */
  'keep-storage'?: number;
  /**
   * Remove all types of build cache
   */
  all?: boolean;
  /**
 * A JSON encoded value of the filters (a `map[string][]string`) to
process on the list of build cache objects.

Available filters:

- `until=<duration>`: duration relative to daemon's time, during which build cache was not used, in Go's duration format (e.g., '24h')
- `id=<id>`
- `parent=<id>`
- `type=<string>`
- `description=<string>`
- `inuse`
- `shared`
- `private`

 */
  filters?: string;
};

export type ImageBuildParams = {
  /**
   * Path within the build context to the `Dockerfile`. This is ignored if `remote` is specified and points to an external `Dockerfile`.
   */
  dockerfile?: string;
  /**
   * A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag the default `latest` value is assumed. You can provide several `t` parameters.
   */
  t?: string;
  /**
   * Extra hosts to add to /etc/hosts
   */
  extrahosts?: string;
  /**
   * A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file‚Äôs contents are placed into a file called `Dockerfile` and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the `dockerfile` parameter is also specified, there must be a file with the corresponding path inside the tarball.
   */
  remote?: string;
  /**
   * Suppress verbose build output.
   */
  q?: boolean;
  /**
   * Do not use the cache when building the image.
   */
  nocache?: boolean;
  /**
   * JSON array of images used for build cache resolution.
   */
  cachefrom?: string;
  /**
   * Attempt to pull the image even if an older image exists locally.
   */
  pull?: string;
  /**
   * Remove intermediate containers after a successful build.
   */
  rm?: boolean;
  /**
   * Always remove intermediate containers, even upon failure.
   */
  forcerm?: boolean;
  /**
   * Set memory limit for build.
   */
  memory?: number;
  /**
   * Total memory (memory + swap). Set as `-1` to disable swap.
   */
  memswap?: number;
  /**
   * CPU shares (relative weight).
   */
  cpushares?: number;
  /**
   * CPUs in which to allow execution (e.g., `0-3`, `0,1`).
   */
  cpusetcpus?: string;
  /**
   * The length of a CPU period in microseconds.
   */
  cpuperiod?: number;
  /**
   * Microseconds of CPU time that the container can get in a CPU period.
   */
  cpuquota?: number;
  /**
 * JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the `Dockerfile` RUN instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for passing secret values.

For example, the build arg `FOO=bar` would become `{"FOO":"bar"}` in JSON. This would result in the query parameter `buildargs={"FOO":"bar"}`. Note that `{"FOO":"bar"}` should be URI component encoded.

[Read more about the buildargs instruction.](/engine/reference/builder/#arg)

 */
  buildargs?: string;
  /**
   * Size of `/dev/shm` in bytes. The size must be greater than 0. If omitted the system uses 64MB.
   */
  shmsize?: number;
  /**
   * Squash the resulting images layers into a single layer. *(Experimental release only.)*
   */
  squash?: boolean;
  /**
   * Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
   */
  labels?: string;
  /**
 * Sets the networking mode for the run commands during build. Supported
standard values are: `bridge`, `host`, `none`, and `container:<name|id>`.
Any other value is taken as a custom network's name or ID to which this
container should connect to.

 */
  networkmode?: string;
  /**
   * Platform in the format os[/arch[/variant]]
   */
  platform?: string;
  /**
   * Target build stage
   */
  target?: string;
  /**
   * BuildKit output configuration
   */
  outputs?: string;
};

export type ImageListParams = {
  /**
   * Show all images. Only images from a final layer (no children) are shown by default.
   */
  all?: boolean;
  /**
 * A JSON encoded value of the filters (a `map[string][]string`) to
process on the images list.

Available filters:

- `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
- `dangling=true`
- `label=key` or `label="key=value"` of an image label
- `reference`=(`<image-name>[:<tag>]`)
- `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)

 */
  filters?: string;
  /**
   * Show digest information as a `RepoDigests` field on each image.
   */
  digests?: boolean;
};

export type ContainerPrune200 = {
  /** Container IDs that were deleted */
  ContainersDeleted?: string[];
  /** Disk space reclaimed in bytes */
  SpaceReclaimed?: number;
};

export type ContainerPruneParams = {
  /**
 * Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

Available filters:
- `until=<timestamp>` Prune containers created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine‚Äôs time.
- `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without, in case `label!=...` is used) the specified labels.

 */
  filters?: string;
};

export type PutContainerArchiveParams = {
  /**
   * Path to a directory in the container to extract the archive‚Äôs contents into.
   */
  path: string;
  /**
 * If `1`, `true`, or `True` then it will be an error if unpacking the
given content would cause an existing directory to be replaced with
a non-directory and vice versa.

 */
  noOverwriteDirNonDir?: string;
  /**
 * If `1`, `true`, then it will copy UID/GID maps to the dest file or
dir

 */
  copyUIDGID?: string;
};

export type ContainerArchiveParams = {
  /**
   * Resource in the container‚Äôs filesystem to archive.
   */
  path: string;
};

export type ContainerArchiveInfoParams = {
  /**
   * Resource in the container‚Äôs filesystem to archive.
   */
  path: string;
};

export type ContainerDeleteParams = {
  /**
   * Remove anonymous volumes associated with the container.
   */
  v?: boolean;
  /**
   * If the container is running, kill it before removing it.
   */
  force?: boolean;
  /**
   * Remove the specified link associated with the container.
   */
  link?: boolean;
};

export type ContainerWaitCondition =
  typeof ContainerWaitCondition[keyof typeof ContainerWaitCondition];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContainerWaitCondition = {
  'not-running': 'not-running',
  'next-exit': 'next-exit',
  removed: 'removed',
} as const;

export type ContainerWaitParams = {
  /**
 * Wait until a container state reaches the given condition.

Defaults to `not-running` if omitted or empty.

 */
  condition?: ContainerWaitCondition;
};

export type ContainerAttachWebsocketParams = {
  /**
 * Override the key sequence for detaching a container.Format is a single
character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,
`@`, `^`, `[`, `,`, or `_`.

 */
  detachKeys?: string;
  /**
   * Return logs
   */
  logs?: boolean;
  /**
   * Return stream
   */
  stream?: boolean;
};

export type ContainerAttachParams = {
  /**
 * Override the key sequence for detaching a container.Format is a single
character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,
`@`, `^`, `[`, `,` or `_`.

 */
  detachKeys?: string;
  /**
 * Replay previous logs from the container.

This is useful for attaching to a container that has started and you
want to output everything since the container started.

If `stream` is also enabled, once all the previous output has been
returned, it will seamlessly transition into streaming current
output.

 */
  logs?: boolean;
  /**
 * Stream attached streams from the time the request was made onwards.

 */
  stream?: boolean;
  /**
   * Attach to `stdin`
   */
  stdin?: boolean;
  /**
   * Attach to `stdout`
   */
  stdout?: boolean;
  /**
   * Attach to `stderr`
   */
  stderr?: boolean;
};

export type ContainerRenameParams = {
  /**
   * New name for the container
   */
  name: string;
};

/**
 * OK response to ContainerUpdate operation
 */
export type ContainerUpdate200 = {
  Warnings?: string[];
};

export type ContainerUpdateBodyAllOf = {
  RestartPolicy?: RestartPolicy;
};

export type ContainerUpdateBody = Resources & ContainerUpdateBodyAllOf;

export type ContainerKillParams = {
  /**
 * Signal to send to the container as an integer or string (e.g. `SIGINT`).

 */
  signal?: string;
};

export type ContainerRestartParams = {
  /**
   * Number of seconds to wait before killing the container
   */
  t?: number;
};

export type ContainerStopParams = {
  /**
   * Number of seconds to wait before killing the container
   */
  t?: number;
};

export type ContainerStartParams = {
  /**
 * Override the key sequence for detaching a container. Format is a
single character `[a-Z]` or `ctrl-<value>` where `<value>` is one
of: `a-z`, `@`, `^`, `[`, `,` or `_`.

 */
  detachKeys?: string;
};

export type ContainerResizeParams = {
  /**
   * Height of the TTY session in characters
   */
  h?: number;
  /**
   * Width of the TTY session in characters
   */
  w?: number;
};

export type ContainerStats200 = { [key: string]: any };

export type ContainerStatsParams = {
  /**
 * Stream the output. If false, the stats will be output once and then
it will disconnect.

 */
  stream?: boolean;
  /**
 * Only get a single stat instead of waiting for 2 cycles. Must be used
with `stream=false`.

 */
  'one-shot'?: boolean;
};

/**
 * Kind of change
 */
export type ContainerChanges200ItemKind =
  typeof ContainerChanges200ItemKind[keyof typeof ContainerChanges200ItemKind];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContainerChanges200ItemKind = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

/**
 * change item in response to ContainerChanges operation
 */
export type ContainerChanges200Item = {
  /** Path to file that has changed */
  Path: string;
  /** Kind of change */
  Kind: ContainerChanges200ItemKind;
};

export type ContainerLogsParams = {
  /**
   * Keep connection after returning logs.
   */
  follow?: boolean;
  /**
   * Return logs from `stdout`
   */
  stdout?: boolean;
  /**
   * Return logs from `stderr`
   */
  stderr?: boolean;
  /**
   * Only return logs since this time, as a UNIX timestamp
   */
  since?: number;
  /**
   * Only return logs before this time, as a UNIX timestamp
   */
  until?: number;
  /**
   * Add timestamps to every log line
   */
  timestamps?: boolean;
  /**
 * Only return this number of log lines from the end of the logs.
Specify as an integer or `all` to output all log lines.

 */
  tail?: string;
};

/**
 * OK response to ContainerTop operation
 */
export type ContainerTop200Two = {
  /** The ps column titles */
  Titles?: string[];
  /** Each process running in the container, where each is process
is an array of values corresponding to the titles.
 */
  Processes?: string[][];
};

/**
 * OK response to ContainerTop operation
 */
export type ContainerTop200One = {
  /** The ps column titles */
  Titles?: string[];
  /** Each process running in the container, where each is process
is an array of values corresponding to the titles.
 */
  Processes?: string[][];
};

export type ContainerTopParams = {
  /**
   * The arguments to pass to `ps`. For example, `aux`
   */
  ps_args?: string;
};

export type ContainerInspect200 = {
  /** The ID of the container */
  Id?: string;
  /** The time the container was created */
  Created?: string;
  /** The path to the command being run */
  Path?: string;
  /** The arguments to the command being run */
  Args?: string[];
  State?: ContainerState;
  /** The container's image ID */
  Image?: string;
  ResolvConfPath?: string;
  HostnamePath?: string;
  HostsPath?: string;
  LogPath?: string;
  Name?: string;
  RestartCount?: number;
  Driver?: string;
  Platform?: string;
  MountLabel?: string;
  ProcessLabel?: string;
  AppArmorProfile?: string;
  /** IDs of exec instances that are running in the container. */
  ExecIDs?: string[] | null;
  HostConfig?: HostConfig;
  GraphDriver?: GraphDriverData;
  /** The size of files that have been created or changed by this
container.
 */
  SizeRw?: number;
  /** The total size of all the files in this container. */
  SizeRootFs?: number;
  Mounts?: MountPoint[];
  Config?: ContainerConfig;
  NetworkSettings?: NetworkSettings;
};

export type ContainerInspectParams = {
  /**
   * Return the size of container as fields `SizeRw` and `SizeRootFs`
   */
  size?: boolean;
};

/**
 * OK response to ContainerCreate operation
 */
export type ContainerCreate201 = {
  /** The ID of the created container */
  Id: string;
  /** Warnings encountered when creating the container */
  Warnings: string[];
};

export type ContainerCreateBodyTwoAllOf = {
  HostConfig?: HostConfig;
  NetworkingConfig?: NetworkingConfig;
};

export type ContainerCreateBodyTwo = ContainerConfig &
  ContainerCreateBodyTwoAllOf;

export type ContainerCreateBodyOneAllOf = {
  HostConfig?: HostConfig;
  NetworkingConfig?: NetworkingConfig;
};

export type ContainerCreateBodyOne = ContainerConfig &
  ContainerCreateBodyOneAllOf;

export type ContainerCreateParams = {
  /**
 * Assign the specified name to the container. Must match
`/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`.

 */
  name?: string;
  /**
 * Platform in the format `os[/arch[/variant]]` used for image lookup.

When specified, the daemon checks if the requested image is present
in the local image cache with the given OS and Architecture, and
otherwise returns a `404` status.

If the option is not set, the host's native OS and Architecture are
used to look up the image in the image cache. However, if no platform
is passed and the given image does exist in the local image cache,
but its OS or architecture does not match, the container is created
with the available image, and a warning is added to the `Warnings`
field in the response, for example;

    WARNING: The requested image's platform (linux/arm64/v8) does not
             match the detected host platform (linux/amd64) and no
             specific platform was requested

 */
  platform?: string;
};

export type ContainerListParams = {
  /**
 * Return all containers. By default, only running containers are shown.

 */
  all?: boolean;
  /**
 * Return this number of most recently created containers, including
non-running ones.

 */
  limit?: number;
  /**
 * Return the size of container as fields `SizeRw` and `SizeRootFs`.

 */
  size?: boolean;
  /**
 * Filters to process on the container list, encoded as JSON (a
`map[string][]string`). For example, `{"status": ["paused"]}` will
only return paused containers.

Available filters:

- `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)
- `before`=(`<container id>` or `<container name>`)
- `expose`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
- `exited=<int>` containers with exit code of `<int>`
- `health`=(`starting`|`healthy`|`unhealthy`|`none`)
- `id=<ID>` a container's ID
- `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)
- `is-task=`(`true`|`false`)
- `label=key` or `label="key=value"` of a container label
- `name=<name>` a container's name
- `network`=(`<network id>` or `<network name>`)
- `publish`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
- `since`=(`<container id>` or `<container name>`)
- `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)
- `volume`=(`<volume name>` or `<mount point destination>`)

 */
  filters?: string;
};

export type PluginPrivilegeArrayBody = PluginPrivilege[];

/**
 * Describes the platform which the image in the manifest runs on, as defined
in the [OCI Image Index Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/image-index.md).

 */
export interface OCIPlatform {
  /** The CPU architecture, for example `amd64` or `ppc64`.
   */
  architecture?: string;
  /** The operating system, for example `linux` or `windows`.
   */
  os?: string;
  /** Optional field specifying the operating system version, for example on
Windows `10.0.19041.1165`.
 */
  'os.version'?: string;
  /** Optional field specifying an array of strings, each listing a required
OS feature (for example on Windows `win32k`).
 */
  'os.features'?: string[];
  /** Optional field specifying a variant of the CPU, for example `v7` to
specify ARMv7 when architecture is `arm`.
 */
  variant?: string;
}

/**
 * A descriptor struct containing digest, media type, and size, as defined in
the [OCI Content Descriptors Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/descriptor.md).

 */
export interface OCIDescriptor {
  /** The media type of the object this schema refers to.
   */
  mediaType?: string;
  /** The digest of the targeted content.
   */
  digest?: string;
  /** The size in bytes of the blob.
   */
  size?: number;
}

/**
 * Describes the result obtained from contacting the registry to retrieve
image metadata.

 */
export interface DistributionInspect {
  Descriptor: OCIDescriptor;
  /** An array containing all platforms supported by the image.
   */
  Platforms: OCIPlatform[];
}

/**
 * Scope of the event. Engine events are `local` scope. Cluster (Swarm)
events are `swarm` scope.

 */
export type EventMessageScope =
  typeof EventMessageScope[keyof typeof EventMessageScope];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventMessageScope = {
  local: 'local',
  swarm: 'swarm',
} as const;

/**
 * The type of object emitting the event
 */
export type EventMessageType =
  typeof EventMessageType[keyof typeof EventMessageType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventMessageType = {
  builder: 'builder',
  config: 'config',
  container: 'container',
  daemon: 'daemon',
  image: 'image',
  network: 'network',
  node: 'node',
  plugin: 'plugin',
  secret: 'secret',
  service: 'service',
  volume: 'volume',
} as const;

/**
 * EventMessage represents the information an event contains.

 */
export interface EventMessage {
  /** The type of object emitting the event */
  Type?: EventMessageType;
  /** The type of event */
  Action?: string;
  Actor?: EventActor;
  /** Scope of the event. Engine events are `local` scope. Cluster (Swarm)
events are `swarm` scope.
 */
  scope?: EventMessageScope;
  /** Timestamp of event */
  time?: number;
  /** Timestamp of event, with nanosecond accuracy */
  timeNano?: number;
}

/**
 * Various key/value attributes of the object, depending on its type.

 */
export type EventActorAttributes = { [key: string]: string };

/**
 * Actor describes something that generates events, like a container, network,
or a volume.

 */
export interface EventActor {
  /** The ID of the object emitting the event */
  ID?: string;
  /** Various key/value attributes of the object, depending on its type.
   */
  Attributes?: EventActorAttributes;
}

/**
 * Driver attachment options for the network target.

 */
export type NetworkAttachmentConfigDriverOpts = { [key: string]: string };

/**
 * Specifies how a service should be attached to a particular network.

 */
export interface NetworkAttachmentConfig {
  /** The target network for attachment. Must be a network name or ID.
   */
  Target?: string;
  /** Discoverable alternate names for the service on this network.
   */
  Aliases?: string[];
  /** Driver attachment options for the network target.
   */
  DriverOpts?: NetworkAttachmentConfigDriverOpts;
}

/**
 * Represents a peer-node in the swarm
 */
export interface PeerNode {
  /** Unique identifier of for this node in the swarm. */
  NodeID?: string;
  /** IP address and ports at which this node can be reached.
   */
  Addr?: string;
}

/**
 * Current local status of this node.
 */
export type LocalNodeState = typeof LocalNodeState[keyof typeof LocalNodeState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LocalNodeState = {
  inactive: 'inactive',
  pending: 'pending',
  active: 'active',
  error: 'error',
  locked: 'locked',
} as const;

/**
 * Represents generic information about swarm.

 */
export interface SwarmInfo {
  /** Unique identifier of for this node in the swarm. */
  NodeID?: string;
  /** IP address at which this node can be reached by other nodes in the
swarm.
 */
  NodeAddr?: string;
  LocalNodeState?: LocalNodeState;
  ControlAvailable?: boolean;
  Error?: string;
  /** List of ID's and addresses of other managers in the swarm.
   */
  RemoteManagers?: PeerNode[] | null;
  /** Total number of nodes in the swarm. */
  Nodes?: number | null;
  /** Total number of managers in the swarm. */
  Managers?: number | null;
  Cluster?: ClusterInfo;
}

/**
 * Commit holds the Git-commit (SHA1) that a binary was built from, as
reported in the version-string of external tools, such as `containerd`,
or `runC`.

 */
export interface Commit {
  /** Actual commit ID of external tool. */
  ID?: string;
  /** Commit ID of external tool expected by dockerd as set at build time.
   */
  Expected?: string;
}

/**
 * Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec)
runtime.

The runtime is invoked by the daemon via the `containerd` daemon. OCI
runtimes act as an interface to the Linux kernel namespaces, cgroups,
and SELinux.

 */
export interface Runtime {
  /** Name and, optional, path, of the OCI executable binary.

If the path is omitted, the daemon searches the host's `$PATH` for the
binary and uses the first result.
 */
  path?: string;
  /** List of command-line arguments to pass to the runtime when invoked.
   */
  runtimeArgs?: string[] | null;
}

/**
 * IndexInfo contains information about a registry.
 */
export type IndexInfo = {
  /** Name of the registry, such as "docker.io".
   */
  Name?: string;
  /** List of mirrors, expressed as URIs.
   */
  Mirrors?: string[];
  /** Indicates if the registry is part of the list of insecure
registries.

If `false`, the registry is insecure. Insecure registries accept
un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from
unknown CAs) communication.

> **Warning**: Insecure registries can be useful when running a local
> registry. However, because its use creates security vulnerabilities
> it should ONLY be enabled for testing purposes. For increased
> security, users should add their CA to their system's list of
> trusted CAs instead of enabling this option.
 */
  Secure?: boolean;
  /** Indicates whether this is an official registry (i.e., Docker Hub / docker.io)
   */
  Official?: boolean;
} | null;

export type RegistryServiceConfigIndexConfigs = { [key: string]: IndexInfo };

/**
 * RegistryServiceConfig stores daemon registry services configuration.

 */
export type RegistryServiceConfig = {
  /** List of IP ranges to which nondistributable artifacts can be pushed,
using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).

Some images (for example, Windows base images) contain artifacts
whose distribution is restricted by license. When these images are
pushed to a registry, restricted artifacts are not included.

This configuration override this behavior, and enables the daemon to
push nondistributable artifacts to all registries whose resolved IP
address is within the subnet described by the CIDR syntax.

This option is useful when pushing images containing
nondistributable artifacts to a registry on an air-gapped network so
hosts on that network can pull the images without connecting to
another server.

> **Warning**: Nondistributable artifacts typically have restrictions
> on how and where they can be distributed and shared. Only use this
> feature to push artifacts to private registries and ensure that you
> are in compliance with any terms that cover redistributing
> nondistributable artifacts.
 */
  AllowNondistributableArtifactsCIDRs?: string[];
  /** List of registry hostnames to which nondistributable artifacts can be
pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.

Some images (for example, Windows base images) contain artifacts
whose distribution is restricted by license. When these images are
pushed to a registry, restricted artifacts are not included.

This configuration override this behavior for the specified
registries.

This option is useful when pushing images containing
nondistributable artifacts to a registry on an air-gapped network so
hosts on that network can pull the images without connecting to
another server.

> **Warning**: Nondistributable artifacts typically have restrictions
> on how and where they can be distributed and shared. Only use this
> feature to push artifacts to private registries and ensure that you
> are in compliance with any terms that cover redistributing
> nondistributable artifacts.
 */
  AllowNondistributableArtifactsHostnames?: string[];
  /** List of IP ranges of insecure registries, using the CIDR syntax
([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries
accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates
from unknown CAs) communication.

By default, local registries (`127.0.0.0/8`) are configured as
insecure. All other registries are secure. Communicating with an
insecure registry is not possible if the daemon assumes that registry
is secure.

This configuration override this behavior, insecure communication with
registries whose resolved IP address is within the subnet described by
the CIDR syntax.

Registries can also be marked insecure by hostname. Those registries
are listed under `IndexConfigs` and have their `Secure` field set to
`false`.

> **Warning**: Using this option can be useful when running a local
> registry, but introduces security vulnerabilities. This option
> should therefore ONLY be used for testing purposes. For increased
> security, users should add their CA to their system's list of trusted
> CAs instead of enabling this option.
 */
  InsecureRegistryCIDRs?: string[];
  IndexConfigs?: RegistryServiceConfigIndexConfigs;
  /** List of registry URLs that act as a mirror for the official
(`docker.io`) registry.
 */
  Mirrors?: string[];
} | null;

/**
 * Available plugins per type.

<p><br /></p>

> **Note**: Only unmanaged (V1) plugins are included in this list.
> V1 plugins are "lazily" loaded, and are not returned in this list
> if there is no resource using the plugin.

 */
export interface PluginsInfo {
  /** Names of available volume-drivers, and network-driver plugins. */
  Volume?: string[];
  /** Names of available network-drivers, and network-driver plugins. */
  Network?: string[];
  /** Names of available authorization plugins. */
  Authorization?: string[];
  /** Names of available logging-drivers, and logging-driver plugins. */
  Log?: string[];
}

export type SystemInfoDefaultAddressPoolsItem = {
  /** The network address in CIDR format */
  Base?: string;
  /** The network pool size */
  Size?: number;
};

/**
 * Represents the isolation technology to use as a default for containers.
The supported values are platform-specific.

If no isolation value is specified on daemon start, on Windows client,
the default is `hyperv`, and on Windows server, the default is `process`.

This option is currently not used on other platforms.

 */
export type SystemInfoIsolation =
  typeof SystemInfoIsolation[keyof typeof SystemInfoIsolation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SystemInfoIsolation = {
  default: 'default',
  hyperv: 'hyperv',
  process: 'process',
} as const;

/**
 * List of [OCI compliant](https://github.com/opencontainers/runtime-spec)
runtimes configured on the daemon. Keys hold the "name" used to
reference the runtime.

The Docker daemon relies on an OCI compliant runtime (invoked via the
`containerd` daemon) as its interface to the Linux kernel namespaces,
cgroups, and SELinux.

The default runtime is `runc`, and automatically configured. Additional
runtimes can be configured by the user and will be listed here.

 */
export type SystemInfoRuntimes = { [key: string]: Runtime };

/**
 * The version of the cgroup.

 */
export type SystemInfoCgroupVersion =
  typeof SystemInfoCgroupVersion[keyof typeof SystemInfoCgroupVersion];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SystemInfoCgroupVersion = {
  NUMBER_1: '1',
  NUMBER_2: '2',
} as const;

/**
 * The driver to use for managing cgroups.

 */
export type SystemInfoCgroupDriver =
  typeof SystemInfoCgroupDriver[keyof typeof SystemInfoCgroupDriver];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SystemInfoCgroupDriver = {
  cgroupfs: 'cgroupfs',
  systemd: 'systemd',
  none: 'none',
} as const;

export interface SystemInfo {
  /** Unique identifier of the daemon.

<p><br /></p>

> **Note**: The format of the ID itself is not part of the API, and
> should not be considered stable.
 */
  ID?: string;
  /** Total number of containers on the host. */
  Containers?: number;
  /** Number of containers with status `"running"`.
   */
  ContainersRunning?: number;
  /** Number of containers with status `"paused"`.
   */
  ContainersPaused?: number;
  /** Number of containers with status `"stopped"`.
   */
  ContainersStopped?: number;
  /** Total number of images on the host.

Both _tagged_ and _untagged_ (dangling) images are counted.
 */
  Images?: number;
  /** Name of the storage driver in use. */
  Driver?: string;
  /** Information specific to the storage driver, provided as
"label" / "value" pairs.

This information is provided by the storage driver, and formatted
in a way consistent with the output of `docker info` on the command
line.

<p><br /></p>

> **Note**: The information returned in this field, including the
> formatting of values and labels, should not be considered stable,
> and may change without notice.
 */
  DriverStatus?: string[][];
  /** Root directory of persistent Docker state.

Defaults to `/var/lib/docker` on Linux, and `C:\ProgramData\docker`
on Windows.
 */
  DockerRootDir?: string;
  Plugins?: PluginsInfo;
  /** Indicates if the host has memory limit support enabled. */
  MemoryLimit?: boolean;
  /** Indicates if the host has memory swap limit support enabled. */
  SwapLimit?: boolean;
  /** Indicates if the host has kernel memory limit support enabled.

<p><br /></p>

> **Deprecated**: This field is deprecated as the kernel 5.4 deprecated
> `kmem.limit_in_bytes`.
 */
  KernelMemory?: boolean;
  /** Indicates if the host has kernel memory TCP limit support enabled.

Kernel memory TCP limits are not supported when using cgroups v2, which
does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.
 */
  KernelMemoryTCP?: boolean;
  /** Indicates if CPU CFS(Completely Fair Scheduler) period is supported by
the host.
 */
  CpuCfsPeriod?: boolean;
  /** Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by
the host.
 */
  CpuCfsQuota?: boolean;
  /** Indicates if CPU Shares limiting is supported by the host.
   */
  CPUShares?: boolean;
  /** Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.

See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
 */
  CPUSet?: boolean;
  /** Indicates if the host kernel has PID limit support enabled. */
  PidsLimit?: boolean;
  /** Indicates if OOM killer disable is supported on the host. */
  OomKillDisable?: boolean;
  /** Indicates IPv4 forwarding is enabled. */
  IPv4Forwarding?: boolean;
  /** Indicates if `bridge-nf-call-iptables` is available on the host. */
  BridgeNfIptables?: boolean;
  /** Indicates if `bridge-nf-call-ip6tables` is available on the host. */
  BridgeNfIp6tables?: boolean;
  /** Indicates if the daemon is running in debug-mode / with debug-level
logging enabled.
 */
  Debug?: boolean;
  /** The total number of file Descriptors in use by the daemon process.

This information is only returned if debug-mode is enabled.
 */
  NFd?: number;
  /** The  number of goroutines that currently exist.

This information is only returned if debug-mode is enabled.
 */
  NGoroutines?: number;
  /** Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)
format with nano-seconds.
 */
  SystemTime?: string;
  /** The logging driver to use as a default for new containers.
   */
  LoggingDriver?: string;
  /** The driver to use for managing cgroups.
   */
  CgroupDriver?: SystemInfoCgroupDriver;
  /** The version of the cgroup.
   */
  CgroupVersion?: SystemInfoCgroupVersion;
  /** Number of event listeners subscribed. */
  NEventsListener?: number;
  /** Kernel version of the host.

On Linux, this information obtained from `uname`. On Windows this
information is queried from the <kbd>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\</kbd>
registry value, for example _"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)"_.
 */
  KernelVersion?: string;
  /** Name of the host's operating system, for example: "Ubuntu 16.04.2 LTS"
or "Windows Server 2016 Datacenter"
 */
  OperatingSystem?: string;
  /** Version of the host's operating system

<p><br /></p>

> **Note**: The information returned in this field, including its
> very existence, and the formatting of values, should not be considered
> stable, and may change without notice.
 */
  OSVersion?: string;
  /** Generic type of the operating system of the host, as returned by the
Go runtime (`GOOS`).

Currently returned values are "linux" and "windows". A full list of
possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
 */
  OSType?: string;
  /** Hardware architecture of the host, as returned by the Go runtime
(`GOARCH`).

A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).
 */
  Architecture?: string;
  /** The number of logical CPUs usable by the daemon.

The number of available CPUs is checked by querying the operating
system when the daemon starts. Changes to operating system CPU
allocation after the daemon is started are not reflected.
 */
  NCPU?: number;
  /** Total amount of physical memory available on the host, in bytes.
   */
  MemTotal?: number;
  /** Address / URL of the index server that is used for image search,
and as a default for user authentication for Docker Hub and Docker Cloud.
 */
  IndexServerAddress?: string;
  RegistryConfig?: RegistryServiceConfig;
  GenericResources?: GenericResources;
  /** HTTP-proxy configured for the daemon. This value is obtained from the
[`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
are masked in the API response.

Containers do not automatically inherit this configuration.
 */
  HttpProxy?: string;
  /** HTTPS-proxy configured for the daemon. This value is obtained from the
[`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.
Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL
are masked in the API response.

Containers do not automatically inherit this configuration.
 */
  HttpsProxy?: string;
  /** Comma-separated list of domain extensions for which no proxy should be
used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)
environment variable.

Containers do not automatically inherit this configuration.
 */
  NoProxy?: string;
  /** Hostname of the host. */
  Name?: string;
  /** User-defined labels (key/value metadata) as set on the daemon.

<p><br /></p>

> **Note**: When part of a Swarm, nodes can both have _daemon_ labels,
> set through the daemon configuration, and _node_ labels, set from a
> manager node in the Swarm. Node labels are not included in this
> field. Node labels can be retrieved using the `/nodes/(id)` endpoint
> on a manager node in the Swarm.
 */
  Labels?: string[];
  /** Indicates if experimental features are enabled on the daemon.
   */
  ExperimentalBuild?: boolean;
  /** Version string of the daemon.

> **Note**: the [standalone Swarm API](/swarm/swarm-api/)
> returns the Swarm version instead of the daemon  version, for example
> `swarm/1.2.8`.
 */
  ServerVersion?: string;
  /** URL of the distributed storage backend.


The storage backend is used for multihost networking (to store
network and endpoint information) and by the node discovery mechanism.

<p><br /></p>

> **Deprecated**: This field is only propagated when using standalone Swarm
> mode, and overlay networking using an external k/v store. Overlay
> networks with Swarm mode enabled use the built-in raft store, and
> this field will be empty.
 */
  ClusterStore?: string;
  /** The network endpoint that the Engine advertises for the purpose of
node discovery. ClusterAdvertise is a `host:port` combination on which
the daemon is reachable by other hosts.

<p><br /></p>

> **Deprecated**: This field is only propagated when using standalone Swarm
> mode, and overlay networking using an external k/v store. Overlay
> networks with Swarm mode enabled use the built-in raft store, and
> this field will be empty.
 */
  ClusterAdvertise?: string;
  /** List of [OCI compliant](https://github.com/opencontainers/runtime-spec)
runtimes configured on the daemon. Keys hold the "name" used to
reference the runtime.

The Docker daemon relies on an OCI compliant runtime (invoked via the
`containerd` daemon) as its interface to the Linux kernel namespaces,
cgroups, and SELinux.

The default runtime is `runc`, and automatically configured. Additional
runtimes can be configured by the user and will be listed here.
 */
  Runtimes?: SystemInfoRuntimes;
  /** Name of the default OCI runtime that is used when starting containers.

The default can be overridden per-container at create time.
 */
  DefaultRuntime?: string;
  Swarm?: SwarmInfo;
  /** Indicates if live restore is enabled.

If enabled, containers are kept running when the daemon is shutdown
or upon daemon start if running containers are detected.
 */
  LiveRestoreEnabled?: boolean;
  /** Represents the isolation technology to use as a default for containers.
The supported values are platform-specific.

If no isolation value is specified on daemon start, on Windows client,
the default is `hyperv`, and on Windows server, the default is `process`.

This option is currently not used on other platforms.
 */
  Isolation?: SystemInfoIsolation;
  /** Name and, optional, path of the `docker-init` binary.

If the path is omitted, the daemon searches the host's `$PATH` for the
binary and uses the first result.
 */
  InitBinary?: string;
  ContainerdCommit?: Commit;
  RuncCommit?: Commit;
  InitCommit?: Commit;
  /** List of security features that are enabled on the daemon, such as
apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.

Additional configuration options for each security feature may
be present, and are included as a comma-separated list of key/value
pairs.
 */
  SecurityOptions?: string[];
  /** Reports a summary of the product license on the daemon.

If a commercial license has been applied to the daemon, information
such as number of nodes, and expiration are included.
 */
  ProductLicense?: string;
  /** List of custom default address pools for local networks, which can be
specified in the daemon.json file or dockerd option.

Example: a Base "10.10.0.0/16" with Size 24 will define the set of 256
10.10.[0-255].0/24 address pools.
 */
  DefaultAddressPools?: SystemInfoDefaultAddressPoolsItem[];
  /** List of warnings / informational messages about missing features, or
issues related to the daemon configuration.

These messages can be printed by the client as information to the user.
 */
  Warnings?: string[];
}

/**
 * Key/value pairs of strings with additional information about the
component. These values are intended for informational purposes
only, and their content is not defined, and not part of the API
specification.

These messages can be printed by the client as information to the user.

 */
export type SystemVersionComponentsItemDetails = { [key: string]: any };

export type SystemVersionComponentsItem = {
  /** Name of the component
   */
  Name: string;
  /** Version of the component
   */
  Version: string;
  /** Key/value pairs of strings with additional information about the
component. These values are intended for informational purposes
only, and their content is not defined, and not part of the API
specification.

These messages can be printed by the client as information to the user.
 */
  Details?: SystemVersionComponentsItemDetails;
};

export type SystemVersionPlatform = {
  Name: string;
};

/**
 * Response of Engine API: GET "/version"

 */
export interface SystemVersion {
  Platform?: SystemVersionPlatform;
  /** Information about system components
   */
  Components?: SystemVersionComponentsItem[];
  /** The version of the daemon */
  Version?: string;
  /** The default (and highest) API version that is supported by the daemon
   */
  ApiVersion?: string;
  /** The minimum API version that is supported by the daemon
   */
  MinAPIVersion?: string;
  /** The Git commit of the source code that was used to build the daemon
   */
  GitCommit?: string;
  /** The version Go used to compile the daemon, and the version of the Go
runtime in use.
 */
  GoVersion?: string;
  /** The operating system that the daemon is running on ("linux" or "windows")
   */
  Os?: string;
  /** The architecture that the daemon is running on
   */
  Arch?: string;
  /** The kernel version (`uname -r`) that the daemon is running on.

This field is omitted when empty.
 */
  KernelVersion?: string;
  /** Indicates if the daemon is started with experimental features enabled.

This field is omitted when empty / false.
 */
  Experimental?: boolean;
  /** The date and time that the daemon was compiled.
   */
  BuildTime?: string;
}

/**
 * container waiting error, if any
 */
export interface ContainerWaitExitError {
  /** Details of an error */
  Message?: string;
}

/**
 * OK response to ContainerWait operation
 */
export interface ContainerWaitResponse {
  /** Exit code of the container */
  StatusCode: number;
  Error?: ContainerWaitExitError;
}

/**
 * String representation of the container state. Can be one of "created",
"running", "paused", "restarting", "removing", "exited", or "dead".

 */
export type ContainerStateStatus =
  typeof ContainerStateStatus[keyof typeof ContainerStateStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ContainerStateStatus = {
  created: 'created',
  running: 'running',
  paused: 'paused',
  restarting: 'restarting',
  removing: 'removing',
  exited: 'exited',
  dead: 'dead',
} as const;

/**
 * ContainerState stores container's running state. It's part of ContainerJSONBase
and will be returned by the "inspect" command.

 */
export type ContainerState = {
  /** String representation of the container state. Can be one of "created",
"running", "paused", "restarting", "removing", "exited", or "dead".
 */
  Status?: ContainerStateStatus;
  /** Whether this container is running.

Note that a running container can be _paused_. The `Running` and `Paused`
booleans are not mutually exclusive:

When pausing a container (on Linux), the freezer cgroup is used to suspend
all processes in the container. Freezing the process requires the process to
be running. As a result, paused containers are both `Running` _and_ `Paused`.

Use the `Status` field instead to determine if a container's state is "running".
 */
  Running?: boolean;
  /** Whether this container is paused. */
  Paused?: boolean;
  /** Whether this container is restarting. */
  Restarting?: boolean;
  /** Whether this container has been killed because it ran out of memory.
   */
  OOMKilled?: boolean;
  Dead?: boolean;
  /** The process ID of this container */
  Pid?: number;
  /** The last exit code of this container */
  ExitCode?: number;
  Error?: string;
  /** The time when this container was last started. */
  StartedAt?: string;
  /** The time when this container last exited. */
  FinishedAt?: string;
  Health?: Health;
} | null;

/**
 * User-defined key/value metadata.
 */
export type ConfigSpecLabels = { [key: string]: string };

export interface ConfigSpec {
  /** User-defined name of the config. */
  Name?: string;
  /** User-defined key/value metadata. */
  Labels?: ConfigSpecLabels;
  /** Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
config data.
 */
  Data?: string;
  Templating?: Driver;
}

export interface Config {
  ID?: string;
  Version?: ObjectVersion;
  CreatedAt?: string;
  UpdatedAt?: string;
  Spec?: ConfigSpec;
}

/**
 * User-defined key/value metadata.
 */
export type SecretSpecLabels = { [key: string]: string };

export interface SecretSpec {
  /** User-defined name of the secret. */
  Name?: string;
  /** User-defined key/value metadata. */
  Labels?: SecretSpecLabels;
  /** Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
data to store as secret.

This field is only used to _create_ a secret, and is not returned by
other endpoints.
 */
  Data?: string;
  Driver?: Driver;
  Templating?: Driver;
}

export interface Secret {
  ID?: string;
  Version?: ObjectVersion;
  CreatedAt?: string;
  UpdatedAt?: string;
  Spec?: SecretSpec;
}

/**
 * Key/value map of driver-specific options.
 */
export type DriverOptions = { [key: string]: string };

/**
 * Driver represents a driver (network, logging, secrets).
 */
export interface Driver {
  /** Name of the driver. */
  Name: string;
  /** Key/value map of driver-specific options. */
  Options?: DriverOptions;
}

export type ContainerSummaryNetworkSettingsNetworks = {
  [key: string]: EndpointSettings;
};

/**
 * A summary of the container's network settings
 */
export type ContainerSummaryNetworkSettings = {
  Networks?: ContainerSummaryNetworkSettingsNetworks;
};

export type ContainerSummaryHostConfig = {
  NetworkMode?: string;
};

/**
 * User-defined key/value metadata.
 */
export type ContainerSummaryLabels = { [key: string]: string };

export interface ContainerSummary {
  /** The ID of this container */
  Id?: string;
  /** The names that this container has been given */
  Names?: string[];
  /** The name of the image used when creating this container */
  Image?: string;
  /** The ID of the image that this container was created from */
  ImageID?: string;
  /** Command to run when starting the container */
  Command?: string;
  /** When the container was created */
  Created?: number;
  /** The ports exposed by this container */
  Ports?: Port[];
  /** The size of files that have been created or changed by this container */
  SizeRw?: number;
  /** The total size of all the files in this container */
  SizeRootFs?: number;
  /** User-defined key/value metadata. */
  Labels?: ContainerSummaryLabels;
  /** The state of this container (e.g. `Exited`) */
  State?: string;
  /** Additional human-readable status of this container (e.g. `Exit 0`) */
  Status?: string;
  HostConfig?: ContainerSummaryHostConfig;
  /** A summary of the container's network settings */
  NetworkSettings?: ContainerSummaryNetworkSettings;
  Mounts?: MountPoint[];
}

export interface ServiceUpdateResponse {
  /** Optional warning messages */
  Warnings?: string[];
}

export interface ImageDeleteResponseItem {
  /** The image ID of an image that was untagged */
  Untagged?: string;
  /** The image ID of an image that was deleted */
  Deleted?: string;
}

/**
 * The status of the service when it is in one of ReplicatedJob or
GlobalJob modes. Absent on Replicated and Global mode services. The
JobIteration is an ObjectVersion, but unlike the Service's version,
does not need to be sent with an update request.

 */
export type ServiceJobStatus = {
  JobIteration?: ObjectVersion;
  /** The last time, as observed by the server, that this job was
started.
 */
  LastExecution?: string;
};

/**
 * The status of the service's tasks. Provided only when requested as
part of a ServiceList operation.

 */
export type ServiceServiceStatus = {
  /** The number of tasks for the service currently in the Running state.
   */
  RunningTasks?: number;
  /** The number of tasks for the service desired to be running.
For replicated services, this is the replica count from the
service spec. For global services, this is computed by taking
count of all tasks for the service with a Desired State other
than Shutdown.
 */
  DesiredTasks?: number;
  /** The number of tasks for a job that are in the Completed state.
This field must be cross-referenced with the service type, as the
value of 0 may mean the service is not in a job mode, or it may
mean the job-mode service has no tasks yet Completed.
 */
  CompletedTasks?: number;
};

export interface Service {
  ID?: string;
  Version?: ObjectVersion;
  CreatedAt?: string;
  UpdatedAt?: string;
  Spec?: ServiceSpec;
  Endpoint?: ServiceEndpoint;
  /** The status of a service update. */
  UpdateStatus?: ServiceUpdateStatus;
  /** The status of the service's tasks. Provided only when requested as
part of a ServiceList operation.
 */
  ServiceStatus?: ServiceServiceStatus;
  /** The status of the service when it is in one of ReplicatedJob or
GlobalJob modes. Absent on Replicated and Global mode services. The
JobIteration is an ObjectVersion, but unlike the Service's version,
does not need to be sent with an update request.
 */
  JobStatus?: ServiceJobStatus;
}

export type ServiceUpdateStatusState =
  typeof ServiceUpdateStatusState[keyof typeof ServiceUpdateStatusState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceUpdateStatusState = {
  updating: 'updating',
  paused: 'paused',
  completed: 'completed',
} as const;

/**
 * The status of a service update.
 */
export type ServiceUpdateStatus = {
  State?: ServiceUpdateStatusState;
  StartedAt?: string;
  CompletedAt?: string;
  Message?: string;
};

export type ServiceEndpointVirtualIPsItem = {
  NetworkID?: string;
  Addr?: string;
};

/**
 * The mode of resolution to use for internal load balancing between tasks.

 */
export type EndpointSpecMode =
  typeof EndpointSpecMode[keyof typeof EndpointSpecMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EndpointSpecMode = {
  vip: 'vip',
  dnsrr: 'dnsrr',
} as const;

/**
 * Properties that can be configured to access and load balance a service.
 */
export interface EndpointSpec {
  /** The mode of resolution to use for internal load balancing between tasks.
   */
  Mode?: EndpointSpecMode;
  /** List of exposed ports that this service is accessible on from the
outside. Ports can only be provided if `vip` resolution mode is used.
 */
  Ports?: EndpointPortConfig[];
}

/**
 * The mode in which port is published.

<p><br /></p>

- "ingress" makes the target port accessible on every node,
  regardless of whether there is a task for the service running on
  that node or not.
- "host" bypasses the routing mesh and publish the port directly on
  the swarm node where that service is running.

 */
export type EndpointPortConfigPublishMode =
  typeof EndpointPortConfigPublishMode[keyof typeof EndpointPortConfigPublishMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EndpointPortConfigPublishMode = {
  ingress: 'ingress',
  host: 'host',
} as const;

export type EndpointPortConfigProtocol =
  typeof EndpointPortConfigProtocol[keyof typeof EndpointPortConfigProtocol];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EndpointPortConfigProtocol = {
  tcp: 'tcp',
  udp: 'udp',
  sctp: 'sctp',
} as const;

export interface EndpointPortConfig {
  Name?: string;
  Protocol?: EndpointPortConfigProtocol;
  /** The port inside the container. */
  TargetPort?: number;
  /** The port on the swarm hosts. */
  PublishedPort?: number;
  /** The mode in which port is published.

<p><br /></p>

- "ingress" makes the target port accessible on every node,
  regardless of whether there is a task for the service running on
  that node or not.
- "host" bypasses the routing mesh and publish the port directly on
  the swarm node where that service is running.
 */
  PublishMode?: EndpointPortConfigPublishMode;
}

export type ServiceEndpoint = {
  Spec?: EndpointSpec;
  Ports?: EndpointPortConfig[];
  VirtualIPs?: ServiceEndpointVirtualIPsItem[];
};

/**
 * The order of operations when rolling back a task. Either the old
task is shut down before the new task is started, or the new task
is started before the old task is shut down.

 */
export type ServiceSpecRollbackConfigOrder =
  typeof ServiceSpecRollbackConfigOrder[keyof typeof ServiceSpecRollbackConfigOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceSpecRollbackConfigOrder = {
  'stop-first': 'stop-first',
  'start-first': 'start-first',
} as const;

/**
 * Action to take if an rolled back task fails to run, or stops
running during the rollback.

 */
export type ServiceSpecRollbackConfigFailureAction =
  typeof ServiceSpecRollbackConfigFailureAction[keyof typeof ServiceSpecRollbackConfigFailureAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceSpecRollbackConfigFailureAction = {
  continue: 'continue',
  pause: 'pause',
} as const;

/**
 * Specification for the rollback strategy of the service.
 */
export type ServiceSpecRollbackConfig = {
  /** Maximum number of tasks to be rolled back in one iteration (0 means
unlimited parallelism).
 */
  Parallelism?: number;
  /** Amount of time between rollback iterations, in nanoseconds.
   */
  Delay?: number;
  /** Action to take if an rolled back task fails to run, or stops
running during the rollback.
 */
  FailureAction?: ServiceSpecRollbackConfigFailureAction;
  /** Amount of time to monitor each rolled back task for failures, in
nanoseconds.
 */
  Monitor?: number;
  /** The fraction of tasks that may fail during a rollback before the
failure action is invoked, specified as a floating point number
between 0 and 1.
 */
  MaxFailureRatio?: number;
  /** The order of operations when rolling back a task. Either the old
task is shut down before the new task is started, or the new task
is started before the old task is shut down.
 */
  Order?: ServiceSpecRollbackConfigOrder;
};

/**
 * Specification for the update strategy of the service.
 */
export type ServiceSpecUpdateConfig = {
  /** Maximum number of tasks to be updated in one iteration (0 means
unlimited parallelism).
 */
  Parallelism?: number;
  /** Amount of time between updates, in nanoseconds. */
  Delay?: number;
  /** Action to take if an updated task fails to run, or stops running
during the update.
 */
  FailureAction?: ServiceSpecUpdateConfigFailureAction;
  /** Amount of time to monitor each updated task for failures, in
nanoseconds.
 */
  Monitor?: number;
  /** The fraction of tasks that may fail during an update before the
failure action is invoked, specified as a floating point number
between 0 and 1.
 */
  MaxFailureRatio?: number;
  /** The order of operations when rolling out an updated task. Either
the old task is shut down before the new task is started, or the
new task is started before the old task is shut down.
 */
  Order?: ServiceSpecUpdateConfigOrder;
};

/**
 * User modifiable configuration for a service.
 */
export interface ServiceSpec {
  /** Name of the service. */
  Name?: string;
  /** User-defined key/value metadata. */
  Labels?: ServiceSpecLabels;
  TaskTemplate?: TaskSpec;
  /** Scheduling mode for the service. */
  Mode?: ServiceSpecMode;
  /** Specification for the update strategy of the service. */
  UpdateConfig?: ServiceSpecUpdateConfig;
  /** Specification for the rollback strategy of the service. */
  RollbackConfig?: ServiceSpecRollbackConfig;
  /** Specifies which networks the service should attach to. */
  Networks?: NetworkAttachmentConfig[];
  EndpointSpec?: EndpointSpec;
}

/**
 * The order of operations when rolling out an updated task. Either
the old task is shut down before the new task is started, or the
new task is started before the old task is shut down.

 */
export type ServiceSpecUpdateConfigOrder =
  typeof ServiceSpecUpdateConfigOrder[keyof typeof ServiceSpecUpdateConfigOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceSpecUpdateConfigOrder = {
  'stop-first': 'stop-first',
  'start-first': 'start-first',
} as const;

/**
 * Action to take if an updated task fails to run, or stops running
during the update.

 */
export type ServiceSpecUpdateConfigFailureAction =
  typeof ServiceSpecUpdateConfigFailureAction[keyof typeof ServiceSpecUpdateConfigFailureAction];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServiceSpecUpdateConfigFailureAction = {
  continue: 'continue',
  pause: 'pause',
  rollback: 'rollback',
} as const;

/**
 * The mode used for services which run a task to the completed state
on each valid node.

 */
export type ServiceSpecModeGlobalJob = { [key: string]: any };

/**
 * The mode used for services with a finite number of tasks that run
to a completed state.

 */
export type ServiceSpecModeReplicatedJob = {
  /** The maximum number of replicas to run simultaneously.
   */
  MaxConcurrent?: number;
  /** The total number of replicas desired to reach the Completed
state. If unset, will default to the value of `MaxConcurrent`
 */
  TotalCompletions?: number;
};

export type ServiceSpecModeGlobal = { [key: string]: any };

export type ServiceSpecModeReplicated = {
  Replicas?: number;
};

/**
 * Scheduling mode for the service.
 */
export type ServiceSpecMode = {
  Replicated?: ServiceSpecModeReplicated;
  Global?: ServiceSpecModeGlobal;
  /** The mode used for services with a finite number of tasks that run
to a completed state.
 */
  ReplicatedJob?: ServiceSpecModeReplicatedJob;
  /** The mode used for services which run a task to the completed state
on each valid node.
 */
  GlobalJob?: ServiceSpecModeGlobalJob;
};

/**
 * User-defined key/value metadata.
 */
export type ServiceSpecLabels = { [key: string]: string };

export type TaskStatusContainerStatus = {
  ContainerID?: string;
  PID?: number;
  ExitCode?: number;
};

/**
 * User-defined key/value metadata.
 */
export type TaskLabels = { [key: string]: string };

export type TaskState = typeof TaskState[keyof typeof TaskState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaskState = {
  new: 'new',
  allocated: 'allocated',
  pending: 'pending',
  assigned: 'assigned',
  accepted: 'accepted',
  preparing: 'preparing',
  ready: 'ready',
  starting: 'starting',
  running: 'running',
  complete: 'complete',
  shutdown: 'shutdown',
  failed: 'failed',
  rejected: 'rejected',
  remove: 'remove',
  orphaned: 'orphaned',
} as const;

export type TaskStatus = {
  Timestamp?: string;
  State?: TaskState;
  Message?: string;
  Err?: string;
  ContainerStatus?: TaskStatusContainerStatus;
};

export interface Task {
  /** The ID of the task. */
  ID?: string;
  Version?: ObjectVersion;
  CreatedAt?: string;
  UpdatedAt?: string;
  /** Name of the task. */
  Name?: string;
  /** User-defined key/value metadata. */
  Labels?: TaskLabels;
  Spec?: TaskSpec;
  /** The ID of the service this task is part of. */
  ServiceID?: string;
  Slot?: number;
  /** The ID of the node that this task is on. */
  NodeID?: string;
  AssignedGenericResources?: GenericResources;
  Status?: TaskStatus;
  DesiredState?: TaskState;
  JobIteration?: ObjectVersion;
}

export type TaskSpecLogDriverOptions = { [key: string]: string };

/**
 * Specifies the log driver to use for tasks created from this spec. If
not present, the default one for the swarm will be used, finally
falling back to the engine default if not specified.

 */
export type TaskSpecLogDriver = {
  Name?: string;
  Options?: TaskSpecLogDriverOptions;
};

export type TaskSpecPlacementPreferencesItemSpread = {
  /** label descriptor, such as `engine.labels.az`.
   */
  SpreadDescriptor?: string;
};

export type TaskSpecPlacementPreferencesItem = {
  Spread?: TaskSpecPlacementPreferencesItemSpread;
};

export type TaskSpecPlacement = {
  /** An array of constraint expressions to limit the set of nodes where
a task can be scheduled. Constraint expressions can either use a
_match_ (`==`) or _exclude_ (`!=`) rule. Multiple constraints find
nodes that satisfy every expression (AND match). Constraints can
match node or Docker Engine labels as follows:

node attribute       | matches                        | example
---------------------|--------------------------------|-----------------------------------------------
`node.id`            | Node ID                        | `node.id==2ivku8v2gvtg4`
`node.hostname`      | Node hostname                  | `node.hostname!=node-2`
`node.role`          | Node role (`manager`/`worker`) | `node.role==manager`
`node.platform.os`   | Node operating system          | `node.platform.os==windows`
`node.platform.arch` | Node architecture              | `node.platform.arch==x86_64`
`node.labels`        | User-defined node labels       | `node.labels.security==high`
`engine.labels`      | Docker Engine's labels         | `engine.labels.operatingsystem==ubuntu-14.04`

`engine.labels` apply to Docker Engine labels like operating system,
drivers, etc. Swarm administrators add `node.labels` for operational
purposes by using the [`node update endpoint`](#operation/NodeUpdate).
 */
  Constraints?: string[];
  /** Preferences provide a way to make the scheduler aware of factors
such as topology. They are provided in order from highest to
lowest precedence.
 */
  Preferences?: TaskSpecPlacementPreferencesItem[];
  /** Maximum number of replicas for per node (default value is 0, which
is unlimited)
 */
  MaxReplicas?: number;
  /** Platforms stores all the platforms that the service's image can
run on. This field is used in the platform filter for scheduling.
If empty, then the platform filter is off, meaning there are no
scheduling restrictions.
 */
  Platforms?: Platform[];
};

/**
 * Condition for restart.
 */
export type TaskSpecRestartPolicyCondition =
  typeof TaskSpecRestartPolicyCondition[keyof typeof TaskSpecRestartPolicyCondition];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaskSpecRestartPolicyCondition = {
  none: 'none',
  'on-failure': 'on-failure',
  any: 'any',
} as const;

/**
 * Specification for the restart policy which applies to containers
created as part of this service.

 */
export type TaskSpecRestartPolicy = {
  /** Condition for restart. */
  Condition?: TaskSpecRestartPolicyCondition;
  /** Delay between restart attempts. */
  Delay?: number;
  /** Maximum attempts to restart a given container before giving up
(default value is 0, which is ignored).
 */
  MaxAttempts?: number;
  /** Windows is the time window used to evaluate the restart policy
(default value is 0, which is unbounded).
 */
  Window?: number;
};

/**
 * Resource requirements which apply to each individual container created
as part of the service.

 */
export type TaskSpecResources = {
  Limits?: Limit;
  Reservations?: ResourceObject;
};

/**
 * Read-only spec type for non-swarm containers attached to swarm overlay
networks.

<p><br /></p>

> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
> mutually exclusive. PluginSpec is only used when the Runtime field
> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
> field is set to `attachment`.

 */
export type TaskSpecNetworkAttachmentSpec = {
  /** ID of the container represented by this task */
  ContainerID?: string;
};

/**
 * User modifiable task configuration.
 */
export interface TaskSpec {
  /** Plugin spec for the service.  *(Experimental release only.)*

<p><br /></p>

> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
> mutually exclusive. PluginSpec is only used when the Runtime field
> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
> field is set to `attachment`.
 */
  PluginSpec?: TaskSpecPluginSpec;
  /** Container spec for the service.

<p><br /></p>

> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
> mutually exclusive. PluginSpec is only used when the Runtime field
> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
> field is set to `attachment`.
 */
  ContainerSpec?: TaskSpecContainerSpec;
  /** Read-only spec type for non-swarm containers attached to swarm overlay
networks.

<p><br /></p>

> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
> mutually exclusive. PluginSpec is only used when the Runtime field
> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
> field is set to `attachment`.
 */
  NetworkAttachmentSpec?: TaskSpecNetworkAttachmentSpec;
  /** Resource requirements which apply to each individual container created
as part of the service.
 */
  Resources?: TaskSpecResources;
  /** Specification for the restart policy which applies to containers
created as part of this service.
 */
  RestartPolicy?: TaskSpecRestartPolicy;
  Placement?: TaskSpecPlacement;
  /** A counter that triggers an update even if no relevant parameters have
been changed.
 */
  ForceUpdate?: number;
  /** Runtime is the type of runtime specified for the task executor.
   */
  Runtime?: string;
  /** Specifies which networks the service should attach to. */
  Networks?: NetworkAttachmentConfig[];
  /** Specifies the log driver to use for tasks created from this spec. If
not present, the default one for the swarm will be used, finally
falling back to the engine default if not specified.
 */
  LogDriver?: TaskSpecLogDriver;
}

export type TaskSpecContainerSpecUlimitsItem = {
  /** Name of ulimit */
  Name?: string;
  /** Soft limit */
  Soft?: number;
  /** Hard limit */
  Hard?: number;
};

/**
 * Set kernel namedspaced parameters (sysctls) in the container.
The Sysctls option on services accepts the same sysctls as the
are supported on containers. Note that while the same sysctls are
supported, no guarantees or checks are made about their
suitability for a clustered environment, and it's up to the user
to determine whether a given sysctl will work properly in a
Service.

 */
export type TaskSpecContainerSpecSysctls = { [key: string]: string };

/**
 * Isolation technology of the containers running the service.
(Windows only)

 */
export type TaskSpecContainerSpecIsolation =
  typeof TaskSpecContainerSpecIsolation[keyof typeof TaskSpecContainerSpecIsolation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TaskSpecContainerSpecIsolation = {
  default: 'default',
  process: 'process',
  hyperv: 'hyperv',
} as const;

/**
 * Runtime represents a target that is not mounted into the
container but is used by the task

<p><br /><p>

> **Note**: `Configs.File` and `Configs.Runtime` are mutually
> exclusive

 */
export type TaskSpecContainerSpecConfigsItemRuntime = { [key: string]: any };

/**
 * File represents a specific target that is backed by a file.

<p><br /><p>

> **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive

 */
export type TaskSpecContainerSpecConfigsItemFile = {
  /** Name represents the final filename in the filesystem.
   */
  Name?: string;
  /** UID represents the file UID. */
  UID?: string;
  /** GID represents the file GID. */
  GID?: string;
  /** Mode represents the FileMode of the file. */
  Mode?: number;
};

export type TaskSpecContainerSpecConfigsItem = {
  /** File represents a specific target that is backed by a file.

<p><br /><p>

> **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive
 */
  File?: TaskSpecContainerSpecConfigsItemFile;
  /** Runtime represents a target that is not mounted into the
container but is used by the task

<p><br /><p>

> **Note**: `Configs.File` and `Configs.Runtime` are mutually
> exclusive
 */
  Runtime?: TaskSpecContainerSpecConfigsItemRuntime;
  /** ConfigID represents the ID of the specific config that we're
referencing.
 */
  ConfigID?: string;
  /** ConfigName is the name of the config that this references,
but this is just provided for lookup/display purposes. The
config in the reference will be identified by its ID.
 */
  ConfigName?: string;
};

/**
 * File represents a specific target that is backed by a file.

 */
export type TaskSpecContainerSpecSecretsItemFile = {
  /** Name represents the final filename in the filesystem.
   */
  Name?: string;
  /** UID represents the file UID. */
  UID?: string;
  /** GID represents the file GID. */
  GID?: string;
  /** Mode represents the FileMode of the file. */
  Mode?: number;
};

export type TaskSpecContainerSpecSecretsItem = {
  /** File represents a specific target that is backed by a file.
   */
  File?: TaskSpecContainerSpecSecretsItemFile;
  /** SecretID represents the ID of the specific secret that we're
referencing.
 */
  SecretID?: string;
  /** SecretName is the name of the secret that this references,
but this is just provided for lookup/display purposes. The
secret in the reference will be identified by its ID.
 */
  SecretName?: string;
};

/**
 * Specification for DNS related configurations in resolver configuration
file (`resolv.conf`).

 */
export type TaskSpecContainerSpecDNSConfig = {
  /** The IP addresses of the name servers. */
  Nameservers?: string[];
  /** A search list for host-name lookup. */
  Search?: string[];
  /** A list of internal resolver variables to be modified (e.g.,
`debug`, `ndots:3`, etc.).
 */
  Options?: string[];
};

/**
 * Container spec for the service.

<p><br /></p>

> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
> mutually exclusive. PluginSpec is only used when the Runtime field
> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
> field is set to `attachment`.

 */
export type TaskSpecContainerSpec = {
  /** The image name to use for the container */
  Image?: string;
  /** User-defined key/value data. */
  Labels?: TaskSpecContainerSpecLabels;
  /** The command to be run in the image. */
  Command?: string[];
  /** Arguments to the command. */
  Args?: string[];
  /** The hostname to use for the container, as a valid
[RFC 1123](https://tools.ietf.org/html/rfc1123) hostname.
 */
  Hostname?: string;
  /** A list of environment variables in the form `VAR=value`.
   */
  Env?: string[];
  /** The working directory for commands to run in. */
  Dir?: string;
  /** The user inside the container. */
  User?: string;
  /** A list of additional groups that the container process will run as.
   */
  Groups?: string[];
  /** Security options for the container */
  Privileges?: TaskSpecContainerSpecPrivileges;
  /** Whether a pseudo-TTY should be allocated. */
  TTY?: boolean;
  /** Open `stdin` */
  OpenStdin?: boolean;
  /** Mount the container's root filesystem as read only. */
  ReadOnly?: boolean;
  /** Specification for mounts to be added to containers created as part
of the service.
 */
  Mounts?: Mount[];
  /** Signal to stop the container. */
  StopSignal?: string;
  /** Amount of time to wait for the container to terminate before
forcefully killing it.
 */
  StopGracePeriod?: number;
  HealthCheck?: HealthConfig;
  /** A list of hostname/IP mappings to add to the container's `hosts`
file. The format of extra hosts is specified in the
[hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html)
man page:

    IP_address canonical_hostname [aliases...]
 */
  Hosts?: string[];
  /** Specification for DNS related configurations in resolver configuration
file (`resolv.conf`).
 */
  DNSConfig?: TaskSpecContainerSpecDNSConfig;
  /** Secrets contains references to zero or more secrets that will be
exposed to the service.
 */
  Secrets?: TaskSpecContainerSpecSecretsItem[];
  /** Configs contains references to zero or more configs that will be
exposed to the service.
 */
  Configs?: TaskSpecContainerSpecConfigsItem[];
  /** Isolation technology of the containers running the service.
(Windows only)
 */
  Isolation?: TaskSpecContainerSpecIsolation;
  /** Run an init inside the container that forwards signals and reaps
processes. This field is omitted if empty, and the default (as
configured on the daemon) is used.
 */
  Init?: boolean | null;
  /** Set kernel namedspaced parameters (sysctls) in the container.
The Sysctls option on services accepts the same sysctls as the
are supported on containers. Note that while the same sysctls are
supported, no guarantees or checks are made about their
suitability for a clustered environment, and it's up to the user
to determine whether a given sysctl will work properly in a
Service.
 */
  Sysctls?: TaskSpecContainerSpecSysctls;
  /** A list of kernel capabilities to add to the default set
for the container.
 */
  CapabilityAdd?: string[];
  /** A list of kernel capabilities to drop from the default set
for the container.
 */
  CapabilityDrop?: string[];
  /** A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"
   */
  Ulimits?: TaskSpecContainerSpecUlimitsItem[];
};

/**
 * SELinux labels of the container
 */
export type TaskSpecContainerSpecPrivilegesSELinuxContext = {
  /** Disable SELinux */
  Disable?: boolean;
  /** SELinux user label */
  User?: string;
  /** SELinux role label */
  Role?: string;
  /** SELinux type label */
  Type?: string;
  /** SELinux level label */
  Level?: string;
};

/**
 * CredentialSpec for managed service account (Windows only)
 */
export type TaskSpecContainerSpecPrivilegesCredentialSpec = {
  /** Load credential spec from a Swarm Config with the given ID.
The specified config must also be present in the Configs
field with the Runtime property set.

<p><br /></p>


> **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
> and `CredentialSpec.Config` are mutually exclusive.
 */
  Config?: string;
  /** Load credential spec from this file. The file is read by
the daemon, and must be present in the `CredentialSpecs`
subdirectory in the docker data directory, which defaults
to `C:\ProgramData\Docker\` on Windows.

For example, specifying `spec.json` loads
`C:\ProgramData\Docker\CredentialSpecs\spec.json`.

<p><br /></p>

> **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
> and `CredentialSpec.Config` are mutually exclusive.
 */
  File?: string;
  /** Load credential spec from this value in the Windows
registry. The specified registry value must be located in:

`HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Virtualization\Containers\CredentialSpecs`

<p><br /></p>


> **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,
> and `CredentialSpec.Config` are mutually exclusive.
 */
  Registry?: string;
};

/**
 * Security options for the container
 */
export type TaskSpecContainerSpecPrivileges = {
  /** CredentialSpec for managed service account (Windows only) */
  CredentialSpec?: TaskSpecContainerSpecPrivilegesCredentialSpec;
  /** SELinux labels of the container */
  SELinuxContext?: TaskSpecContainerSpecPrivilegesSELinuxContext;
};

/**
 * User-defined key/value data.
 */
export type TaskSpecContainerSpecLabels = { [key: string]: string };

/**
 * Plugin spec for the service.  *(Experimental release only.)*

<p><br /></p>

> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
> mutually exclusive. PluginSpec is only used when the Runtime field
> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
> field is set to `attachment`.

 */
export type TaskSpecPluginSpec = {
  /** The name or 'alias' to use for the plugin. */
  Name?: string;
  /** The plugin image reference to use. */
  Remote?: string;
  /** Disable the plugin once scheduled. */
  Disabled?: boolean;
  PluginPrivilege?: PluginPrivilege[];
};

/**
 * JoinTokens contains the tokens workers and managers need to join the swarm.

 */
export interface JoinTokens {
  /** The token workers can use to join the swarm.
   */
  Worker?: string;
  /** The token managers can use to join the swarm.
   */
  Manager?: string;
}

export type SwarmAllOf = {
  JoinTokens?: JoinTokens;
};

export type Swarm = ClusterInfo & SwarmAllOf;

/**
 * The log driver to use for tasks created in the orchestrator if
unspecified by a service.

Updating this value only affects new tasks. Existing tasks continue
to use their previously configured log driver until recreated.

 */
export type SwarmSpecTaskDefaultsLogDriver = {
  /** The log driver to use as a default for new tasks.
   */
  Name?: string;
  /** Driver-specific options for the selectd log driver, specified
as key/value pairs.
 */
  Options?: SwarmSpecTaskDefaultsLogDriverOptions;
};

/**
 * Defaults for creating tasks in this cluster.
 */
export type SwarmSpecTaskDefaults = {
  /** The log driver to use for tasks created in the orchestrator if
unspecified by a service.

Updating this value only affects new tasks. Existing tasks continue
to use their previously configured log driver until recreated.
 */
  LogDriver?: SwarmSpecTaskDefaultsLogDriver;
};

/**
 * User modifiable swarm configuration.
 */
export interface SwarmSpec {
  /** Name of the swarm. */
  Name?: string;
  /** User-defined key/value metadata. */
  Labels?: SwarmSpecLabels;
  /** Orchestration configuration. */
  Orchestration?: SwarmSpecOrchestration;
  /** Raft configuration. */
  Raft?: SwarmSpecRaft;
  /** Dispatcher configuration. */
  Dispatcher?: SwarmSpecDispatcher;
  /** CA configuration. */
  CAConfig?: SwarmSpecCAConfig;
  /** Parameters related to encryption-at-rest. */
  EncryptionConfig?: SwarmSpecEncryptionConfig;
  /** Defaults for creating tasks in this cluster. */
  TaskDefaults?: SwarmSpecTaskDefaults;
}

/**
 * ClusterInfo represents information about the swarm as is returned by the
"/info" endpoint. Join-tokens are not included.

 */
export type ClusterInfo = {
  /** The ID of the swarm. */
  ID?: string;
  Version?: ObjectVersion;
  /** Date and time at which the swarm was initialised in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
 */
  CreatedAt?: string;
  /** Date and time at which the swarm was last updated in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
 */
  UpdatedAt?: string;
  Spec?: SwarmSpec;
  TLSInfo?: TLSInfo;
  /** Whether there is currently a root CA rotation in progress for the swarm
   */
  RootRotationInProgress?: boolean;
  /** DataPathPort specifies the data path port number for data traffic.
Acceptable port range is 1024 to 49151.
If no port is set or is set to 0, the default port (4789) is used.
 */
  DataPathPort?: number;
  /** Default Address Pool specifies default subnet pools for global scope
networks.
 */
  DefaultAddrPool?: string[];
  /** SubnetSize specifies the subnet size of the networks created from the
default subnet pool.
 */
  SubnetSize?: number;
} | null;

/**
 * Driver-specific options for the selectd log driver, specified
as key/value pairs.

 */
export type SwarmSpecTaskDefaultsLogDriverOptions = { [key: string]: string };

/**
 * Parameters related to encryption-at-rest.
 */
export type SwarmSpecEncryptionConfig = {
  /** If set, generate a key and use it to lock data stored on the
managers.
 */
  AutoLockManagers?: boolean;
};

/**
 * An object with key/value pairs that are interpreted as
protocol-specific options for the external CA driver.

 */
export type SwarmSpecCAConfigExternalCAsItemOptions = { [key: string]: string };

/**
 * Protocol for communication with the external CA (currently
only `cfssl` is supported).

 */
export type SwarmSpecCAConfigExternalCAsItemProtocol =
  typeof SwarmSpecCAConfigExternalCAsItemProtocol[keyof typeof SwarmSpecCAConfigExternalCAsItemProtocol];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SwarmSpecCAConfigExternalCAsItemProtocol = {
  cfssl: 'cfssl',
} as const;

export type SwarmSpecCAConfigExternalCAsItem = {
  /** Protocol for communication with the external CA (currently
only `cfssl` is supported).
 */
  Protocol?: SwarmSpecCAConfigExternalCAsItemProtocol;
  /** URL where certificate signing requests should be sent.
   */
  URL?: string;
  /** An object with key/value pairs that are interpreted as
protocol-specific options for the external CA driver.
 */
  Options?: SwarmSpecCAConfigExternalCAsItemOptions;
  /** The root CA certificate (in PEM format) this external CA uses
to issue TLS certificates (assumed to be to the current swarm
root CA certificate if not provided).
 */
  CACert?: string;
};

/**
 * CA configuration.
 */
export type SwarmSpecCAConfig = {
  /** The duration node certificates are issued for. */
  NodeCertExpiry?: number;
  /** Configuration for forwarding signing requests to an external
certificate authority.
 */
  ExternalCAs?: SwarmSpecCAConfigExternalCAsItem[];
  /** The desired signing CA certificate for all swarm node TLS leaf
certificates, in PEM format.
 */
  SigningCACert?: string;
  /** The desired signing CA key for all swarm node TLS leaf certificates,
in PEM format.
 */
  SigningCAKey?: string;
  /** An integer whose purpose is to force swarm to generate a new
signing CA certificate and key, if none have been specified in
`SigningCACert` and `SigningCAKey`
 */
  ForceRotate?: number;
} | null;

/**
 * Dispatcher configuration.
 */
export type SwarmSpecDispatcher = {
  /** The delay for an agent to send a heartbeat to the dispatcher.
   */
  HeartbeatPeriod?: number;
} | null;

/**
 * Raft configuration.
 */
export type SwarmSpecRaft = {
  /** The number of log entries between snapshots. */
  SnapshotInterval?: number;
  /** The number of snapshots to keep beyond the current snapshot.
   */
  KeepOldSnapshots?: number;
  /** The number of log entries to keep around to sync up slow followers
after a snapshot is created.
 */
  LogEntriesForSlowFollowers?: number;
  /** The number of ticks that a follower will wait for a message from
the leader before becoming a candidate and starting an election.
`ElectionTick` must be greater than `HeartbeatTick`.

A tick currently defaults to one second, so these translate
directly to seconds currently, but this is NOT guaranteed.
 */
  ElectionTick?: number;
  /** The number of ticks between heartbeats. Every HeartbeatTick ticks,
the leader will send a heartbeat to the followers.

A tick currently defaults to one second, so these translate
directly to seconds currently, but this is NOT guaranteed.
 */
  HeartbeatTick?: number;
};

/**
 * Orchestration configuration.
 */
export type SwarmSpecOrchestration = {
  /** The number of historic tasks to keep per instance or node. If
negative, never remove completed or failed tasks.
 */
  TaskHistoryRetentionLimit?: number;
} | null;

/**
 * User-defined key/value metadata.
 */
export type SwarmSpecLabels = { [key: string]: string };

/**
 * Reachability represents the reachability of a node.
 */
export type Reachability = typeof Reachability[keyof typeof Reachability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Reachability = {
  unknown: 'unknown',
  unreachable: 'unreachable',
  reachable: 'reachable',
} as const;

/**
 * ManagerStatus represents the status of a manager.

It provides the current status of a node's manager component, if the node
is a manager.

 */
export type ManagerStatus = {
  Leader?: boolean;
  Reachability?: Reachability;
  /** The IP address and port at which the manager is reachable.
   */
  Addr?: string;
} | null;

/**
 * NodeState represents the state of a node.
 */
export type NodeState = typeof NodeState[keyof typeof NodeState];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeState = {
  unknown: 'unknown',
  down: 'down',
  ready: 'ready',
  disconnected: 'disconnected',
} as const;

/**
 * NodeStatus represents the status of a node.

It provides the current status of the node, as seen by the manager.

 */
export interface NodeStatus {
  State?: NodeState;
  Message?: string;
  /** IP address of the node. */
  Addr?: string;
}

/**
 * Information about the issuer of leaf TLS certificates and the trusted root
CA certificate.

 */
export interface TLSInfo {
  /** The root CA certificate(s) that are used to validate leaf TLS
certificates.
 */
  TrustRoot?: string;
  /** The base64-url-safe-encoded raw subject bytes of the issuer. */
  CertIssuerSubject?: string;
  /** The base64-url-safe-encoded raw public key bytes of the issuer.
   */
  CertIssuerPublicKey?: string;
}

export type EngineDescriptionPluginsItem = {
  Type?: string;
  Name?: string;
};

export type EngineDescriptionLabels = { [key: string]: string };

/**
 * EngineDescription provides information about an engine.
 */
export interface EngineDescription {
  EngineVersion?: string;
  Labels?: EngineDescriptionLabels;
  Plugins?: EngineDescriptionPluginsItem[];
}

/**
 * Platform represents the platform (Arch/OS).

 */
export interface Platform {
  /** Architecture represents the hardware architecture (for example,
`x86_64`).
 */
  Architecture?: string;
  /** OS represents the Operating System (for example, `linux` or `windows`).
   */
  OS?: string;
}

/**
 * NodeDescription encapsulates the properties of the Node as reported by the
agent.

 */
export interface NodeDescription {
  Hostname?: string;
  Platform?: Platform;
  Resources?: ResourceObject;
  Engine?: EngineDescription;
  TLSInfo?: TLSInfo;
}

/**
 * Availability of the node.
 */
export type NodeSpecAvailability =
  typeof NodeSpecAvailability[keyof typeof NodeSpecAvailability];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeSpecAvailability = {
  active: 'active',
  pause: 'pause',
  drain: 'drain',
} as const;

/**
 * Role of the node.
 */
export type NodeSpecRole = typeof NodeSpecRole[keyof typeof NodeSpecRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeSpecRole = {
  worker: 'worker',
  manager: 'manager',
} as const;

/**
 * User-defined key/value metadata.
 */
export type NodeSpecLabels = { [key: string]: string };

export interface NodeSpec {
  /** Name for the node. */
  Name?: string;
  /** User-defined key/value metadata. */
  Labels?: NodeSpecLabels;
  /** Role of the node. */
  Role?: NodeSpecRole;
  /** Availability of the node. */
  Availability?: NodeSpecAvailability;
}

/**
 * The version number of the object such as node, service, etc. This is needed
to avoid conflicting writes. The client must send the version number along
with the modified specification when updating these objects.

This approach ensures safe concurrency and determinism in that the change
on the object may not be applied if the version number has changed from the
last read. In other words, if two update requests specify the same base
version, only one of the requests can succeed. As a result, two separate
update requests that happen at the same time will not unintentionally
overwrite each other.

 */
export interface ObjectVersion {
  Index?: number;
}

export interface Node {
  ID?: string;
  Version?: ObjectVersion;
  /** Date and time at which the node was added to the swarm in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
 */
  CreatedAt?: string;
  /** Date and time at which the node was last updated in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
 */
  UpdatedAt?: string;
  Spec?: NodeSpec;
  Description?: NodeDescription;
  Status?: NodeStatus;
  ManagerStatus?: ManagerStatus;
}

/**
 * A plugin for the Engine API
 */
export interface Plugin {
  Id?: string;
  Name: string;
  /** True if the plugin is running. False if the plugin is not running, only installed. */
  Enabled: boolean;
  /** Settings that can be modified by users. */
  Settings: PluginSettings;
  /** plugin remote reference used to push/pull the plugin */
  PluginReference?: string;
  /** The config of a plugin. */
  Config: PluginConfig;
}

export type PluginConfigRootfs = {
  type?: string;
  diff_ids?: string[];
};

export type PluginConfigArgs = {
  Name: string;
  Description: string;
  Settable: string[];
  Value: string[];
};

export type PluginConfigNetwork = {
  Type: string;
};

export type PluginConfigUser = {
  UID?: number;
  GID?: number;
};

/**
 * Protocol to use for clients connecting to the plugin.
 */
export type PluginConfigInterfaceProtocolScheme =
  typeof PluginConfigInterfaceProtocolScheme[keyof typeof PluginConfigInterfaceProtocolScheme];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PluginConfigInterfaceProtocolScheme = {
  'mobypluginshttp/v1': 'moby.plugins.http/v1',
} as const;

/**
 * Describes a permission the user has to accept upon installing
the plugin.

 */
export interface PluginPrivilege {
  Name?: string;
  Description?: string;
  Value?: string[];
}

export interface PluginInterfaceType {
  Prefix: string;
  Capability: string;
  Version: string;
}

/**
 * The interface between Docker and the plugin
 */
export type PluginConfigInterface = {
  Types: PluginInterfaceType[];
  Socket: string;
  /** Protocol to use for clients connecting to the plugin. */
  ProtocolScheme?: PluginConfigInterfaceProtocolScheme;
};

export interface PluginEnv {
  Name: string;
  Description: string;
  Settable: string[];
  Value: string;
}

export interface PluginDevice {
  Name: string;
  Description: string;
  Settable: string[];
  Path: string;
}

export type PluginConfigLinux = {
  Capabilities: string[];
  AllowAllDevices: boolean;
  Devices: PluginDevice[];
};

export interface PluginMount {
  Name: string;
  Description: string;
  Settable: string[];
  Source: string;
  Destination: string;
  Type: string;
  Options: string[];
}

/**
 * The config of a plugin.
 */
export type PluginConfig = {
  /** Docker Version used to create the plugin */
  DockerVersion?: string;
  Description: string;
  Documentation: string;
  /** The interface between Docker and the plugin */
  Interface: PluginConfigInterface;
  Entrypoint: string[];
  WorkDir: string;
  User?: PluginConfigUser;
  Network: PluginConfigNetwork;
  Linux: PluginConfigLinux;
  PropagatedMount: string;
  IpcHost: boolean;
  PidHost: boolean;
  Mounts: PluginMount[];
  Env: PluginEnv[];
  Args: PluginConfigArgs;
  rootfs?: PluginConfigRootfs;
};

/**
 * Settings that can be modified by users.
 */
export type PluginSettings = {
  Mounts: PluginMount[];
  Env: string[];
  Args: string[];
  Devices: PluginDevice[];
};

/**
 * EndpointIPAMConfig represents an endpoint's IPAM configuration.

 */
export type EndpointIPAMConfig = {
  IPv4Address?: string;
  IPv6Address?: string;
  LinkLocalIPs?: string[];
} | null;

/**
 * DriverOpts is a mapping of driver options and values. These options
are passed directly to the driver and are driver specific.

 */
export type EndpointSettingsDriverOpts = { [key: string]: string } | null;

/**
 * Configuration for a network endpoint.
 */
export interface EndpointSettings {
  IPAMConfig?: EndpointIPAMConfig;
  Links?: string[];
  Aliases?: string[];
  /** Unique ID of the network.
   */
  NetworkID?: string;
  /** Unique ID for the service endpoint in a Sandbox.
   */
  EndpointID?: string;
  /** Gateway address for this network.
   */
  Gateway?: string;
  /** IPv4 address.
   */
  IPAddress?: string;
  /** Mask length of the IPv4 address.
   */
  IPPrefixLen?: number;
  /** IPv6 gateway address.
   */
  IPv6Gateway?: string;
  /** Global IPv6 address.
   */
  GlobalIPv6Address?: string;
  /** Mask length of the global IPv6 address.
   */
  GlobalIPv6PrefixLen?: number;
  /** MAC address for the endpoint on this network.
   */
  MacAddress?: string;
  /** DriverOpts is a mapping of driver options and values. These options
are passed directly to the driver and are driver specific.
 */
  DriverOpts?: EndpointSettingsDriverOpts;
}

/**
 * Response to an API call that returns just an Id
 */
export interface IdResponse {
  /** The id of the newly created object. */
  Id: string;
}

/**
 * Represents an error.
 */
export interface ErrorResponse {
  /** The error message. */
  message: string;
}

export interface ProgressDetail {
  current?: number;
  total?: number;
}

export interface ErrorDetail {
  code?: number;
  message?: string;
}

export interface PushImageInfo {
  error?: string;
  status?: string;
  progress?: string;
  progressDetail?: ProgressDetail;
}

export interface CreateImageInfo {
  id?: string;
  error?: string;
  errorDetail?: ErrorDetail;
  status?: string;
  progress?: string;
  progressDetail?: ProgressDetail;
}

/**
 * Image ID or Digest
 */
export interface ImageID {
  ID?: string;
}

/**
 * Cache record type.

 */
export type BuildCacheType = typeof BuildCacheType[keyof typeof BuildCacheType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BuildCacheType = {
  internal: 'internal',
  frontend: 'frontend',
  sourcelocal: 'source.local',
  sourcegitcheckout: 'source.git.checkout',
  execcachemount: 'exec.cachemount',
  regular: 'regular',
} as const;

/**
 * BuildCache contains information about a build cache record.

 */
export interface BuildCache {
  /** Unique ID of the build cache record.
   */
  ID?: string;
  /** ID of the parent build cache record.
   */
  Parent?: string;
  /** Cache record type.
   */
  Type?: BuildCacheType;
  /** Description of the build-step that produced the build cache.
   */
  Description?: string;
  /** Indicates if the build cache is in use.
   */
  InUse?: boolean;
  /** Indicates if the build cache is shared.
   */
  Shared?: boolean;
  /** Amount of disk space used by the build cache (in bytes).
   */
  Size?: number;
  /** Date and time at which the build cache was created in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
 */
  CreatedAt?: string;
  /** Date and time at which the build cache was last used in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
 */
  LastUsedAt?: string | null;
  UsageCount?: number;
}

export interface BuildInfo {
  id?: string;
  stream?: string;
  error?: string;
  errorDetail?: ErrorDetail;
  status?: string;
  progress?: string;
  progressDetail?: ProgressDetail;
  aux?: ImageID;
}

export interface NetworkContainer {
  Name?: string;
  EndpointID?: string;
  MacAddress?: string;
  IPv4Address?: string;
  IPv6Address?: string;
}

export type IPAMConfigAuxiliaryAddresses = { [key: string]: string };

export interface IPAMConfig {
  Subnet?: string;
  IPRange?: string;
  Gateway?: string;
  AuxiliaryAddresses?: IPAMConfigAuxiliaryAddresses;
}

/**
 * Driver-specific options, specified as a map.
 */
export type IpamOptions = { [key: string]: string };

export interface Ipam {
  /** Name of the IPAM driver to use. */
  Driver?: string;
  /** List of IPAM configuration options, specified as a map:

```
{"Subnet": <CIDR>, "IPRange": <CIDR>, "Gateway": <IP address>, "AuxAddress": <device_name:IP address>}
```
 */
  Config?: IPAMConfig[];
  /** Driver-specific options, specified as a map. */
  Options?: IpamOptions;
}

export type NetworkLabels = { [key: string]: string };

export type NetworkOptions = { [key: string]: string };

export type NetworkContainers = { [key: string]: NetworkContainer };

export interface Network {
  Name?: string;
  Id?: string;
  Created?: string;
  Scope?: string;
  Driver?: string;
  EnableIPv6?: boolean;
  IPAM?: Ipam;
  Internal?: boolean;
  Attachable?: boolean;
  Ingress?: boolean;
  Containers?: NetworkContainers;
  Options?: NetworkOptions;
  Labels?: NetworkLabels;
}

/**
 * Volume list response
 */
export interface VolumeListResponse {
  /** List of volumes */
  Volumes?: Volume[];
  /** Warnings that occurred when fetching the list of volumes.
   */
  Warnings?: string[];
}

/**
 * User-defined key/value metadata.
 */
export type VolumeCreateOptionsLabels = { [key: string]: string };

/**
 * A mapping of driver options and values. These options are
passed directly to the driver and are driver specific.

 */
export type VolumeCreateOptionsDriverOpts = { [key: string]: string };

/**
 * Volume configuration
 */
export interface VolumeCreateOptions {
  /** The new volume's name. If not specified, Docker generates a name.
   */
  Name?: string;
  /** Name of the volume driver to use. */
  Driver?: string;
  /** A mapping of driver options and values. These options are
passed directly to the driver and are driver specific.
 */
  DriverOpts?: VolumeCreateOptionsDriverOpts;
  /** User-defined key/value metadata. */
  Labels?: VolumeCreateOptionsLabels;
}

/**
 * Usage details about the volume. This information is used by the
`GET /system/df` endpoint, and omitted in other endpoints.

 */
export type VolumeUsageData = {
  /** Amount of disk space used by the volume (in bytes). This information
is only available for volumes created with the `"local"` volume
driver. For volumes created with other volume drivers, this field
is set to `-1` ("not available")
 */
  Size: number;
  /** The number of containers referencing this volume. This field
is set to `-1` if the reference-count is not available.
 */
  RefCount: number;
} | null;

/**
 * The driver specific options used when creating the volume.

 */
export type VolumeOptions = { [key: string]: string };

/**
 * The level at which the volume exists. Either `global` for cluster-wide,
or `local` for machine level.

 */
export type VolumeScope = typeof VolumeScope[keyof typeof VolumeScope];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VolumeScope = {
  local: 'local',
  global: 'global',
} as const;

/**
 * User-defined key/value metadata.
 */
export type VolumeLabels = { [key: string]: string };

/**
 * Low-level details about the volume, provided by the volume driver.
Details are returned as a map with key/value pairs:
`{"key":"value","key2":"value2"}`.

The `Status` field is optional, and is omitted if the volume driver
does not support this feature.

 */
export type VolumeStatus = { [key: string]: { [key: string]: any } };

export interface Volume {
  /** Name of the volume. */
  Name: string;
  /** Name of the volume driver used by the volume. */
  Driver: string;
  /** Mount path of the volume on the host. */
  Mountpoint: string;
  /** Date/Time the volume was created. */
  CreatedAt?: string;
  /** Low-level details about the volume, provided by the volume driver.
Details are returned as a map with key/value pairs:
`{"key":"value","key2":"value2"}`.

The `Status` field is optional, and is omitted if the volume driver
does not support this feature.
 */
  Status?: VolumeStatus;
  /** User-defined key/value metadata. */
  Labels: VolumeLabels;
  /** The level at which the volume exists. Either `global` for cluster-wide,
or `local` for machine level.
 */
  Scope: VolumeScope;
  /** The driver specific options used when creating the volume.
   */
  Options: VolumeOptions;
  /** Usage details about the volume. This information is used by the
`GET /system/df` endpoint, and omitted in other endpoints.
 */
  UsageData?: VolumeUsageData;
}

export interface ProcessConfig {
  privileged?: boolean;
  user?: string;
  tty?: boolean;
  entrypoint?: string;
  arguments?: string[];
}

export interface AuthConfig {
  username?: string;
  password?: string;
  email?: string;
  serveraddress?: string;
}

/**
 * User-defined key/value metadata.
 */
export type ImageSummaryLabels = { [key: string]: string };

export interface ImageSummary {
  /** ID is the content-addressable ID of an image.

This identifier is a content-addressable digest calculated from the
image's configuration (which includes the digests of layers used by
the image).

Note that this digest differs from the `RepoDigests` below, which
holds digests of image manifests that reference the image.
 */
  Id: string;
  /** ID of the parent image.

Depending on how the image was created, this field may be empty and
is only set for images that were built/created locally. This field
is empty if the image was pulled from an image registry.
 */
  ParentId: string;
  /** List of image names/tags in the local image cache that reference this
image.

Multiple image tags can refer to the same image, and this list may be
empty if no tags reference the image, in which case the image is
"untagged", in which case it can still be referenced by its ID.
 */
  RepoTags: string[];
  /** List of content-addressable digests of locally available image manifests
that the image is referenced from. Multiple manifests can refer to the
same image.

These digests are usually only available if the image was either pulled
from a registry, or if the image was pushed to a registry, which is when
the manifest is generated and its digest calculated.
 */
  RepoDigests: string[];
  /** Date and time at which the image was created as a Unix timestamp
(number of seconds sinds EPOCH).
 */
  Created: number;
  /** Total size of the image including all layers it is composed of.
   */
  Size: number;
  /** Total size of image layers that are shared between this image and other
images.

This size is not calculated by default. `-1` indicates that the value
has not been set / calculated.
 */
  SharedSize: number;
  /** Total size of the image including all layers it is composed of.

In versions of Docker before v1.10, this field was calculated from
the image itself and all of its parent images. Docker v1.10 and up
store images self-contained, and no longer use a parent-chain, making
this field an equivalent of the Size field.

This field is kept for backward compatibility, but may be removed in
a future version of the API.
 */
  VirtualSize: number;
  /** User-defined key/value metadata. */
  Labels: ImageSummaryLabels;
  /** Number of containers using this image. Includes both stopped and running
containers.

This size is not calculated by default, and depends on which API endpoint
is used. `-1` indicates that the value has not been set / calculated.
 */
  Containers: number;
}

/**
 * Additional metadata of the image in the local cache. This information
is local to the daemon, and not part of the image itself.

 */
export type ImageInspectMetadata = {
  /** Date and time at which the image was last tagged in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

This information is only available if the image was tagged locally,
and omitted otherwise.
 */
  LastTagTime?: string | null;
};

/**
 * Information about the image's RootFS, including the layer IDs.

 */
export type ImageInspectRootFS = {
  Type: string;
  Layers?: string[];
};

/**
 * Low-level storage metadata, provided as key/value pairs.

This information is driver-specific, and depends on the storage-driver
in use, and should be used for informational purposes only.

 */
export type GraphDriverDataData = { [key: string]: string };

/**
 * Information about the storage driver used to store the container's and
image's filesystem.

 */
export interface GraphDriverData {
  /** Name of the storage driver. */
  Name: string;
  /** Low-level storage metadata, provided as key/value pairs.

This information is driver-specific, and depends on the storage-driver
in use, and should be used for informational purposes only.
 */
  Data: GraphDriverDataData;
}

/**
 * Information about an image in the local image cache.

 */
export interface ImageInspect {
  /** ID is the content-addressable ID of an image.

This identifier is a content-addressable digest calculated from the
image's configuration (which includes the digests of layers used by
the image).

Note that this digest differs from the `RepoDigests` below, which
holds digests of image manifests that reference the image.
 */
  Id?: string;
  /** List of image names/tags in the local image cache that reference this
image.

Multiple image tags can refer to the same image, and this list may be
empty if no tags reference the image, in which case the image is
"untagged", in which case it can still be referenced by its ID.
 */
  RepoTags?: string[];
  /** List of content-addressable digests of locally available image manifests
that the image is referenced from. Multiple manifests can refer to the
same image.

These digests are usually only available if the image was either pulled
from a registry, or if the image was pushed to a registry, which is when
the manifest is generated and its digest calculated.
 */
  RepoDigests?: string[];
  /** ID of the parent image.

Depending on how the image was created, this field may be empty and
is only set for images that were built/created locally. This field
is empty if the image was pulled from an image registry.
 */
  Parent?: string;
  /** Optional message that was set when committing or importing the image.
   */
  Comment?: string;
  /** Date and time at which the image was created, formatted in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
 */
  Created?: string;
  /** The ID of the container that was used to create the image.

Depending on how the image was created, this field may be empty.
 */
  Container?: string;
  ContainerConfig?: ContainerConfig;
  /** The version of Docker that was used to build the image.

Depending on how the image was created, this field may be empty.
 */
  DockerVersion?: string;
  /** Name of the author that was specified when committing the image, or as
specified through MAINTAINER (deprecated) in the Dockerfile.
 */
  Author?: string;
  Config?: ContainerConfig;
  /** Hardware CPU architecture that the image runs on.
   */
  Architecture?: string;
  /** CPU architecture variant (presently ARM-only).
   */
  Variant?: string | null;
  /** Operating System the image is built to run on.
   */
  Os?: string;
  /** Operating System version the image is built to run on (especially
for Windows).
 */
  OsVersion?: string | null;
  /** Total size of the image including all layers it is composed of.
   */
  Size?: number;
  /** Total size of the image including all layers it is composed of.

In versions of Docker before v1.10, this field was calculated from
the image itself and all of its parent images. Docker v1.10 and up
store images self-contained, and no longer use a parent-chain, making
this field an equivalent of the Size field.

This field is kept for backward compatibility, but may be removed in
a future version of the API.
 */
  VirtualSize?: number;
  GraphDriver?: GraphDriverData;
  /** Information about the image's RootFS, including the layer IDs.
   */
  RootFS?: ImageInspectRootFS;
  /** Additional metadata of the image in the local cache. This information
is local to the daemon, and not part of the image itself.
 */
  Metadata?: ImageInspectMetadata;
}

/**
 * PortBinding represents a binding between a host IP address and a host
port.

 */
export interface PortBinding {
  /** Host IP address that the container's port is mapped to. */
  HostIp?: string;
  /** Host port number that the container's port is mapped to. */
  HostPort?: string;
}

/**
 * PortMap describes the mapping of container ports to host ports, using the
container's port-number and protocol as key in the format `<port>/<protocol>`,
for example, `80/udp`.

If a container's port is mapped for multiple protocols, separate entries
are added to the mapping table.

 */
export interface PortMap {
  [key: string]: PortBinding[] | null;
}

/**
 * Address represents an IPv4 or IPv6 IP address.
 */
export interface Address {
  /** IP address. */
  Addr?: string;
  /** Mask length of the IP address. */
  PrefixLen?: number;
}

/**
 * Information about all networks that the container is connected to.

 */
export type NetworkSettingsNetworks = { [key: string]: EndpointSettings };

/**
 * NetworkSettings exposes the network settings in the API
 */
export interface NetworkSettings {
  /** Name of the network's bridge (for example, `docker0`). */
  Bridge?: string;
  /** SandboxID uniquely represents a container's network stack. */
  SandboxID?: string;
  /** Indicates if hairpin NAT should be enabled on the virtual interface.
   */
  HairpinMode?: boolean;
  /** IPv6 unicast address using the link-local prefix. */
  LinkLocalIPv6Address?: string;
  /** Prefix length of the IPv6 unicast address. */
  LinkLocalIPv6PrefixLen?: number;
  Ports?: PortMap;
  /** SandboxKey identifies the sandbox */
  SandboxKey?: string;
  SecondaryIPAddresses?: Address[] | null;
  SecondaryIPv6Addresses?: Address[] | null;
  /** EndpointID uniquely represents a service endpoint in a Sandbox.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the `Networks` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
 */
  EndpointID?: string;
  /** Gateway address for the default "bridge" network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the `Networks` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
 */
  Gateway?: string;
  /** Global IPv6 address for the default "bridge" network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the `Networks` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
 */
  GlobalIPv6Address?: string;
  /** Mask length of the global IPv6 address.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the `Networks` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
 */
  GlobalIPv6PrefixLen?: number;
  /** IPv4 address for the default "bridge" network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the `Networks` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
 */
  IPAddress?: string;
  /** Mask length of the IPv4 address.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the `Networks` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
 */
  IPPrefixLen?: number;
  /** IPv6 gateway address for this network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the `Networks` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
 */
  IPv6Gateway?: string;
  /** MAC address for the container on the default "bridge" network.

<p><br /></p>

> **Deprecated**: This field is only propagated when attached to the
> default "bridge" network. Use the information from the "bridge"
> network inside the `Networks` map instead, which contains the same
> information. This field was deprecated in Docker 1.9 and is scheduled
> to be removed in Docker 17.12.0
 */
  MacAddress?: string;
  /** Information about all networks that the container is connected to.
   */
  Networks?: NetworkSettingsNetworks;
}

/**
 * A mapping of network name to endpoint configuration for that network.

 */
export type NetworkingConfigEndpointsConfig = {
  [key: string]: EndpointSettings;
};

/**
 * NetworkingConfig represents the container's networking configuration for
each of its interfaces.
It is used for the networking configs specified in the `docker create`
and `docker network connect` commands.

 */
export interface NetworkingConfig {
  /** A mapping of network name to endpoint configuration for that network.
   */
  EndpointsConfig?: NetworkingConfigEndpointsConfig;
}

/**
 * User-defined key/value metadata.
 */
export type ContainerConfigLabels = { [key: string]: string };

/**
 * An object mapping mount point paths inside the container to empty
objects.

 */
export type ContainerConfigVolumes = { [key: string]: '[object Object]' };

/**
 * An object mapping ports to an empty object in the form:

`{"<port>/<tcp|udp|sctp>": {}}`

 */
export type ContainerConfigExposedPorts = {
  [key: string]: '[object Object]';
} | null;

/**
 * Configuration for a container that is portable between hosts.

When used as `ContainerConfig` field in an image, `ContainerConfig` is an
optional field containing the configuration of the container that was last
committed when creating the image.

Previous versions of Docker builder used this field to store build cache,
and it is not in active use anymore.

 */
export interface ContainerConfig {
  /** The hostname to use for the container, as a valid RFC 1123 hostname.
   */
  Hostname?: string;
  /** The domain name to use for the container.
   */
  Domainname?: string;
  /** The user that commands are run as inside the container. */
  User?: string;
  /** Whether to attach to `stdin`. */
  AttachStdin?: boolean;
  /** Whether to attach to `stdout`. */
  AttachStdout?: boolean;
  /** Whether to attach to `stderr`. */
  AttachStderr?: boolean;
  /** An object mapping ports to an empty object in the form:

`{"<port>/<tcp|udp|sctp>": {}}`
 */
  ExposedPorts?: ContainerConfigExposedPorts;
  /** Attach standard streams to a TTY, including `stdin` if it is not closed.
   */
  Tty?: boolean;
  /** Open `stdin` */
  OpenStdin?: boolean;
  /** Close `stdin` after one attached client disconnects */
  StdinOnce?: boolean;
  /** A list of environment variables to set inside the container in the
form `["VAR=value", ...]`. A variable without `=` is removed from the
environment, rather than to have an empty value.
 */
  Env?: string[];
  /** Command to run specified as a string or an array of strings.
   */
  Cmd?: string[];
  Healthcheck?: HealthConfig;
  /** Command is already escaped (Windows only) */
  ArgsEscaped?: boolean | null;
  /** The name (or reference) of the image to use when creating the container,
or which was used when the container was created.
 */
  Image?: string;
  /** An object mapping mount point paths inside the container to empty
objects.
 */
  Volumes?: ContainerConfigVolumes;
  /** The working directory for commands to run in. */
  WorkingDir?: string;
  /** The entry point for the container as a string or an array of strings.

If the array consists of exactly one empty string (`[""]`) then the
entry point is reset to system default (i.e., the entry point used by
docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
 */
  Entrypoint?: string[];
  /** Disable networking for the container. */
  NetworkDisabled?: boolean | null;
  /** MAC address of the container. */
  MacAddress?: string | null;
  /** `ONBUILD` metadata that were defined in the image's `Dockerfile`.
   */
  OnBuild?: string[] | null;
  /** User-defined key/value metadata. */
  Labels?: ContainerConfigLabels;
  /** Signal to stop a container as a string or unsigned integer.
   */
  StopSignal?: string | null;
  /** Timeout to stop a container in seconds. */
  StopTimeout?: number | null;
  /** Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
   */
  Shell?: string[] | null;
}

/**
 * Isolation technology of the container. (Windows only)

 */
export type HostConfigAllOfIsolation =
  typeof HostConfigAllOfIsolation[keyof typeof HostConfigAllOfIsolation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HostConfigAllOfIsolation = {
  default: 'default',
  process: 'process',
  hyperv: 'hyperv',
} as const;

/**
 * A list of kernel parameters (sysctls) to set in the container.
For example:

```
{"net.ipv4.ip_forward": "1"}
```

 */
export type HostConfigAllOfSysctls = { [key: string]: string };

/**
 * A map of container directories which should be replaced by tmpfs
mounts, and their corresponding mount options. For example:

```
{ "/run": "rw,noexec,nosuid,size=65536k" }
```

 */
export type HostConfigAllOfTmpfs = { [key: string]: string };

/**
 * Storage driver options for this container, in the form `{"size": "120G"}`.

 */
export type HostConfigAllOfStorageOpt = { [key: string]: string };

/**
 * cgroup namespace mode for the container. Possible values are:

- `"private"`: the container runs in its own private cgroup namespace
- `"host"`: use the host system's cgroup namespace

If not specified, the daemon default is used, which can either be `"private"`
or `"host"`, depending on daemon version, kernel support and configuration.

 */
export type HostConfigAllOfCgroupnsMode =
  typeof HostConfigAllOfCgroupnsMode[keyof typeof HostConfigAllOfCgroupnsMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HostConfigAllOfCgroupnsMode = {
  private: 'private',
  host: 'host',
} as const;

export type HostConfigAllOf = {
  /** A list of volume bindings for this container. Each volume binding
is a string in one of these forms:

- `host-src:container-dest[:options]` to bind-mount a host path
  into the container. Both `host-src`, and `container-dest` must
  be an _absolute_ path.
- `volume-name:container-dest[:options]` to bind-mount a volume
  managed by a volume driver into the container. `container-dest`
  must be an _absolute_ path.

`options` is an optional, comma-delimited list of:

- `nocopy` disables automatic copying of data from the container
  path to the volume. The `nocopy` flag only applies to named volumes.
- `[ro|rw]` mounts a volume read-only or read-write, respectively.
  If omitted or set to `rw`, volumes are mounted read-write.
- `[z|Z]` applies SELinux labels to allow or deny multiple containers
  to read and write to the same volume.
    - `z`: a _shared_ content label is applied to the content. This
      label indicates that multiple containers can share the volume
      content, for both reading and writing.
    - `Z`: a _private unshared_ label is applied to the content.
      This label indicates that only the current container can use
      a private volume. Labeling systems such as SELinux require
      proper labels to be placed on volume content that is mounted
      into a container. Without a label, the security system can
      prevent a container's processes from using the content. By
      default, the labels set by the host operating system are not
      modified.
- `[[r]shared|[r]slave|[r]private]` specifies mount
  [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).
  This only applies to bind-mounted volumes, not internal volumes
  or named volumes. Mount propagation requires the source mount
  point (the location where the source directory is mounted in the
  host operating system) to have the correct propagation properties.
  For shared volumes, the source mount point must be set to `shared`.
  For slave volumes, the mount must be set to either `shared` or
  `slave`.
 */
  Binds?: string[];
  /** Path to a file where the container ID is written */
  ContainerIDFile?: string;
  /** The logging configuration for this container */
  LogConfig?: HostConfigAllOfLogConfig;
  /** Network mode to use for this container. Supported standard values
are: `bridge`, `host`, `none`, and `container:<name|id>`. Any
other value is taken as a custom network's name to which this
container should connect to.
 */
  NetworkMode?: string;
  PortBindings?: PortMap;
  RestartPolicy?: RestartPolicy;
  /** Automatically remove the container when the container's process
exits. This has no effect if `RestartPolicy` is set.
 */
  AutoRemove?: boolean;
  /** Driver that this container uses to mount volumes. */
  VolumeDriver?: string;
  /** A list of volumes to inherit from another container, specified in
the form `<container name>[:<ro|rw>]`.
 */
  VolumesFrom?: string[];
  /** Specification for mounts to be added to the container.
   */
  Mounts?: Mount[];
  /** A list of kernel capabilities to add to the container. Conflicts
with option 'Capabilities'.
 */
  CapAdd?: string[];
  /** A list of kernel capabilities to drop from the container. Conflicts
with option 'Capabilities'.
 */
  CapDrop?: string[];
  /** cgroup namespace mode for the container. Possible values are:

- `"private"`: the container runs in its own private cgroup namespace
- `"host"`: use the host system's cgroup namespace

If not specified, the daemon default is used, which can either be `"private"`
or `"host"`, depending on daemon version, kernel support and configuration.
 */
  CgroupnsMode?: HostConfigAllOfCgroupnsMode;
  /** A list of DNS servers for the container to use. */
  Dns?: string[];
  /** A list of DNS options. */
  DnsOptions?: string[];
  /** A list of DNS search domains. */
  DnsSearch?: string[];
  /** A list of hostnames/IP mappings to add to the container's `/etc/hosts`
file. Specified in the form `["hostname:IP"]`.
 */
  ExtraHosts?: string[];
  /** A list of additional groups that the container process will run as.
   */
  GroupAdd?: string[];
  /** IPC sharing mode for the container. Possible values are:

- `"none"`: own private IPC namespace, with /dev/shm not mounted
- `"private"`: own private IPC namespace
- `"shareable"`: own private IPC namespace, with a possibility to share it with other containers
- `"container:<name|id>"`: join another (shareable) container's IPC namespace
- `"host"`: use the host system's IPC namespace

If not specified, daemon default is used, which can either be `"private"`
or `"shareable"`, depending on daemon version and configuration.
 */
  IpcMode?: string;
  /** Cgroup to use for the container. */
  Cgroup?: string;
  /** A list of links for the container in the form `container_name:alias`.
   */
  Links?: string[];
  /** An integer value containing the score given to the container in
order to tune OOM killer preferences.
 */
  OomScoreAdj?: number;
  /** Set the PID (Process) Namespace mode for the container. It can be
either:

- `"container:<name|id>"`: joins another container's PID namespace
- `"host"`: use the host's PID namespace inside the container
 */
  PidMode?: string;
  /** Gives the container full access to the host. */
  Privileged?: boolean;
  /** Allocates an ephemeral host port for all of a container's
exposed ports.

Ports are de-allocated when the container stops and allocated when
the container starts. The allocated port might be changed when
restarting the container.

The port is selected from the ephemeral port range that depends on
the kernel. For example, on Linux the range is defined by
`/proc/sys/net/ipv4/ip_local_port_range`.
 */
  PublishAllPorts?: boolean;
  /** Mount the container's root filesystem as read only. */
  ReadonlyRootfs?: boolean;
  /** A list of string values to customize labels for MLS systems, such
as SELinux.
 */
  SecurityOpt?: string[];
  /** Storage driver options for this container, in the form `{"size": "120G"}`.
   */
  StorageOpt?: HostConfigAllOfStorageOpt;
  /** A map of container directories which should be replaced by tmpfs
mounts, and their corresponding mount options. For example:

```
{ "/run": "rw,noexec,nosuid,size=65536k" }
```
 */
  Tmpfs?: HostConfigAllOfTmpfs;
  /** UTS namespace to use for the container. */
  UTSMode?: string;
  /** Sets the usernamespace mode for the container when usernamespace
remapping option is enabled.
 */
  UsernsMode?: string;
  /** Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
   */
  ShmSize?: number;
  /** A list of kernel parameters (sysctls) to set in the container.
For example:

```
{"net.ipv4.ip_forward": "1"}
```
 */
  Sysctls?: HostConfigAllOfSysctls;
  /** Runtime to use with this container. */
  Runtime?: string;
  /** Initial console size, as an `[height, width]` array. (Windows only)
   */
  ConsoleSize?: number[];
  /** Isolation technology of the container. (Windows only)
   */
  Isolation?: HostConfigAllOfIsolation;
  /** The list of paths to be masked inside the container (this overrides
the default set of paths).
 */
  MaskedPaths?: string[];
  /** The list of paths to be set as read-only inside the container
(this overrides the default set of paths).
 */
  ReadonlyPaths?: string[];
};

/**
 * Container configuration that depends on the host we are running on
 */
export type HostConfig = Resources & HostConfigAllOf;

export type HostConfigAllOfLogConfigConfig = { [key: string]: string };

export type HostConfigAllOfLogConfigType =
  typeof HostConfigAllOfLogConfigType[keyof typeof HostConfigAllOfLogConfigType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HostConfigAllOfLogConfigType = {
  'json-file': 'json-file',
  syslog: 'syslog',
  journald: 'journald',
  gelf: 'gelf',
  fluentd: 'fluentd',
  awslogs: 'awslogs',
  splunk: 'splunk',
  etwlogs: 'etwlogs',
  none: 'none',
} as const;

/**
 * The logging configuration for this container
 */
export type HostConfigAllOfLogConfig = {
  Type?: HostConfigAllOfLogConfigType;
  Config?: HostConfigAllOfLogConfigConfig;
};

/**
 * HealthcheckResult stores information about a single run of a healthcheck probe

 */
export type HealthcheckResult = {
  /** Date and time at which this check started in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
 */
  Start?: string;
  /** Date and time at which this check ended in
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
 */
  End?: string;
  /** ExitCode meanings:

- `0` healthy
- `1` unhealthy
- `2` reserved (considered unhealthy)
- other values: error running probe
 */
  ExitCode?: number;
  /** Output from last check */
  Output?: string;
} | null;

/**
 * Status is one of `none`, `starting`, `healthy` or `unhealthy`

- "none"      Indicates there is no healthcheck
- "starting"  Starting indicates that the container is not yet ready
- "healthy"   Healthy indicates that the container is running correctly
- "unhealthy" Unhealthy indicates that the container has a problem

 */
export type HealthStatus = typeof HealthStatus[keyof typeof HealthStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HealthStatus = {
  none: 'none',
  starting: 'starting',
  healthy: 'healthy',
  unhealthy: 'unhealthy',
} as const;

/**
 * Health stores information about the container's healthcheck results.

 */
export type Health = {
  /** Status is one of `none`, `starting`, `healthy` or `unhealthy`

- "none"      Indicates there is no healthcheck
- "starting"  Starting indicates that the container is not yet ready
- "healthy"   Healthy indicates that the container is running correctly
- "unhealthy" Unhealthy indicates that the container has a problem
 */
  Status?: HealthStatus;
  /** FailingStreak is the number of consecutive failures */
  FailingStreak?: number;
  /** Log contains the last few results (oldest first)
   */
  Log?: HealthcheckResult[];
} | null;

/**
 * A test to perform to check that the container is healthy.
 */
export interface HealthConfig {
  /** The test to perform. Possible values are:

- `[]` inherit healthcheck from image or parent image
- `["NONE"]` disable healthcheck
- `["CMD", args...]` exec arguments directly
- `["CMD-SHELL", command]` run command with system's default shell
 */
  Test?: string[];
  /** The time to wait between checks in nanoseconds. It should be 0 or at
least 1000000 (1 ms). 0 means inherit.
 */
  Interval?: number;
  /** The time to wait before considering the check to have hung. It should
be 0 or at least 1000000 (1 ms). 0 means inherit.
 */
  Timeout?: number;
  /** The number of consecutive failures needed to consider a container as
unhealthy. 0 means inherit.
 */
  Retries?: number;
  /** Start period for the container to initialize before starting
health-retries countdown in nanoseconds. It should be 0 or at least
1000000 (1 ms). 0 means inherit.
 */
  StartPeriod?: number;
}

/**
 * User-defined resources can be either Integer resources (e.g, `SSD=3`) or
String resources (e.g, `GPU=UUID1`).

 */
export type GenericResources = GenericResourcesItem[];

export type GenericResourcesItemDiscreteResourceSpec = {
  Kind?: string;
  Value?: number;
};

export type GenericResourcesItemNamedResourceSpec = {
  Kind?: string;
  Value?: string;
};

export type GenericResourcesItem = {
  NamedResourceSpec?: GenericResourcesItemNamedResourceSpec;
  DiscreteResourceSpec?: GenericResourcesItemDiscreteResourceSpec;
};

/**
 * An object describing the resources which can be advertised by a node and
requested by a task.

 */
export interface ResourceObject {
  NanoCPUs?: number;
  MemoryBytes?: number;
  GenericResources?: GenericResources;
}

/**
 * An object describing a limit on resources which can be requested by a task.

 */
export interface Limit {
  NanoCPUs?: number;
  MemoryBytes?: number;
  /** Limits the maximum number of PIDs in the container. Set `0` for unlimited.
   */
  Pids?: number;
}

export type ResourcesUlimitsItem = {
  /** Name of ulimit */
  Name?: string;
  /** Soft limit */
  Soft?: number;
  /** Hard limit */
  Hard?: number;
};

export type ResourcesBlkioWeightDeviceItem = {
  Path?: string;
  Weight?: number;
};

/**
 * A container's resources (cgroups config, ulimits, etc)
 */
export interface Resources {
  /** An integer value representing this container's relative CPU weight
versus other containers.
 */
  CpuShares?: number;
  /** Memory limit in bytes. */
  Memory?: number;
  /** Path to `cgroups` under which the container's `cgroup` is created. If
the path is not absolute, the path is considered to be relative to the
`cgroups` path of the init process. Cgroups are created if they do not
already exist.
 */
  CgroupParent?: string;
  /** Block IO weight (relative weight). */
  BlkioWeight?: number;
  /** Block IO weight (relative device weight) in the form:

```
[{"Path": "device_path", "Weight": weight}]
```
 */
  BlkioWeightDevice?: ResourcesBlkioWeightDeviceItem[];
  /** Limit read rate (bytes per second) from a device, in the form:

```
[{"Path": "device_path", "Rate": rate}]
```
 */
  BlkioDeviceReadBps?: ThrottleDevice[];
  /** Limit write rate (bytes per second) to a device, in the form:

```
[{"Path": "device_path", "Rate": rate}]
```
 */
  BlkioDeviceWriteBps?: ThrottleDevice[];
  /** Limit read rate (IO per second) from a device, in the form:

```
[{"Path": "device_path", "Rate": rate}]
```
 */
  BlkioDeviceReadIOps?: ThrottleDevice[];
  /** Limit write rate (IO per second) to a device, in the form:

```
[{"Path": "device_path", "Rate": rate}]
```
 */
  BlkioDeviceWriteIOps?: ThrottleDevice[];
  /** The length of a CPU period in microseconds. */
  CpuPeriod?: number;
  /** Microseconds of CPU time that the container can get in a CPU period.
   */
  CpuQuota?: number;
  /** The length of a CPU real-time period in microseconds. Set to 0 to
allocate no time allocated to real-time tasks.
 */
  CpuRealtimePeriod?: number;
  /** The length of a CPU real-time runtime in microseconds. Set to 0 to
allocate no time allocated to real-time tasks.
 */
  CpuRealtimeRuntime?: number;
  /** CPUs in which to allow execution (e.g., `0-3`, `0,1`).
   */
  CpusetCpus?: string;
  /** Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only
effective on NUMA systems.
 */
  CpusetMems?: string;
  /** A list of devices to add to the container. */
  Devices?: DeviceMapping[];
  /** a list of cgroup rules to apply to the container */
  DeviceCgroupRules?: string[];
  /** A list of requests for devices to be sent to device drivers.
   */
  DeviceRequests?: DeviceRequest[];
  /** Kernel memory limit in bytes.

<p><br /></p>

> **Deprecated**: This field is deprecated as the kernel 5.4 deprecated
> `kmem.limit_in_bytes`.
 */
  KernelMemory?: number;
  /** Hard limit for kernel TCP buffer memory (in bytes). */
  KernelMemoryTCP?: number;
  /** Memory soft limit in bytes. */
  MemoryReservation?: number;
  /** Total memory limit (memory + swap). Set as `-1` to enable unlimited
swap.
 */
  MemorySwap?: number;
  /** Tune a container's memory swappiness behavior. Accepts an integer
between 0 and 100.
 */
  MemorySwappiness?: number;
  /** CPU quota in units of 10<sup>-9</sup> CPUs. */
  NanoCpus?: number;
  /** Disable OOM Killer for the container. */
  OomKillDisable?: boolean;
  /** Run an init inside the container that forwards signals and reaps
processes. This field is omitted if empty, and the default (as
configured on the daemon) is used.
 */
  Init?: boolean | null;
  /** Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null`
to not change.
 */
  PidsLimit?: number | null;
  /** A list of resource limits to set in the container. For example:

```
{"Name": "nofile", "Soft": 1024, "Hard": 2048}
```
 */
  Ulimits?: ResourcesUlimitsItem[];
  /** The number of usable CPUs (Windows only).

On Windows Server containers, the processor resource controls are
mutually exclusive. The order of precedence is `CPUCount` first, then
`CPUShares`, and `CPUPercent` last.
 */
  CpuCount?: number;
  /** The usable percentage of the available CPUs (Windows only).

On Windows Server containers, the processor resource controls are
mutually exclusive. The order of precedence is `CPUCount` first, then
`CPUShares`, and `CPUPercent` last.
 */
  CpuPercent?: number;
  /** Maximum IOps for the container system drive (Windows only) */
  IOMaximumIOps?: number;
  /** Maximum IO in bytes per second for the container system drive
(Windows only).
 */
  IOMaximumBandwidth?: number;
}

/**
 * - Empty string means not to restart
- `no` Do not automatically restart
- `always` Always restart
- `unless-stopped` Restart always except when the user has manually stopped the container
- `on-failure` Restart only when the container exit code is non-zero

 */
export type RestartPolicyName =
  typeof RestartPolicyName[keyof typeof RestartPolicyName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RestartPolicyName = {
  no: 'no',
  always: 'always',
  'unless-stopped': 'unless-stopped',
  'on-failure': 'on-failure',
} as const;

/**
 * The behavior to apply when the container exits. The default is not to
restart.

An ever increasing delay (double the previous delay, starting at 100ms) is
added before each restart to prevent flooding the server.

 */
export interface RestartPolicy {
  /** - Empty string means not to restart
- `no` Do not automatically restart
- `always` Always restart
- `unless-stopped` Restart always except when the user has manually stopped the container
- `on-failure` Restart only when the container exit code is non-zero
 */
  Name?: RestartPolicyName;
  /** If `on-failure` is used, the number of times to retry before giving up.
   */
  MaximumRetryCount?: number;
}

/**
 * Optional configuration for the `tmpfs` type.
 */
export type MountTmpfsOptions = {
  /** The size for the tmpfs mount in bytes. */
  SizeBytes?: number;
  /** The permission mode for the tmpfs mount in an integer. */
  Mode?: number;
};

/**
 * key/value map of driver specific options.
 */
export type MountVolumeOptionsDriverConfigOptions = { [key: string]: string };

/**
 * Map of driver specific options
 */
export type MountVolumeOptionsDriverConfig = {
  /** Name of the driver to use to create the volume. */
  Name?: string;
  /** key/value map of driver specific options. */
  Options?: MountVolumeOptionsDriverConfigOptions;
};

/**
 * User-defined key/value metadata.
 */
export type MountVolumeOptionsLabels = { [key: string]: string };

/**
 * Optional configuration for the `volume` type.
 */
export type MountVolumeOptions = {
  /** Populate volume with data from the target. */
  NoCopy?: boolean;
  /** User-defined key/value metadata. */
  Labels?: MountVolumeOptionsLabels;
  /** Map of driver specific options */
  DriverConfig?: MountVolumeOptionsDriverConfig;
};

/**
 * A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
 */
export type MountBindOptionsPropagation =
  typeof MountBindOptionsPropagation[keyof typeof MountBindOptionsPropagation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MountBindOptionsPropagation = {
  private: 'private',
  rprivate: 'rprivate',
  shared: 'shared',
  rshared: 'rshared',
  slave: 'slave',
  rslave: 'rslave',
} as const;

/**
 * Optional configuration for the `bind` type.
 */
export type MountBindOptions = {
  /** A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`. */
  Propagation?: MountBindOptionsPropagation;
  /** Disable recursive bind mount. */
  NonRecursive?: boolean;
};

/**
 * The mount type. Available types:

- `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
- `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
- `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
- `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container.

 */
export type MountType = typeof MountType[keyof typeof MountType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MountType = {
  bind: 'bind',
  volume: 'volume',
  tmpfs: 'tmpfs',
  npipe: 'npipe',
} as const;

export interface Mount {
  /** Container path. */
  Target?: string;
  /** Mount source (e.g. a volume name, a host path). */
  Source?: string;
  /** The mount type. Available types:

- `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
- `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
- `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
- `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container.
 */
  Type?: MountType;
  /** Whether the mount should be read-only. */
  ReadOnly?: boolean;
  /** The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`. */
  Consistency?: string;
  /** Optional configuration for the `bind` type. */
  BindOptions?: MountBindOptions;
  /** Optional configuration for the `volume` type. */
  VolumeOptions?: MountVolumeOptions;
  /** Optional configuration for the `tmpfs` type. */
  TmpfsOptions?: MountTmpfsOptions;
}

export interface ThrottleDevice {
  /** Device path */
  Path?: string;
  /** Rate */
  Rate?: number;
}

/**
 * Driver-specific options, specified as a key/value pairs. These options
are passed directly to the driver.

 */
export type DeviceRequestOptions = { [key: string]: string };

/**
 * A request for devices to be sent to device drivers
 */
export interface DeviceRequest {
  Driver?: string;
  Count?: number;
  DeviceIDs?: string[];
  /** A list of capabilities; an OR list of AND lists of capabilities.
   */
  Capabilities?: string[][];
  /** Driver-specific options, specified as a key/value pairs. These options
are passed directly to the driver.
 */
  Options?: DeviceRequestOptions;
}

/**
 * A device mapping between the host and container
 */
export interface DeviceMapping {
  PathOnHost?: string;
  PathInContainer?: string;
  CgroupPermissions?: string;
}

/**
 * The mount type:

- `bind` a mount of a file or directory from the host into the container.
- `volume` a docker volume with the given `Name`.
- `tmpfs` a `tmpfs`.
- `npipe` a named pipe from the host into the container.

 */
export type MountPointType = typeof MountPointType[keyof typeof MountPointType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MountPointType = {
  bind: 'bind',
  volume: 'volume',
  tmpfs: 'tmpfs',
  npipe: 'npipe',
} as const;

/**
 * MountPoint represents a mount point configuration inside the container.
This is used for reporting the mountpoints in use by a container.

 */
export interface MountPoint {
  /** The mount type:

- `bind` a mount of a file or directory from the host into the container.
- `volume` a docker volume with the given `Name`.
- `tmpfs` a `tmpfs`.
- `npipe` a named pipe from the host into the container.
 */
  Type?: MountPointType;
  /** Name is the name reference to the underlying data defined by `Source`
e.g., the volume name.
 */
  Name?: string;
  /** Source location of the mount.

For volumes, this contains the storage location of the volume (within
`/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains
the source (host) part of the bind-mount. For `tmpfs` mount points, this
field is empty.
 */
  Source?: string;
  /** Destination is the path relative to the container root (`/`) where
the `Source` is mounted inside the container.
 */
  Destination?: string;
  /** Driver is the volume driver used to create the volume (if it is a volume).
   */
  Driver?: string;
  /** Mode is a comma separated list of options supplied by the user when
creating the bind/volume mount.

The default is platform-specific (`"z"` on Linux, empty on Windows).
 */
  Mode?: string;
  /** Whether the mount is mounted writable (read-write).
   */
  RW?: boolean;
  /** Propagation describes how mounts are propagated from the host into the
mount point, and vice-versa. Refer to the [Linux kernel documentation](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt)
for details. This field is not used on Windows.
 */
  Propagation?: string;
}

export type PortType = typeof PortType[keyof typeof PortType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PortType = {
  tcp: 'tcp',
  udp: 'udp',
  sctp: 'sctp',
} as const;

/**
 * An open port on a container
 */
export interface Port {
  /** Host IP address that the container's port is mapped to */
  IP?: string;
  /** Port on the container */
  PrivatePort: number;
  /** Port exposed on the host */
  PublicPort?: number;
  Type: PortType;
}
