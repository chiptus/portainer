/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the
Docker client uses to communicate with the Engine, so everything the Docker
client can do can be done with the API.

Most of the client's commands map directly to API endpoints (e.g. `docker ps`
is `GET /containers/json`). The notable exception is running containers,
which consists of several API calls.

# Errors

The API uses standard HTTP status codes to indicate the success or failure
of the API call. The body of the response will be JSON in the following
format:

```
{
  "message": "page not found"
}
```

# Versioning

The API is usually changed in each release, so API calls are versioned to
ensure that clients don't break. To lock to a specific version of the API,
you prefix the URL with its version, for example, call `/v1.30/info` to use
the v1.30 version of the `/info` endpoint. If the API version specified in
the URL is not supported by the daemon, a HTTP `400 Bad Request` error message
is returned.

If you omit the version-prefix, the current version of the API (v1.41) is used.
For example, calling `/info` is the same as calling `/v1.41/info`. Using the
API without a version-prefix is deprecated and will be removed in a future release.

Engine releases in the near future should support this version of the API,
so your client will continue to work even if it is talking to a newer Engine.

The API uses an open schema model, which means server may add extra properties
to responses. Likewise, the server will ignore any extra query parameters and
request body properties. When you write clients, you need to ignore additional
properties in responses to ensure they do not break when talking to newer
daemons.


# Authentication

Authentication for registries is handled client side. The client has to send
authentication details to various endpoints that need to communicate with
registries, such as `POST /images/(name)/push`. These are sent as
`X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5)
(JSON) string with the following structure:

```
{
  "username": "string",
  "password": "string",
  "email": "string",
  "serveraddress": "string"
}
```

The `serveraddress` is a domain/IP without a protocol. Throughout this
structure, double quotes are required.

If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth),
you can just pass this instead of credentials:

```
{
  "identitytoken": "9cbaf023786cd7..."
}
```

 * OpenAPI spec version: 1.41
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  IdResponse,
  ErrorResponse,
  ContainerExecBody,
  ExecStartBody,
  ExecResizeParams,
  ExecInspect200,
} from '../dockerEngineAPI.schemas';

/**
 * Run a command inside a running container.
 * @summary Create an exec instance
 */
export const containerExec = (
  endpointId: number,
  id: string,
  containerExecBody: ContainerExecBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<IdResponse>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/containers/${id}/exec`,
    containerExecBody,
    options
  );

export const getContainerExecMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof containerExec>>,
    TError,
    { endpointId: number; id: string; data: ContainerExecBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof containerExec>>,
  TError,
  { endpointId: number; id: string; data: ContainerExecBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof containerExec>>,
    { endpointId: number; id: string; data: ContainerExecBody }
  > = (props) => {
    const { endpointId, id, data } = props ?? {};

    return containerExec(endpointId, id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ContainerExecMutationResult = NonNullable<
  Awaited<ReturnType<typeof containerExec>>
>;
export type ContainerExecMutationBody = ContainerExecBody;
export type ContainerExecMutationError = AxiosError<ErrorResponse>;

export const useContainerExec = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof containerExec>>,
    TError,
    { endpointId: number; id: string; data: ContainerExecBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getContainerExecMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Starts a previously set up exec instance. If detach is true, this endpoint
returns immediately after starting the command. Otherwise, it sets up an
interactive session with the command.

 * @summary Start an exec instance
 */
export const execStart = (
  endpointId: number,
  id: string,
  execStartBody: ExecStartBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/exec/${id}/start`,
    execStartBody,
    options
  );

export const getExecStartMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof execStart>>,
    TError,
    { endpointId: number; id: string; data: ExecStartBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof execStart>>,
  TError,
  { endpointId: number; id: string; data: ExecStartBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof execStart>>,
    { endpointId: number; id: string; data: ExecStartBody }
  > = (props) => {
    const { endpointId, id, data } = props ?? {};

    return execStart(endpointId, id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ExecStartMutationResult = NonNullable<
  Awaited<ReturnType<typeof execStart>>
>;
export type ExecStartMutationBody = ExecStartBody;
export type ExecStartMutationError = AxiosError<ErrorResponse>;

export const useExecStart = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof execStart>>,
    TError,
    { endpointId: number; id: string; data: ExecStartBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getExecStartMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Resize the TTY session used by an exec instance. This endpoint only works
if `tty` was specified as part of creating and starting the exec instance.

 * @summary Resize an exec instance
 */
export const execResize = (
  endpointId: number,
  id: string,
  params?: ExecResizeParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(`/endpoints/${endpointId}/docker/exec/${id}/resize`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getExecResizeMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof execResize>>,
    TError,
    { endpointId: number; id: string; params?: ExecResizeParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof execResize>>,
  TError,
  { endpointId: number; id: string; params?: ExecResizeParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof execResize>>,
    { endpointId: number; id: string; params?: ExecResizeParams }
  > = (props) => {
    const { endpointId, id, params } = props ?? {};

    return execResize(endpointId, id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ExecResizeMutationResult = NonNullable<
  Awaited<ReturnType<typeof execResize>>
>;

export type ExecResizeMutationError = AxiosError<ErrorResponse>;

export const useExecResize = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof execResize>>,
    TError,
    { endpointId: number; id: string; params?: ExecResizeParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getExecResizeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Return low-level information about an exec instance.
 * @summary Inspect an exec instance
 */
export const execInspect = (
  endpointId: number,
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ExecInspect200>> =>
  axios.get(`/endpoints/${endpointId}/docker/exec/${id}/json`, options);

export const getExecInspectQueryKey = (endpointId: number, id: string) =>
  [`/endpoints/${endpointId}/docker/exec/${id}/json`] as const;

export const getExecInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof execInspect>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof execInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof execInspect>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getExecInspectQueryKey(endpointId, id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof execInspect>>> = ({
    signal,
  }) => execInspect(endpointId, id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!(endpointId && id), ...queryOptions };
};

export type ExecInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof execInspect>>
>;
export type ExecInspectQueryError = AxiosError<ErrorResponse>;

export const useExecInspect = <
  TData = Awaited<ReturnType<typeof execInspect>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof execInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getExecInspectQueryOptions(endpointId, id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
