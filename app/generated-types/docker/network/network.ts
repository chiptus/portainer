/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the
Docker client uses to communicate with the Engine, so everything the Docker
client can do can be done with the API.

Most of the client's commands map directly to API endpoints (e.g. `docker ps`
is `GET /containers/json`). The notable exception is running containers,
which consists of several API calls.

# Errors

The API uses standard HTTP status codes to indicate the success or failure
of the API call. The body of the response will be JSON in the following
format:

```
{
  "message": "page not found"
}
```

# Versioning

The API is usually changed in each release, so API calls are versioned to
ensure that clients don't break. To lock to a specific version of the API,
you prefix the URL with its version, for example, call `/v1.30/info` to use
the v1.30 version of the `/info` endpoint. If the API version specified in
the URL is not supported by the daemon, a HTTP `400 Bad Request` error message
is returned.

If you omit the version-prefix, the current version of the API (v1.41) is used.
For example, calling `/info` is the same as calling `/v1.41/info`. Using the
API without a version-prefix is deprecated and will be removed in a future release.

Engine releases in the near future should support this version of the API,
so your client will continue to work even if it is talking to a newer Engine.

The API uses an open schema model, which means server may add extra properties
to responses. Likewise, the server will ignore any extra query parameters and
request body properties. When you write clients, you need to ignore additional
properties in responses to ensure they do not break when talking to newer
daemons.


# Authentication

Authentication for registries is handled client side. The client has to send
authentication details to various endpoints that need to communicate with
registries, such as `POST /images/(name)/push`. These are sent as
`X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5)
(JSON) string with the following structure:

```
{
  "username": "string",
  "password": "string",
  "email": "string",
  "serveraddress": "string"
}
```

The `serveraddress` is a domain/IP without a protocol. Throughout this
structure, double quotes are required.

If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth),
you can just pass this instead of credentials:

```
{
  "identitytoken": "9cbaf023786cd7..."
}
```

 * OpenAPI spec version: 1.41
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  Network,
  ErrorResponse,
  NetworkListParams,
  NetworkInspectParams,
  NetworkCreate201,
  NetworkCreateBody,
  NetworkConnectBody,
  NetworkDisconnectBody,
  NetworkPrune200,
  NetworkPruneParams,
} from '../dockerEngineAPI.schemas';

/**
 * Returns a list of networks. For details on the format, see the
[network inspect endpoint](#operation/NetworkInspect).

Note that it uses a different, smaller representation of a network than
inspecting a single network. For example, the list of containers attached
to the network is not propagated in API versions 1.28 and up.

 * @summary List networks
 */
export const networkList = (
  endpointId: number,
  params?: NetworkListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Network[]>> =>
  axios.get(`/endpoints/${endpointId}/docker/networks`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getNetworkListQueryKey = (
  endpointId: number,
  params?: NetworkListParams
) =>
  [
    `/endpoints/${endpointId}/docker/networks`,
    ...(params ? [params] : []),
  ] as const;

export const getNetworkListQueryOptions = <
  TData = Awaited<ReturnType<typeof networkList>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  params?: NetworkListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof networkList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof networkList>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getNetworkListQueryKey(endpointId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof networkList>>> = ({
    signal,
  }) => networkList(endpointId, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!endpointId, ...queryOptions };
};

export type NetworkListQueryResult = NonNullable<
  Awaited<ReturnType<typeof networkList>>
>;
export type NetworkListQueryError = AxiosError<ErrorResponse>;

export const useNetworkList = <
  TData = Awaited<ReturnType<typeof networkList>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  params?: NetworkListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof networkList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getNetworkListQueryOptions(endpointId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Inspect a network
 */
export const networkInspect = (
  endpointId: number,
  id: string,
  params?: NetworkInspectParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Network>> =>
  axios.get(`/endpoints/${endpointId}/docker/networks/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getNetworkInspectQueryKey = (
  endpointId: number,
  id: string,
  params?: NetworkInspectParams
) =>
  [
    `/endpoints/${endpointId}/docker/networks/${id}`,
    ...(params ? [params] : []),
  ] as const;

export const getNetworkInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof networkInspect>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  id: string,
  params?: NetworkInspectParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof networkInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof networkInspect>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getNetworkInspectQueryKey(endpointId, id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof networkInspect>>> = ({
    signal,
  }) => networkInspect(endpointId, id, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!(endpointId && id), ...queryOptions };
};

export type NetworkInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof networkInspect>>
>;
export type NetworkInspectQueryError = AxiosError<ErrorResponse>;

export const useNetworkInspect = <
  TData = Awaited<ReturnType<typeof networkInspect>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  id: string,
  params?: NetworkInspectParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof networkInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getNetworkInspectQueryOptions(
    endpointId,
    id,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Remove a network
 */
export const networkDelete = (
  endpointId: number,
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.delete(`/endpoints/${endpointId}/docker/networks/${id}`, options);

export const getNetworkDeleteMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof networkDelete>>,
    TError,
    { endpointId: number; id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof networkDelete>>,
  TError,
  { endpointId: number; id: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof networkDelete>>,
    { endpointId: number; id: string }
  > = (props) => {
    const { endpointId, id } = props ?? {};

    return networkDelete(endpointId, id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NetworkDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof networkDelete>>
>;

export type NetworkDeleteMutationError = AxiosError<ErrorResponse>;

export const useNetworkDelete = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof networkDelete>>,
    TError,
    { endpointId: number; id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getNetworkDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Create a network
 */
export const networkCreate = (
  endpointId: number,
  networkCreateBody: NetworkCreateBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NetworkCreate201>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/networks/create`,
    networkCreateBody,
    options
  );

export const getNetworkCreateMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof networkCreate>>,
    TError,
    { endpointId: number; data: NetworkCreateBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof networkCreate>>,
  TError,
  { endpointId: number; data: NetworkCreateBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof networkCreate>>,
    { endpointId: number; data: NetworkCreateBody }
  > = (props) => {
    const { endpointId, data } = props ?? {};

    return networkCreate(endpointId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NetworkCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof networkCreate>>
>;
export type NetworkCreateMutationBody = NetworkCreateBody;
export type NetworkCreateMutationError = AxiosError<ErrorResponse>;

export const useNetworkCreate = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof networkCreate>>,
    TError,
    { endpointId: number; data: NetworkCreateBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getNetworkCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Connect a container to a network
 */
export const networkConnect = (
  endpointId: number,
  id: string,
  networkConnectBody: NetworkConnectBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/networks/${id}/connect`,
    networkConnectBody,
    options
  );

export const getNetworkConnectMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof networkConnect>>,
    TError,
    { endpointId: number; id: string; data: NetworkConnectBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof networkConnect>>,
  TError,
  { endpointId: number; id: string; data: NetworkConnectBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof networkConnect>>,
    { endpointId: number; id: string; data: NetworkConnectBody }
  > = (props) => {
    const { endpointId, id, data } = props ?? {};

    return networkConnect(endpointId, id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NetworkConnectMutationResult = NonNullable<
  Awaited<ReturnType<typeof networkConnect>>
>;
export type NetworkConnectMutationBody = NetworkConnectBody;
export type NetworkConnectMutationError = AxiosError<ErrorResponse>;

export const useNetworkConnect = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof networkConnect>>,
    TError,
    { endpointId: number; id: string; data: NetworkConnectBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getNetworkConnectMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Disconnect a container from a network
 */
export const networkDisconnect = (
  endpointId: number,
  id: string,
  networkDisconnectBody: NetworkDisconnectBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/networks/${id}/disconnect`,
    networkDisconnectBody,
    options
  );

export const getNetworkDisconnectMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof networkDisconnect>>,
    TError,
    { endpointId: number; id: string; data: NetworkDisconnectBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof networkDisconnect>>,
  TError,
  { endpointId: number; id: string; data: NetworkDisconnectBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof networkDisconnect>>,
    { endpointId: number; id: string; data: NetworkDisconnectBody }
  > = (props) => {
    const { endpointId, id, data } = props ?? {};

    return networkDisconnect(endpointId, id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NetworkDisconnectMutationResult = NonNullable<
  Awaited<ReturnType<typeof networkDisconnect>>
>;
export type NetworkDisconnectMutationBody = NetworkDisconnectBody;
export type NetworkDisconnectMutationError = AxiosError<ErrorResponse>;

export const useNetworkDisconnect = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof networkDisconnect>>,
    TError,
    { endpointId: number; id: string; data: NetworkDisconnectBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getNetworkDisconnectMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Delete unused networks
 */
export const networkPrune = (
  endpointId: number,
  params?: NetworkPruneParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NetworkPrune200>> =>
  axios.post(`/endpoints/${endpointId}/docker/networks/prune`, undefined, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getNetworkPruneMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof networkPrune>>,
    TError,
    { endpointId: number; params?: NetworkPruneParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof networkPrune>>,
  TError,
  { endpointId: number; params?: NetworkPruneParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof networkPrune>>,
    { endpointId: number; params?: NetworkPruneParams }
  > = (props) => {
    const { endpointId, params } = props ?? {};

    return networkPrune(endpointId, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NetworkPruneMutationResult = NonNullable<
  Awaited<ReturnType<typeof networkPrune>>
>;

export type NetworkPruneMutationError = AxiosError<ErrorResponse>;

export const useNetworkPrune = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof networkPrune>>,
    TError,
    { endpointId: number; params?: NetworkPruneParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getNetworkPruneMutationOptions(options);

  return useMutation(mutationOptions);
};
