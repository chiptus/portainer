/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the
Docker client uses to communicate with the Engine, so everything the Docker
client can do can be done with the API.

Most of the client's commands map directly to API endpoints (e.g. `docker ps`
is `GET /containers/json`). The notable exception is running containers,
which consists of several API calls.

# Errors

The API uses standard HTTP status codes to indicate the success or failure
of the API call. The body of the response will be JSON in the following
format:

```
{
  "message": "page not found"
}
```

# Versioning

The API is usually changed in each release, so API calls are versioned to
ensure that clients don't break. To lock to a specific version of the API,
you prefix the URL with its version, for example, call `/v1.30/info` to use
the v1.30 version of the `/info` endpoint. If the API version specified in
the URL is not supported by the daemon, a HTTP `400 Bad Request` error message
is returned.

If you omit the version-prefix, the current version of the API (v1.41) is used.
For example, calling `/info` is the same as calling `/v1.41/info`. Using the
API without a version-prefix is deprecated and will be removed in a future release.

Engine releases in the near future should support this version of the API,
so your client will continue to work even if it is talking to a newer Engine.

The API uses an open schema model, which means server may add extra properties
to responses. Likewise, the server will ignore any extra query parameters and
request body properties. When you write clients, you need to ignore additional
properties in responses to ensure they do not break when talking to newer
daemons.


# Authentication

Authentication for registries is handled client side. The client has to send
authentication details to various endpoints that need to communicate with
registries, such as `POST /images/(name)/push`. These are sent as
`X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5)
(JSON) string with the following structure:

```
{
  "username": "string",
  "password": "string",
  "email": "string",
  "serveraddress": "string"
}
```

The `serveraddress` is a domain/IP without a protocol. Throughout this
structure, double quotes are required.

If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth),
you can just pass this instead of credentials:

```
{
  "identitytoken": "9cbaf023786cd7..."
}
```

 * OpenAPI spec version: 1.41
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  Plugin,
  ErrorResponse,
  PluginListParams,
  PluginPrivilege,
  GetPluginPrivilegesParams,
  PluginPrivilegeArrayBody,
  PluginPullParams,
  PluginDeleteParams,
  PluginEnableParams,
  PluginUpgradeParams,
  PluginCreateParams,
} from '../dockerEngineAPI.schemas';

/**
 * Returns information about installed plugins.
 * @summary List plugins
 */
export const pluginList = (
  endpointId: number,
  params?: PluginListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Plugin[]>> =>
  axios.get(`/endpoints/${endpointId}/docker/plugins`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getPluginListQueryKey = (
  endpointId: number,
  params?: PluginListParams
) =>
  [
    `/endpoints/${endpointId}/docker/plugins`,
    ...(params ? [params] : []),
  ] as const;

export const getPluginListQueryOptions = <
  TData = Awaited<ReturnType<typeof pluginList>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  params?: PluginListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof pluginList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof pluginList>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPluginListQueryKey(endpointId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof pluginList>>> = ({
    signal,
  }) => pluginList(endpointId, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!endpointId, ...queryOptions };
};

export type PluginListQueryResult = NonNullable<
  Awaited<ReturnType<typeof pluginList>>
>;
export type PluginListQueryError = AxiosError<ErrorResponse>;

export const usePluginList = <
  TData = Awaited<ReturnType<typeof pluginList>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  params?: PluginListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof pluginList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPluginListQueryOptions(endpointId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get plugin privileges
 */
export const getPluginPrivileges = (
  endpointId: number,
  params: GetPluginPrivilegesParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PluginPrivilege[]>> =>
  axios.get(`/endpoints/${endpointId}/docker/plugins/privileges`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getGetPluginPrivilegesQueryKey = (
  endpointId: number,
  params: GetPluginPrivilegesParams
) =>
  [
    `/endpoints/${endpointId}/docker/plugins/privileges`,
    ...(params ? [params] : []),
  ] as const;

export const getGetPluginPrivilegesQueryOptions = <
  TData = Awaited<ReturnType<typeof getPluginPrivileges>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  params: GetPluginPrivilegesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPluginPrivileges>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof getPluginPrivileges>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetPluginPrivilegesQueryKey(endpointId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPluginPrivileges>>
  > = ({ signal }) =>
    getPluginPrivileges(endpointId, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!endpointId, ...queryOptions };
};

export type GetPluginPrivilegesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPluginPrivileges>>
>;
export type GetPluginPrivilegesQueryError = AxiosError<ErrorResponse>;

export const useGetPluginPrivileges = <
  TData = Awaited<ReturnType<typeof getPluginPrivileges>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  params: GetPluginPrivilegesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getPluginPrivileges>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPluginPrivilegesQueryOptions(
    endpointId,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Pulls and installs a plugin. After the plugin is installed, it can be
enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).

 * @summary Install a plugin
 */
export const pluginPull = (
  endpointId: number,
  pluginPrivilegeArrayBody: PluginPrivilegeArrayBody,
  params: PluginPullParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/plugins/pull`,
    pluginPrivilegeArrayBody,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );

export const getPluginPullMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginPull>>,
    TError,
    {
      endpointId: number;
      data: PluginPrivilegeArrayBody;
      params: PluginPullParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof pluginPull>>,
  TError,
  {
    endpointId: number;
    data: PluginPrivilegeArrayBody;
    params: PluginPullParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof pluginPull>>,
    {
      endpointId: number;
      data: PluginPrivilegeArrayBody;
      params: PluginPullParams;
    }
  > = (props) => {
    const { endpointId, data, params } = props ?? {};

    return pluginPull(endpointId, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PluginPullMutationResult = NonNullable<
  Awaited<ReturnType<typeof pluginPull>>
>;
export type PluginPullMutationBody = PluginPrivilegeArrayBody;
export type PluginPullMutationError = AxiosError<ErrorResponse>;

export const usePluginPull = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginPull>>,
    TError,
    {
      endpointId: number;
      data: PluginPrivilegeArrayBody;
      params: PluginPullParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPluginPullMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Inspect a plugin
 */
export const pluginInspect = (
  endpointId: number,
  name: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Plugin>> =>
  axios.get(`/endpoints/${endpointId}/docker/plugins/${name}/json`, options);

export const getPluginInspectQueryKey = (endpointId: number, name: string) =>
  [`/endpoints/${endpointId}/docker/plugins/${name}/json`] as const;

export const getPluginInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof pluginInspect>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  name: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof pluginInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof pluginInspect>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getPluginInspectQueryKey(endpointId, name);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof pluginInspect>>> = ({
    signal,
  }) => pluginInspect(endpointId, name, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(endpointId && name),
    ...queryOptions,
  };
};

export type PluginInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof pluginInspect>>
>;
export type PluginInspectQueryError = AxiosError<ErrorResponse>;

export const usePluginInspect = <
  TData = Awaited<ReturnType<typeof pluginInspect>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  name: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof pluginInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getPluginInspectQueryOptions(endpointId, name, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Remove a plugin
 */
export const pluginDelete = (
  endpointId: number,
  name: string,
  params?: PluginDeleteParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Plugin>> =>
  axios.delete(`/endpoints/${endpointId}/docker/plugins/${name}`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getPluginDeleteMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginDelete>>,
    TError,
    { endpointId: number; name: string; params?: PluginDeleteParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof pluginDelete>>,
  TError,
  { endpointId: number; name: string; params?: PluginDeleteParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof pluginDelete>>,
    { endpointId: number; name: string; params?: PluginDeleteParams }
  > = (props) => {
    const { endpointId, name, params } = props ?? {};

    return pluginDelete(endpointId, name, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PluginDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof pluginDelete>>
>;

export type PluginDeleteMutationError = AxiosError<ErrorResponse>;

export const usePluginDelete = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginDelete>>,
    TError,
    { endpointId: number; name: string; params?: PluginDeleteParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPluginDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Enable a plugin
 */
export const pluginEnable = (
  endpointId: number,
  name: string,
  params?: PluginEnableParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/plugins/${name}/enable`,
    undefined,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );

export const getPluginEnableMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginEnable>>,
    TError,
    { endpointId: number; name: string; params?: PluginEnableParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof pluginEnable>>,
  TError,
  { endpointId: number; name: string; params?: PluginEnableParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof pluginEnable>>,
    { endpointId: number; name: string; params?: PluginEnableParams }
  > = (props) => {
    const { endpointId, name, params } = props ?? {};

    return pluginEnable(endpointId, name, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PluginEnableMutationResult = NonNullable<
  Awaited<ReturnType<typeof pluginEnable>>
>;

export type PluginEnableMutationError = AxiosError<ErrorResponse>;

export const usePluginEnable = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginEnable>>,
    TError,
    { endpointId: number; name: string; params?: PluginEnableParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPluginEnableMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Disable a plugin
 */
export const pluginDisable = (
  endpointId: number,
  name: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/plugins/${name}/disable`,
    undefined,
    options
  );

export const getPluginDisableMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginDisable>>,
    TError,
    { endpointId: number; name: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof pluginDisable>>,
  TError,
  { endpointId: number; name: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof pluginDisable>>,
    { endpointId: number; name: string }
  > = (props) => {
    const { endpointId, name } = props ?? {};

    return pluginDisable(endpointId, name, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PluginDisableMutationResult = NonNullable<
  Awaited<ReturnType<typeof pluginDisable>>
>;

export type PluginDisableMutationError = AxiosError<ErrorResponse>;

export const usePluginDisable = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginDisable>>,
    TError,
    { endpointId: number; name: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPluginDisableMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Upgrade a plugin
 */
export const pluginUpgrade = (
  endpointId: number,
  name: string,
  pluginPrivilegeArrayBody: PluginPrivilegeArrayBody,
  params: PluginUpgradeParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/plugins/${name}/upgrade`,
    pluginPrivilegeArrayBody,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );

export const getPluginUpgradeMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginUpgrade>>,
    TError,
    {
      endpointId: number;
      name: string;
      data: PluginPrivilegeArrayBody;
      params: PluginUpgradeParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof pluginUpgrade>>,
  TError,
  {
    endpointId: number;
    name: string;
    data: PluginPrivilegeArrayBody;
    params: PluginUpgradeParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof pluginUpgrade>>,
    {
      endpointId: number;
      name: string;
      data: PluginPrivilegeArrayBody;
      params: PluginUpgradeParams;
    }
  > = (props) => {
    const { endpointId, name, data, params } = props ?? {};

    return pluginUpgrade(endpointId, name, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PluginUpgradeMutationResult = NonNullable<
  Awaited<ReturnType<typeof pluginUpgrade>>
>;
export type PluginUpgradeMutationBody = PluginPrivilegeArrayBody;
export type PluginUpgradeMutationError = AxiosError<ErrorResponse>;

export const usePluginUpgrade = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginUpgrade>>,
    TError,
    {
      endpointId: number;
      name: string;
      data: PluginPrivilegeArrayBody;
      params: PluginUpgradeParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPluginUpgradeMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Create a plugin
 */
export const pluginCreate = (
  endpointId: number,
  pluginCreateBody: Blob,
  params: PluginCreateParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/plugins/create`,
    pluginCreateBody,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );

export const getPluginCreateMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginCreate>>,
    TError,
    { endpointId: number; data: Blob; params: PluginCreateParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof pluginCreate>>,
  TError,
  { endpointId: number; data: Blob; params: PluginCreateParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof pluginCreate>>,
    { endpointId: number; data: Blob; params: PluginCreateParams }
  > = (props) => {
    const { endpointId, data, params } = props ?? {};

    return pluginCreate(endpointId, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PluginCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof pluginCreate>>
>;
export type PluginCreateMutationBody = Blob;
export type PluginCreateMutationError = AxiosError<ErrorResponse>;

export const usePluginCreate = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginCreate>>,
    TError,
    { endpointId: number; data: Blob; params: PluginCreateParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPluginCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Push a plugin to the registry.

 * @summary Push a plugin
 */
export const pluginPush = (
  endpointId: number,
  name: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/plugins/${name}/push`,
    undefined,
    options
  );

export const getPluginPushMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginPush>>,
    TError,
    { endpointId: number; name: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof pluginPush>>,
  TError,
  { endpointId: number; name: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof pluginPush>>,
    { endpointId: number; name: string }
  > = (props) => {
    const { endpointId, name } = props ?? {};

    return pluginPush(endpointId, name, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PluginPushMutationResult = NonNullable<
  Awaited<ReturnType<typeof pluginPush>>
>;

export type PluginPushMutationError = AxiosError<ErrorResponse>;

export const usePluginPush = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginPush>>,
    TError,
    { endpointId: number; name: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPluginPushMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Configure a plugin
 */
export const pluginSet = (
  endpointId: number,
  name: string,
  pluginSetBody: string[],
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/plugins/${name}/set`,
    pluginSetBody,
    options
  );

export const getPluginSetMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginSet>>,
    TError,
    { endpointId: number; name: string; data: string[] },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof pluginSet>>,
  TError,
  { endpointId: number; name: string; data: string[] },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof pluginSet>>,
    { endpointId: number; name: string; data: string[] }
  > = (props) => {
    const { endpointId, name, data } = props ?? {};

    return pluginSet(endpointId, name, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PluginSetMutationResult = NonNullable<
  Awaited<ReturnType<typeof pluginSet>>
>;
export type PluginSetMutationBody = string[];
export type PluginSetMutationError = AxiosError<ErrorResponse>;

export const usePluginSet = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof pluginSet>>,
    TError,
    { endpointId: number; name: string; data: string[] },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPluginSetMutationOptions(options);

  return useMutation(mutationOptions);
};
