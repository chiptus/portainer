/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the
Docker client uses to communicate with the Engine, so everything the Docker
client can do can be done with the API.

Most of the client's commands map directly to API endpoints (e.g. `docker ps`
is `GET /containers/json`). The notable exception is running containers,
which consists of several API calls.

# Errors

The API uses standard HTTP status codes to indicate the success or failure
of the API call. The body of the response will be JSON in the following
format:

```
{
  "message": "page not found"
}
```

# Versioning

The API is usually changed in each release, so API calls are versioned to
ensure that clients don't break. To lock to a specific version of the API,
you prefix the URL with its version, for example, call `/v1.30/info` to use
the v1.30 version of the `/info` endpoint. If the API version specified in
the URL is not supported by the daemon, a HTTP `400 Bad Request` error message
is returned.

If you omit the version-prefix, the current version of the API (v1.41) is used.
For example, calling `/info` is the same as calling `/v1.41/info`. Using the
API without a version-prefix is deprecated and will be removed in a future release.

Engine releases in the near future should support this version of the API,
so your client will continue to work even if it is talking to a newer Engine.

The API uses an open schema model, which means server may add extra properties
to responses. Likewise, the server will ignore any extra query parameters and
request body properties. When you write clients, you need to ignore additional
properties in responses to ensure they do not break when talking to newer
daemons.


# Authentication

Authentication for registries is handled client side. The client has to send
authentication details to various endpoints that need to communicate with
registries, such as `POST /images/(name)/push`. These are sent as
`X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5)
(JSON) string with the following structure:

```
{
  "username": "string",
  "password": "string",
  "email": "string",
  "serveraddress": "string"
}
```

The `serveraddress` is a domain/IP without a protocol. Throughout this
structure, double quotes are required.

If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth),
you can just pass this instead of credentials:

```
{
  "identitytoken": "9cbaf023786cd7..."
}
```

 * OpenAPI spec version: 1.41
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  Service,
  ErrorResponse,
  ServiceListParams,
  ServiceCreate201,
  ServiceCreateBody,
  ServiceInspectParams,
  ServiceUpdateResponse,
  ServiceUpdateBody,
  ServiceUpdateParams,
  ServiceLogsParams,
} from '../dockerEngineAPI.schemas';

/**
 * @summary List services
 */
export const serviceList = (
  endpointId: number,
  params?: ServiceListParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Service[]>> =>
  axios.get(`/endpoints/${endpointId}/docker/services`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getServiceListQueryKey = (
  endpointId: number,
  params?: ServiceListParams
) =>
  [
    `/endpoints/${endpointId}/docker/services`,
    ...(params ? [params] : []),
  ] as const;

export const getServiceListQueryOptions = <
  TData = Awaited<ReturnType<typeof serviceList>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  params?: ServiceListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof serviceList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof serviceList>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getServiceListQueryKey(endpointId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof serviceList>>> = ({
    signal,
  }) => serviceList(endpointId, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!endpointId, ...queryOptions };
};

export type ServiceListQueryResult = NonNullable<
  Awaited<ReturnType<typeof serviceList>>
>;
export type ServiceListQueryError = AxiosError<ErrorResponse>;

export const useServiceList = <
  TData = Awaited<ReturnType<typeof serviceList>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  params?: ServiceListParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof serviceList>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getServiceListQueryOptions(endpointId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create a service
 */
export const serviceCreate = (
  endpointId: number,
  serviceCreateBody: ServiceCreateBody,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ServiceCreate201>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/services/create`,
    serviceCreateBody,
    options
  );

export const getServiceCreateMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceCreate>>,
    TError,
    { endpointId: number; data: ServiceCreateBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceCreate>>,
  TError,
  { endpointId: number; data: ServiceCreateBody },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceCreate>>,
    { endpointId: number; data: ServiceCreateBody }
  > = (props) => {
    const { endpointId, data } = props ?? {};

    return serviceCreate(endpointId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ServiceCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceCreate>>
>;
export type ServiceCreateMutationBody = ServiceCreateBody;
export type ServiceCreateMutationError = AxiosError<ErrorResponse>;

export const useServiceCreate = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceCreate>>,
    TError,
    { endpointId: number; data: ServiceCreateBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getServiceCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Inspect a service
 */
export const serviceInspect = (
  endpointId: number,
  id: string,
  params?: ServiceInspectParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Service>> =>
  axios.get(`/endpoints/${endpointId}/docker/services/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getServiceInspectQueryKey = (
  endpointId: number,
  id: string,
  params?: ServiceInspectParams
) =>
  [
    `/endpoints/${endpointId}/docker/services/${id}`,
    ...(params ? [params] : []),
  ] as const;

export const getServiceInspectQueryOptions = <
  TData = Awaited<ReturnType<typeof serviceInspect>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  id: string,
  params?: ServiceInspectParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof serviceInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof serviceInspect>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getServiceInspectQueryKey(endpointId, id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof serviceInspect>>> = ({
    signal,
  }) => serviceInspect(endpointId, id, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!(endpointId && id), ...queryOptions };
};

export type ServiceInspectQueryResult = NonNullable<
  Awaited<ReturnType<typeof serviceInspect>>
>;
export type ServiceInspectQueryError = AxiosError<ErrorResponse>;

export const useServiceInspect = <
  TData = Awaited<ReturnType<typeof serviceInspect>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  id: string,
  params?: ServiceInspectParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof serviceInspect>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getServiceInspectQueryOptions(
    endpointId,
    id,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Delete a service
 */
export const serviceDelete = (
  endpointId: number,
  id: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> =>
  axios.delete(`/endpoints/${endpointId}/docker/services/${id}`, options);

export const getServiceDeleteMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceDelete>>,
    TError,
    { endpointId: number; id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceDelete>>,
  TError,
  { endpointId: number; id: string },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceDelete>>,
    { endpointId: number; id: string }
  > = (props) => {
    const { endpointId, id } = props ?? {};

    return serviceDelete(endpointId, id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ServiceDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceDelete>>
>;

export type ServiceDeleteMutationError = AxiosError<ErrorResponse>;

export const useServiceDelete = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceDelete>>,
    TError,
    { endpointId: number; id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getServiceDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Update a service
 */
export const serviceUpdate = (
  endpointId: number,
  id: string,
  serviceUpdateBody: ServiceUpdateBody,
  params: ServiceUpdateParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ServiceUpdateResponse>> =>
  axios.post(
    `/endpoints/${endpointId}/docker/services/${id}/update`,
    serviceUpdateBody,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );

export const getServiceUpdateMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceUpdate>>,
    TError,
    {
      endpointId: number;
      id: string;
      data: ServiceUpdateBody;
      params: ServiceUpdateParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof serviceUpdate>>,
  TError,
  {
    endpointId: number;
    id: string;
    data: ServiceUpdateBody;
    params: ServiceUpdateParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof serviceUpdate>>,
    {
      endpointId: number;
      id: string;
      data: ServiceUpdateBody;
      params: ServiceUpdateParams;
    }
  > = (props) => {
    const { endpointId, id, data, params } = props ?? {};

    return serviceUpdate(endpointId, id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ServiceUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof serviceUpdate>>
>;
export type ServiceUpdateMutationBody = ServiceUpdateBody;
export type ServiceUpdateMutationError = AxiosError<ErrorResponse>;

export const useServiceUpdate = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof serviceUpdate>>,
    TError,
    {
      endpointId: number;
      id: string;
      data: ServiceUpdateBody;
      params: ServiceUpdateParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getServiceUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Get `stdout` and `stderr` logs from a service. See also
[`/containers/{id}/logs`](#operation/ContainerLogs).

**Note**: This endpoint works only for services with the `local`,
`json-file` or `journald` logging drivers.

 * @summary Get service logs
 */
export const serviceLogs = (
  endpointId: number,
  id: string,
  params?: ServiceLogsParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<Blob>> =>
  axios.get(`/endpoints/${endpointId}/docker/services/${id}/logs`, {
    responseType: 'blob',
    ...options,
    params: { ...params, ...options?.params },
  });

export const getServiceLogsQueryKey = (
  endpointId: number,
  id: string,
  params?: ServiceLogsParams
) =>
  [
    `/endpoints/${endpointId}/docker/services/${id}/logs`,
    ...(params ? [params] : []),
  ] as const;

export const getServiceLogsQueryOptions = <
  TData = Awaited<ReturnType<typeof serviceLogs>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  id: string,
  params?: ServiceLogsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof serviceLogs>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof serviceLogs>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getServiceLogsQueryKey(endpointId, id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof serviceLogs>>> = ({
    signal,
  }) => serviceLogs(endpointId, id, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!(endpointId && id), ...queryOptions };
};

export type ServiceLogsQueryResult = NonNullable<
  Awaited<ReturnType<typeof serviceLogs>>
>;
export type ServiceLogsQueryError = AxiosError<ErrorResponse>;

export const useServiceLogs = <
  TData = Awaited<ReturnType<typeof serviceLogs>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  id: string,
  params?: ServiceLogsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof serviceLogs>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getServiceLogsQueryOptions(
    endpointId,
    id,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
