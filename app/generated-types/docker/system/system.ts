/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the
Docker client uses to communicate with the Engine, so everything the Docker
client can do can be done with the API.

Most of the client's commands map directly to API endpoints (e.g. `docker ps`
is `GET /containers/json`). The notable exception is running containers,
which consists of several API calls.

# Errors

The API uses standard HTTP status codes to indicate the success or failure
of the API call. The body of the response will be JSON in the following
format:

```
{
  "message": "page not found"
}
```

# Versioning

The API is usually changed in each release, so API calls are versioned to
ensure that clients don't break. To lock to a specific version of the API,
you prefix the URL with its version, for example, call `/v1.30/info` to use
the v1.30 version of the `/info` endpoint. If the API version specified in
the URL is not supported by the daemon, a HTTP `400 Bad Request` error message
is returned.

If you omit the version-prefix, the current version of the API (v1.41) is used.
For example, calling `/info` is the same as calling `/v1.41/info`. Using the
API without a version-prefix is deprecated and will be removed in a future release.

Engine releases in the near future should support this version of the API,
so your client will continue to work even if it is talking to a newer Engine.

The API uses an open schema model, which means server may add extra properties
to responses. Likewise, the server will ignore any extra query parameters and
request body properties. When you write clients, you need to ignore additional
properties in responses to ensure they do not break when talking to newer
daemons.


# Authentication

Authentication for registries is handled client side. The client has to send
authentication details to various endpoints that need to communicate with
registries, such as `POST /images/(name)/push`. These are sent as
`X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5)
(JSON) string with the following structure:

```
{
  "username": "string",
  "password": "string",
  "email": "string",
  "serveraddress": "string"
}
```

The `serveraddress` is a domain/IP without a protocol. Throughout this
structure, double quotes are required.

If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth),
you can just pass this instead of credentials:

```
{
  "identitytoken": "9cbaf023786cd7..."
}
```

 * OpenAPI spec version: 1.41
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from 'react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';

import type {
  SystemAuth200,
  ErrorResponse,
  AuthConfig,
  SystemInfo,
  SystemVersion,
  EventMessage,
  SystemEventsParams,
  SystemDataUsage200One,
  SystemDataUsage200Two,
} from '../dockerEngineAPI.schemas';

/**
 * Validate credentials for a registry and, if available, get an identity
token for accessing the registry without password.

 * @summary Check auth configuration
 */
export const systemAuth = (
  endpointId: number,
  authConfig: AuthConfig,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SystemAuth200 | void>> =>
  axios.post(`/endpoints/${endpointId}/docker/auth`, authConfig, options);

export const getSystemAuthMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof systemAuth>>,
    TError,
    { endpointId: number; data: AuthConfig },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof systemAuth>>,
  TError,
  { endpointId: number; data: AuthConfig },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof systemAuth>>,
    { endpointId: number; data: AuthConfig }
  > = (props) => {
    const { endpointId, data } = props ?? {};

    return systemAuth(endpointId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SystemAuthMutationResult = NonNullable<
  Awaited<ReturnType<typeof systemAuth>>
>;
export type SystemAuthMutationBody = AuthConfig;
export type SystemAuthMutationError = AxiosError<ErrorResponse>;

export const useSystemAuth = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof systemAuth>>,
    TError,
    { endpointId: number; data: AuthConfig },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getSystemAuthMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Get system information
 */
export const systemInfo = (
  endpointId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SystemInfo>> =>
  axios.get(`/endpoints/${endpointId}/docker/info`, options);

export const getSystemInfoQueryKey = (endpointId: number) =>
  [`/endpoints/${endpointId}/docker/info`] as const;

export const getSystemInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof systemInfo>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof systemInfo>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof systemInfo>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSystemInfoQueryKey(endpointId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof systemInfo>>> = ({
    signal,
  }) => systemInfo(endpointId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!endpointId, ...queryOptions };
};

export type SystemInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemInfo>>
>;
export type SystemInfoQueryError = AxiosError<ErrorResponse>;

export const useSystemInfo = <
  TData = Awaited<ReturnType<typeof systemInfo>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof systemInfo>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSystemInfoQueryOptions(endpointId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Returns the version of Docker that is running and various information about the system that Docker is running on.
 * @summary Get version
 */
export const systemVersion = (
  endpointId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SystemVersion>> =>
  axios.get(`/endpoints/${endpointId}/docker/version`, options);

export const getSystemVersionQueryKey = (endpointId: number) =>
  [`/endpoints/${endpointId}/docker/version`] as const;

export const getSystemVersionQueryOptions = <
  TData = Awaited<ReturnType<typeof systemVersion>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof systemVersion>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof systemVersion>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSystemVersionQueryKey(endpointId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof systemVersion>>> = ({
    signal,
  }) => systemVersion(endpointId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!endpointId, ...queryOptions };
};

export type SystemVersionQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemVersion>>
>;
export type SystemVersionQueryError = AxiosError<ErrorResponse>;

export const useSystemVersion = <
  TData = Awaited<ReturnType<typeof systemVersion>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof systemVersion>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSystemVersionQueryOptions(endpointId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * This is a dummy endpoint you can use to test if the server is accessible.
 * @summary Ping
 */
export const systemPing = (
  endpointId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> =>
  axios.get(`/endpoints/${endpointId}/docker/_ping`, options);

export const getSystemPingQueryKey = (endpointId: number) =>
  [`/endpoints/${endpointId}/docker/_ping`] as const;

export const getSystemPingQueryOptions = <
  TData = Awaited<ReturnType<typeof systemPing>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof systemPing>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof systemPing>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSystemPingQueryKey(endpointId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof systemPing>>> = ({
    signal,
  }) => systemPing(endpointId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!endpointId, ...queryOptions };
};

export type SystemPingQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemPing>>
>;
export type SystemPingQueryError = AxiosError<ErrorResponse>;

export const useSystemPing = <
  TData = Awaited<ReturnType<typeof systemPing>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof systemPing>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSystemPingQueryOptions(endpointId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * This is a dummy endpoint you can use to test if the server is accessible.
 * @summary Ping
 */
export const systemPingHead = (
  endpointId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> =>
  axios.head(`/endpoints/${endpointId}/docker/_ping`, options);

export const getSystemPingHeadMutationOptions = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof systemPingHead>>,
    TError,
    { endpointId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof systemPingHead>>,
  TError,
  { endpointId: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof systemPingHead>>,
    { endpointId: number }
  > = (props) => {
    const { endpointId } = props ?? {};

    return systemPingHead(endpointId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SystemPingHeadMutationResult = NonNullable<
  Awaited<ReturnType<typeof systemPingHead>>
>;

export type SystemPingHeadMutationError = AxiosError<ErrorResponse>;

export const useSystemPingHead = <
  TError = AxiosError<ErrorResponse>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof systemPingHead>>,
    TError,
    { endpointId: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getSystemPingHeadMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Stream real-time events from the server.

Various objects within Docker report events when something happens to them.

Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`

Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`

Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`

Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`

The Docker daemon reports these events: `reload`

Services report these events: `create`, `update`, and `remove`

Nodes report these events: `create`, `update`, and `remove`

Secrets report these events: `create`, `update`, and `remove`

Configs report these events: `create`, `update`, and `remove`

The Builder reports `prune` events

 * @summary Monitor events
 */
export const systemEvents = (
  endpointId: number,
  params?: SystemEventsParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EventMessage>> =>
  axios.get(`/endpoints/${endpointId}/docker/events`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const getSystemEventsQueryKey = (
  endpointId: number,
  params?: SystemEventsParams
) =>
  [
    `/endpoints/${endpointId}/docker/events`,
    ...(params ? [params] : []),
  ] as const;

export const getSystemEventsQueryOptions = <
  TData = Awaited<ReturnType<typeof systemEvents>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  params?: SystemEventsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof systemEvents>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof systemEvents>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSystemEventsQueryKey(endpointId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof systemEvents>>> = ({
    signal,
  }) => systemEvents(endpointId, params, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!endpointId, ...queryOptions };
};

export type SystemEventsQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemEvents>>
>;
export type SystemEventsQueryError = AxiosError<ErrorResponse>;

export const useSystemEvents = <
  TData = Awaited<ReturnType<typeof systemEvents>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  params?: SystemEventsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof systemEvents>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSystemEventsQueryOptions(endpointId, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get data usage information
 */
export const systemDataUsage = (
  endpointId: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SystemDataUsage200One | SystemDataUsage200Two>> =>
  axios.get(`/endpoints/${endpointId}/docker/system/df`, options);

export const getSystemDataUsageQueryKey = (endpointId: number) =>
  [`/endpoints/${endpointId}/docker/system/df`] as const;

export const getSystemDataUsageQueryOptions = <
  TData = Awaited<ReturnType<typeof systemDataUsage>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof systemDataUsage>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof systemDataUsage>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSystemDataUsageQueryKey(endpointId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof systemDataUsage>>> = ({
    signal,
  }) => systemDataUsage(endpointId, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!endpointId, ...queryOptions };
};

export type SystemDataUsageQueryResult = NonNullable<
  Awaited<ReturnType<typeof systemDataUsage>>
>;
export type SystemDataUsageQueryError = AxiosError<ErrorResponse>;

export const useSystemDataUsage = <
  TData = Awaited<ReturnType<typeof systemDataUsage>>,
  TError = AxiosError<ErrorResponse>
>(
  endpointId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof systemDataUsage>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSystemDataUsageQueryOptions(endpointId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
